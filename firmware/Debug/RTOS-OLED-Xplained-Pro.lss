
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a64  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406a64  00406a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  00406a6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000314  204009c8  00407434  000209c8  2**2
                  ALLOC
  4 .stack        00002004  20400cdc  00407748  000209c8  2**0
                  ALLOC
  5 .heap         00000200  20402ce0  0040974c  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023e4c  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a39  00000000  00000000  0004489b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000fe8  00000000  00000000  000492d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000237cb  00000000  00000000  0004a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013863  00000000  00000000  0006da87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094e7a  00000000  00000000  000812ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009b40  00000000  00000000  00116164  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  0011fca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003224  00000000  00000000  00120e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 2c 40 20 99 11 40 00 97 11 40 00 97 11 40 00     .,@ ..@...@...@.
  400010:	97 11 40 00 97 11 40 00 97 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	71 15 40 00 97 11 40 00 00 00 00 00 11 16 40 00     q.@...@.......@.
  40003c:	79 16 40 00 97 11 40 00 97 11 40 00 97 11 40 00     y.@...@...@...@.
  40004c:	97 11 40 00 97 11 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  40005c:	97 11 40 00 97 11 40 00 00 00 00 00 89 0e 40 00     ..@...@.......@.
  40006c:	9d 0e 40 00 b1 0e 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  40007c:	97 11 40 00 c5 0e 40 00 d9 0e 40 00 97 11 40 00     ..@...@...@...@.
  40008c:	97 11 40 00 97 11 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  40009c:	c1 34 40 00 97 11 40 00 97 11 40 00 97 11 40 00     .4@...@...@...@.
  4000ac:	97 11 40 00 97 11 40 00 59 04 40 00 97 11 40 00     ..@...@.Y.@...@.
  4000bc:	97 11 40 00 97 11 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  4000cc:	97 11 40 00 00 00 00 00 97 11 40 00 00 00 00 00     ..@.......@.....
  4000dc:	97 11 40 00 6d 04 40 00 97 11 40 00 97 11 40 00     ..@.m.@...@...@.
  4000ec:	97 11 40 00 97 11 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  4000fc:	97 11 40 00 97 11 40 00 97 11 40 00 97 11 40 00     ..@...@...@...@.
  40010c:	97 11 40 00 97 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 97 11 40 00 97 11 40 00 97 11 40 00     ......@...@...@.
  40012c:	97 11 40 00 97 11 40 00 00 00 00 00 97 11 40 00     ..@...@.......@.
  40013c:	97 11 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c8 	.word	0x204009c8
  40015c:	00000000 	.word	0x00000000
  400160:	00406a6c 	.word	0x00406a6c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406a6c 	.word	0x00406a6c
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	00406a6c 	.word	0x00406a6c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	20400be4 	.word	0x20400be4
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	08f0d180 	.word	0x08f0d180
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	20400be0 	.word	0x20400be0
  40038c:	20400c24 	.word	0x20400c24

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	20400be4 	.word	0x20400be4
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <afec_disable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400420:	4b0c      	ldr	r3, [pc, #48]	; (400454 <afec_disable_interrupt+0x34>)
  400422:	4299      	cmp	r1, r3
  400424:	d007      	beq.n	400436 <afec_disable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400426:	290b      	cmp	r1, #11
  400428:	d80b      	bhi.n	400442 <afec_disable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40042a:	d006      	beq.n	40043a <afec_disable_interrupt+0x1a>
			afec->AFEC_IDR = 1 << interrupt_source;
  40042c:	2301      	movs	r3, #1
  40042e:	fa03 f101 	lsl.w	r1, r3, r1
  400432:	6281      	str	r1, [r0, #40]	; 0x28
  400434:	4770      	bx	lr
		afec->AFEC_IDR = AFEC_INTERRUPT_ALL;
  400436:	6283      	str	r3, [r0, #40]	; 0x28
		return;
  400438:	4770      	bx	lr
			afec->AFEC_IDR = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40043a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40043e:	6283      	str	r3, [r0, #40]	; 0x28
  400440:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400442:	290e      	cmp	r1, #14
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400444:	bf94      	ite	ls
  400446:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400448:	310f      	addhi	r1, #15
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40044a:	2301      	movs	r3, #1
  40044c:	fa03 f101 	lsl.w	r1, r3, r1
  400450:	6281      	str	r1, [r0, #40]	; 0x28
  400452:	4770      	bx	lr
  400454:	47000fff 	.word	0x47000fff

00400458 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400458:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40045a:	4802      	ldr	r0, [pc, #8]	; (400464 <AFEC0_Handler+0xc>)
  40045c:	4b02      	ldr	r3, [pc, #8]	; (400468 <AFEC0_Handler+0x10>)
  40045e:	4798      	blx	r3
  400460:	bd08      	pop	{r3, pc}
  400462:	bf00      	nop
  400464:	4003c000 	.word	0x4003c000
  400468:	004001ad 	.word	0x004001ad

0040046c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40046c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40046e:	4802      	ldr	r0, [pc, #8]	; (400478 <AFEC1_Handler+0xc>)
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <AFEC1_Handler+0x10>)
  400472:	4798      	blx	r3
  400474:	bd08      	pop	{r3, pc}
  400476:	bf00      	nop
  400478:	40064000 	.word	0x40064000
  40047c:	004001ad 	.word	0x004001ad

00400480 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400480:	b500      	push	{lr}
  400482:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400484:	4b13      	ldr	r3, [pc, #76]	; (4004d4 <afec_enable+0x54>)
  400486:	4298      	cmp	r0, r3
  400488:	bf0c      	ite	eq
  40048a:	2028      	moveq	r0, #40	; 0x28
  40048c:	201d      	movne	r0, #29
  40048e:	4b12      	ldr	r3, [pc, #72]	; (4004d8 <afec_enable+0x58>)
  400490:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400492:	4b12      	ldr	r3, [pc, #72]	; (4004dc <afec_enable+0x5c>)
  400494:	789b      	ldrb	r3, [r3, #2]
  400496:	2bff      	cmp	r3, #255	; 0xff
  400498:	d01a      	beq.n	4004d0 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40049a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40049e:	fab3 f383 	clz	r3, r3
  4004a2:	095b      	lsrs	r3, r3, #5
  4004a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004a6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4004a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4004ac:	2200      	movs	r2, #0
  4004ae:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <afec_enable+0x60>)
  4004b0:	701a      	strb	r2, [r3, #0]
	return flags;
  4004b2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4004b4:	4a09      	ldr	r2, [pc, #36]	; (4004dc <afec_enable+0x5c>)
  4004b6:	7893      	ldrb	r3, [r2, #2]
  4004b8:	3301      	adds	r3, #1
  4004ba:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004bc:	b129      	cbz	r1, 4004ca <afec_enable+0x4a>
		cpu_irq_enable();
  4004be:	2201      	movs	r2, #1
  4004c0:	4b07      	ldr	r3, [pc, #28]	; (4004e0 <afec_enable+0x60>)
  4004c2:	701a      	strb	r2, [r3, #0]
  4004c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004c8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4004ca:	b003      	add	sp, #12
  4004cc:	f85d fb04 	ldr.w	pc, [sp], #4
  4004d0:	e7fe      	b.n	4004d0 <afec_enable+0x50>
  4004d2:	bf00      	nop
  4004d4:	40064000 	.word	0x40064000
  4004d8:	0040100d 	.word	0x0040100d
  4004dc:	20400bdc 	.word	0x20400bdc
  4004e0:	2040000a 	.word	0x2040000a

004004e4 <sdramc_init>:
	if(sleepmgr_locks[mode] >= 0xff) {
  4004e4:	4b51      	ldr	r3, [pc, #324]	; (40062c <sdramc_init+0x148>)
  4004e6:	781b      	ldrb	r3, [r3, #0]
  4004e8:	2bff      	cmp	r3, #255	; 0xff
  4004ea:	f000 809d 	beq.w	400628 <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  4004ee:	b4f0      	push	{r4, r5, r6, r7}
  4004f0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4004f2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004f6:	fab3 f383 	clz	r3, r3
  4004fa:	095b      	lsrs	r3, r3, #5
  4004fc:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4004fe:	b672      	cpsid	i
  400500:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400504:	2200      	movs	r2, #0
  400506:	4b4a      	ldr	r3, [pc, #296]	; (400630 <sdramc_init+0x14c>)
  400508:	701a      	strb	r2, [r3, #0]
	return flags;
  40050a:	9c00      	ldr	r4, [sp, #0]
	++sleepmgr_locks[mode];
  40050c:	4a47      	ldr	r2, [pc, #284]	; (40062c <sdramc_init+0x148>)
  40050e:	7813      	ldrb	r3, [r2, #0]
  400510:	3301      	adds	r3, #1
  400512:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400514:	b12c      	cbz	r4, 400522 <sdramc_init+0x3e>
		cpu_irq_enable();
  400516:	2201      	movs	r2, #1
  400518:	4b45      	ldr	r3, [pc, #276]	; (400630 <sdramc_init+0x14c>)
  40051a:	701a      	strb	r2, [r3, #0]
  40051c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400520:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  400522:	6883      	ldr	r3, [r0, #8]
  400524:	4a43      	ldr	r2, [pc, #268]	; (400634 <sdramc_init+0x150>)
  400526:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  400528:	2300      	movs	r3, #0
  40052a:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  40052c:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  40052e:	9301      	str	r3, [sp, #4]
  400530:	4b41      	ldr	r3, [pc, #260]	; (400638 <sdramc_init+0x154>)
  400532:	fba3 2301 	umull	r2, r3, r3, r1
  400536:	0c9a      	lsrs	r2, r3, #18
  400538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40053c:	fb03 f302 	mul.w	r3, r3, r2
  400540:	4a3e      	ldr	r2, [pc, #248]	; (40063c <sdramc_init+0x158>)
  400542:	fba2 2303 	umull	r2, r3, r2, r3
  400546:	089b      	lsrs	r3, r3, #2
  400548:	9a01      	ldr	r2, [sp, #4]
  40054a:	4293      	cmp	r3, r2
  40054c:	d905      	bls.n	40055a <sdramc_init+0x76>
  40054e:	9a01      	ldr	r2, [sp, #4]
  400550:	3201      	adds	r2, #1
  400552:	9201      	str	r2, [sp, #4]
  400554:	9a01      	ldr	r2, [sp, #4]
  400556:	429a      	cmp	r2, r3
  400558:	d3f9      	bcc.n	40054e <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  40055a:	4d36      	ldr	r5, [pc, #216]	; (400634 <sdramc_init+0x150>)
  40055c:	2201      	movs	r2, #1
  40055e:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  400560:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  400564:	2200      	movs	r2, #0
  400566:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  400568:	2602      	movs	r6, #2
  40056a:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  40056c:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  40056e:	9201      	str	r2, [sp, #4]
  400570:	9a01      	ldr	r2, [sp, #4]
  400572:	429a      	cmp	r2, r3
  400574:	d205      	bcs.n	400582 <sdramc_init+0x9e>
  400576:	9a01      	ldr	r2, [sp, #4]
  400578:	3201      	adds	r2, #1
  40057a:	9201      	str	r2, [sp, #4]
  40057c:	9a01      	ldr	r2, [sp, #4]
  40057e:	429a      	cmp	r2, r3
  400580:	d3f9      	bcc.n	400576 <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400582:	4a2c      	ldr	r2, [pc, #176]	; (400634 <sdramc_init+0x150>)
  400584:	2404      	movs	r4, #4
  400586:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  400588:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  40058c:	2601      	movs	r6, #1
  40058e:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400590:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  400592:	2602      	movs	r6, #2
  400594:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400596:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  400598:	2603      	movs	r6, #3
  40059a:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40059c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  40059e:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4005a0:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  4005a2:	2705      	movs	r7, #5
  4005a4:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4005a6:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  4005a8:	2706      	movs	r7, #6
  4005aa:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4005ac:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  4005ae:	2707      	movs	r7, #7
  4005b0:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4005b2:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  4005b4:	2408      	movs	r4, #8
  4005b6:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4005b8:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4005ba:	6842      	ldr	r2, [r0, #4]
  4005bc:	0052      	lsls	r2, r2, #1
  4005be:	442a      	add	r2, r5
  4005c0:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  4005c4:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4005c6:	2200      	movs	r2, #0
  4005c8:	9201      	str	r2, [sp, #4]
  4005ca:	9a01      	ldr	r2, [sp, #4]
  4005cc:	429a      	cmp	r2, r3
  4005ce:	d205      	bcs.n	4005dc <sdramc_init+0xf8>
  4005d0:	9a01      	ldr	r2, [sp, #4]
  4005d2:	3201      	adds	r2, #1
  4005d4:	9201      	str	r2, [sp, #4]
  4005d6:	9a01      	ldr	r2, [sp, #4]
  4005d8:	429a      	cmp	r2, r3
  4005da:	d3f9      	bcc.n	4005d0 <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  4005dc:	4a15      	ldr	r2, [pc, #84]	; (400634 <sdramc_init+0x150>)
  4005de:	2305      	movs	r3, #5
  4005e0:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  4005e2:	6800      	ldr	r0, [r0, #0]
  4005e4:	2302      	movs	r3, #2
  4005e6:	4083      	lsls	r3, r0
  4005e8:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  4005ec:	2000      	movs	r0, #0
  4005ee:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  4005f0:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  4005f2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  4005f6:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  4005f8:	4b11      	ldr	r3, [pc, #68]	; (400640 <sdramc_init+0x15c>)
  4005fa:	fba3 1301 	umull	r1, r3, r3, r1
  4005fe:	099b      	lsrs	r3, r3, #6
  400600:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  400602:	9901      	ldr	r1, [sp, #4]
  400604:	f643 5309 	movw	r3, #15625	; 0x3d09
  400608:	fb03 f301 	mul.w	r3, r3, r1
  40060c:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  40060e:	9b01      	ldr	r3, [sp, #4]
  400610:	4909      	ldr	r1, [pc, #36]	; (400638 <sdramc_init+0x154>)
  400612:	fba1 1303 	umull	r1, r3, r1, r3
  400616:	0c9b      	lsrs	r3, r3, #18
  400618:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  40061a:	9b01      	ldr	r3, [sp, #4]
  40061c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400620:	6053      	str	r3, [r2, #4]
}
  400622:	b002      	add	sp, #8
  400624:	bcf0      	pop	{r4, r5, r6, r7}
  400626:	4770      	bx	lr
  400628:	e7fe      	b.n	400628 <sdramc_init+0x144>
  40062a:	bf00      	nop
  40062c:	20400bdc 	.word	0x20400bdc
  400630:	2040000a 	.word	0x2040000a
  400634:	40084000 	.word	0x40084000
  400638:	431bde83 	.word	0x431bde83
  40063c:	aaaaaaab 	.word	0xaaaaaaab
  400640:	10624dd3 	.word	0x10624dd3

00400644 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400644:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400646:	0189      	lsls	r1, r1, #6
  400648:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40064a:	2402      	movs	r4, #2
  40064c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40064e:	f04f 31ff 	mov.w	r1, #4294967295
  400652:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400654:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400656:	605a      	str	r2, [r3, #4]
}
  400658:	f85d 4b04 	ldr.w	r4, [sp], #4
  40065c:	4770      	bx	lr

0040065e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40065e:	0189      	lsls	r1, r1, #6
  400660:	2305      	movs	r3, #5
  400662:	5043      	str	r3, [r0, r1]
  400664:	4770      	bx	lr

00400666 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  400666:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40066a:	614a      	str	r2, [r1, #20]
  40066c:	4770      	bx	lr

0040066e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40066e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400672:	61ca      	str	r2, [r1, #28]
  400674:	4770      	bx	lr

00400676 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400676:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40067a:	6a08      	ldr	r0, [r1, #32]
}
  40067c:	4770      	bx	lr

0040067e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40067e:	b4f0      	push	{r4, r5, r6, r7}
  400680:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400682:	2402      	movs	r4, #2
  400684:	9401      	str	r4, [sp, #4]
  400686:	2408      	movs	r4, #8
  400688:	9402      	str	r4, [sp, #8]
  40068a:	2420      	movs	r4, #32
  40068c:	9403      	str	r4, [sp, #12]
  40068e:	2480      	movs	r4, #128	; 0x80
  400690:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400694:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400696:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400698:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40069c:	d814      	bhi.n	4006c8 <tc_find_mck_divisor+0x4a>
  40069e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4006a0:	42a0      	cmp	r0, r4
  4006a2:	d217      	bcs.n	4006d4 <tc_find_mck_divisor+0x56>
  4006a4:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4006a6:	af01      	add	r7, sp, #4
  4006a8:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4006ac:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4006b0:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4006b2:	4284      	cmp	r4, r0
  4006b4:	d30a      	bcc.n	4006cc <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4006b6:	4286      	cmp	r6, r0
  4006b8:	d90d      	bls.n	4006d6 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4006ba:	3501      	adds	r5, #1
	for (ul_index = 0;
  4006bc:	2d05      	cmp	r5, #5
  4006be:	d1f3      	bne.n	4006a8 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4006c0:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4006c2:	b006      	add	sp, #24
  4006c4:	bcf0      	pop	{r4, r5, r6, r7}
  4006c6:	4770      	bx	lr
			return 0;
  4006c8:	2000      	movs	r0, #0
  4006ca:	e7fa      	b.n	4006c2 <tc_find_mck_divisor+0x44>
  4006cc:	2000      	movs	r0, #0
  4006ce:	e7f8      	b.n	4006c2 <tc_find_mck_divisor+0x44>
	return 1;
  4006d0:	2001      	movs	r0, #1
  4006d2:	e7f6      	b.n	4006c2 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4006d4:	2500      	movs	r5, #0
	if (p_uldiv) {
  4006d6:	b12a      	cbz	r2, 4006e4 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4006d8:	a906      	add	r1, sp, #24
  4006da:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006de:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006e2:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4006e4:	2b00      	cmp	r3, #0
  4006e6:	d0f3      	beq.n	4006d0 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4006e8:	601d      	str	r5, [r3, #0]
	return 1;
  4006ea:	2001      	movs	r0, #1
  4006ec:	e7e9      	b.n	4006c2 <tc_find_mck_divisor+0x44>
	...

004006f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006f2:	4810      	ldr	r0, [pc, #64]	; (400734 <sysclk_init+0x44>)
  4006f4:	4b10      	ldr	r3, [pc, #64]	; (400738 <sysclk_init+0x48>)
  4006f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006f8:	213e      	movs	r1, #62	; 0x3e
  4006fa:	2000      	movs	r0, #0
  4006fc:	4b0f      	ldr	r3, [pc, #60]	; (40073c <sysclk_init+0x4c>)
  4006fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400700:	4c0f      	ldr	r4, [pc, #60]	; (400740 <sysclk_init+0x50>)
  400702:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400704:	2800      	cmp	r0, #0
  400706:	d0fc      	beq.n	400702 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400708:	4b0e      	ldr	r3, [pc, #56]	; (400744 <sysclk_init+0x54>)
  40070a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40070c:	4a0e      	ldr	r2, [pc, #56]	; (400748 <sysclk_init+0x58>)
  40070e:	4b0f      	ldr	r3, [pc, #60]	; (40074c <sysclk_init+0x5c>)
  400710:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400712:	4c0f      	ldr	r4, [pc, #60]	; (400750 <sysclk_init+0x60>)
  400714:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400716:	2800      	cmp	r0, #0
  400718:	d0fc      	beq.n	400714 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40071a:	2002      	movs	r0, #2
  40071c:	4b0d      	ldr	r3, [pc, #52]	; (400754 <sysclk_init+0x64>)
  40071e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400720:	2010      	movs	r0, #16
  400722:	4b0d      	ldr	r3, [pc, #52]	; (400758 <sysclk_init+0x68>)
  400724:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400726:	4b0d      	ldr	r3, [pc, #52]	; (40075c <sysclk_init+0x6c>)
  400728:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40072a:	480d      	ldr	r0, [pc, #52]	; (400760 <sysclk_init+0x70>)
  40072c:	4b02      	ldr	r3, [pc, #8]	; (400738 <sysclk_init+0x48>)
  40072e:	4798      	blx	r3
  400730:	bd10      	pop	{r4, pc}
  400732:	bf00      	nop
  400734:	11e1a300 	.word	0x11e1a300
  400738:	0040136d 	.word	0x0040136d
  40073c:	00400f89 	.word	0x00400f89
  400740:	00400fdd 	.word	0x00400fdd
  400744:	00400fed 	.word	0x00400fed
  400748:	20183f01 	.word	0x20183f01
  40074c:	400e0600 	.word	0x400e0600
  400750:	00400ffd 	.word	0x00400ffd
  400754:	00400eed 	.word	0x00400eed
  400758:	00400f25 	.word	0x00400f25
  40075c:	00401261 	.word	0x00401261
  400760:	08f0d180 	.word	0x08f0d180

00400764 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400768:	b980      	cbnz	r0, 40078c <_read+0x28>
  40076a:	460c      	mov	r4, r1
  40076c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40076e:	2a00      	cmp	r2, #0
  400770:	dd0f      	ble.n	400792 <_read+0x2e>
  400772:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400774:	4e08      	ldr	r6, [pc, #32]	; (400798 <_read+0x34>)
  400776:	4d09      	ldr	r5, [pc, #36]	; (40079c <_read+0x38>)
  400778:	6830      	ldr	r0, [r6, #0]
  40077a:	4621      	mov	r1, r4
  40077c:	682b      	ldr	r3, [r5, #0]
  40077e:	4798      	blx	r3
		ptr++;
  400780:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400782:	42bc      	cmp	r4, r7
  400784:	d1f8      	bne.n	400778 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400786:	4640      	mov	r0, r8
  400788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40078c:	f04f 38ff 	mov.w	r8, #4294967295
  400790:	e7f9      	b.n	400786 <_read+0x22>
	for (; len > 0; --len) {
  400792:	4680      	mov	r8, r0
  400794:	e7f7      	b.n	400786 <_read+0x22>
  400796:	bf00      	nop
  400798:	20400c6c 	.word	0x20400c6c
  40079c:	20400c64 	.word	0x20400c64

004007a0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4007a0:	3801      	subs	r0, #1
  4007a2:	2802      	cmp	r0, #2
  4007a4:	d815      	bhi.n	4007d2 <_write+0x32>
{
  4007a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007aa:	460e      	mov	r6, r1
  4007ac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4007ae:	b19a      	cbz	r2, 4007d8 <_write+0x38>
  4007b0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4007b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007ec <_write+0x4c>
  4007b6:	4f0c      	ldr	r7, [pc, #48]	; (4007e8 <_write+0x48>)
  4007b8:	f8d8 0000 	ldr.w	r0, [r8]
  4007bc:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007c0:	683b      	ldr	r3, [r7, #0]
  4007c2:	4798      	blx	r3
  4007c4:	2800      	cmp	r0, #0
  4007c6:	db0a      	blt.n	4007de <_write+0x3e>
  4007c8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4007ca:	3c01      	subs	r4, #1
  4007cc:	d1f4      	bne.n	4007b8 <_write+0x18>
  4007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4007d2:	f04f 30ff 	mov.w	r0, #4294967295
  4007d6:	4770      	bx	lr
	for (; len != 0; --len) {
  4007d8:	4610      	mov	r0, r2
  4007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4007de:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007e6:	bf00      	nop
  4007e8:	20400c68 	.word	0x20400c68
  4007ec:	20400c6c 	.word	0x20400c6c

004007f0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007f6:	4ba6      	ldr	r3, [pc, #664]	; (400a90 <board_init+0x2a0>)
  4007f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4007fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4007fe:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400802:	4ba4      	ldr	r3, [pc, #656]	; (400a94 <board_init+0x2a4>)
  400804:	2200      	movs	r2, #0
  400806:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40080a:	695a      	ldr	r2, [r3, #20]
  40080c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400810:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400816:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40081a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40081e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400822:	f007 0007 	and.w	r0, r7, #7
  400826:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400828:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40082c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400830:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400834:	f3bf 8f4f 	dsb	sy
  400838:	f04f 34ff 	mov.w	r4, #4294967295
  40083c:	fa04 fc00 	lsl.w	ip, r4, r0
  400840:	fa06 f000 	lsl.w	r0, r6, r0
  400844:	fa04 f40e 	lsl.w	r4, r4, lr
  400848:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40084c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40084e:	463a      	mov	r2, r7
  400850:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400852:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400856:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40085a:	3a01      	subs	r2, #1
  40085c:	4423      	add	r3, r4
  40085e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400862:	d1f6      	bne.n	400852 <board_init+0x62>
        } while(sets--);
  400864:	3e01      	subs	r6, #1
  400866:	4460      	add	r0, ip
  400868:	f1b6 3fff 	cmp.w	r6, #4294967295
  40086c:	d1ef      	bne.n	40084e <board_init+0x5e>
  40086e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400872:	4b88      	ldr	r3, [pc, #544]	; (400a94 <board_init+0x2a4>)
  400874:	695a      	ldr	r2, [r3, #20]
  400876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40087a:	615a      	str	r2, [r3, #20]
  40087c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400880:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400884:	4a84      	ldr	r2, [pc, #528]	; (400a98 <board_init+0x2a8>)
  400886:	4985      	ldr	r1, [pc, #532]	; (400a9c <board_init+0x2ac>)
  400888:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40088a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40088e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400894:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400898:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40089c:	f022 0201 	bic.w	r2, r2, #1
  4008a0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008a4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4008a8:	f022 0201 	bic.w	r2, r2, #1
  4008ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008b4:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008b8:	200a      	movs	r0, #10
  4008ba:	4c79      	ldr	r4, [pc, #484]	; (400aa0 <board_init+0x2b0>)
  4008bc:	47a0      	blx	r4
  4008be:	200b      	movs	r0, #11
  4008c0:	47a0      	blx	r4
  4008c2:	200c      	movs	r0, #12
  4008c4:	47a0      	blx	r4
  4008c6:	2010      	movs	r0, #16
  4008c8:	47a0      	blx	r4
  4008ca:	2011      	movs	r0, #17
  4008cc:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008ce:	4b75      	ldr	r3, [pc, #468]	; (400aa4 <board_init+0x2b4>)
  4008d0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008d4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008da:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4008e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4008e4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008ea:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008f0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4008f2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4008f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4008f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008fa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4008fe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400900:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400902:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400906:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400908:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40090c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400910:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400914:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400918:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40091a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40091e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400920:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400926:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400928:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40092c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40092e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400930:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400934:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400936:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400938:	4e5b      	ldr	r6, [pc, #364]	; (400aa8 <board_init+0x2b8>)
  40093a:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  40093e:	f043 0310 	orr.w	r3, r3, #16
  400942:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  400946:	4b59      	ldr	r3, [pc, #356]	; (400aac <board_init+0x2bc>)
  400948:	2510      	movs	r5, #16
  40094a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40094c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400950:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400952:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400954:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40095a:	432a      	orrs	r2, r5
  40095c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40095e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400960:	432a      	orrs	r2, r5
  400962:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400964:	605d      	str	r5, [r3, #4]
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  400966:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40096a:	2014      	movs	r0, #20
  40096c:	4c50      	ldr	r4, [pc, #320]	; (400ab0 <board_init+0x2c0>)
  40096e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  400970:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400974:	2077      	movs	r0, #119	; 0x77
  400976:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  400978:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40097c:	206e      	movs	r0, #110	; 0x6e
  40097e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  400980:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400984:	204f      	movs	r0, #79	; 0x4f
  400986:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  400988:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40098c:	2070      	movs	r0, #112	; 0x70
  40098e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  400990:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400994:	2071      	movs	r0, #113	; 0x71
  400996:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  400998:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40099c:	207d      	movs	r0, #125	; 0x7d
  40099e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4009a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009a4:	2052      	movs	r0, #82	; 0x52
  4009a6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4009a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4009ac:	206f      	movs	r0, #111	; 0x6f
  4009ae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);  
  4009b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009b4:	2054      	movs	r0, #84	; 0x54
  4009b6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  
  4009b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009bc:	2055      	movs	r0, #85	; 0x55
  4009be:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  
  4009c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009c4:	2056      	movs	r0, #86	; 0x56
  4009c6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  
  4009c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009cc:	2057      	movs	r0, #87	; 0x57
  4009ce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  
  4009d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009d4:	2058      	movs	r0, #88	; 0x58
  4009d6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  
  4009d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009dc:	2059      	movs	r0, #89	; 0x59
  4009de:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);  
  4009e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009e4:	205a      	movs	r0, #90	; 0x5a
  4009e6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  
  4009e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009ec:	205b      	movs	r0, #91	; 0x5b
  4009ee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A10_PIO, SDRAM_A_FLAGS);  
  4009f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009f4:	205c      	movs	r0, #92	; 0x5c
  4009f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A_FLAGS);  
  4009f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009fc:	205d      	movs	r0, #93	; 0x5d
  4009fe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS);
  400a00:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400a04:	206d      	movs	r0, #109	; 0x6d
  400a06:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);  
  400a08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a0c:	2040      	movs	r0, #64	; 0x40
  400a0e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);  
  400a10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a14:	2041      	movs	r0, #65	; 0x41
  400a16:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);  
  400a18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a1c:	2042      	movs	r0, #66	; 0x42
  400a1e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);  
  400a20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a24:	2043      	movs	r0, #67	; 0x43
  400a26:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);  
  400a28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a2c:	2044      	movs	r0, #68	; 0x44
  400a2e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);  
  400a30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a34:	2045      	movs	r0, #69	; 0x45
  400a36:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);  
  400a38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a3c:	2046      	movs	r0, #70	; 0x46
  400a3e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);  
  400a40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a44:	2047      	movs	r0, #71	; 0x47
  400a46:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);  
  400a48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a4c:	2080      	movs	r0, #128	; 0x80
  400a4e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);  
  400a50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a54:	2081      	movs	r0, #129	; 0x81
  400a56:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS); 
  400a58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a5c:	2082      	movs	r0, #130	; 0x82
  400a5e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS); 
  400a60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a64:	2083      	movs	r0, #131	; 0x83
  400a66:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS); 
  400a68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a6c:	2084      	movs	r0, #132	; 0x84
  400a6e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS); 
  400a70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a74:	2085      	movs	r0, #133	; 0x85
  400a76:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS); 
  400a78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a7c:	200f      	movs	r0, #15
  400a7e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS); 
  400a80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a84:	4628      	mov	r0, r5
  400a86:	47a0      	blx	r4
	
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  400a88:	f8c6 5124 	str.w	r5, [r6, #292]	; 0x124
  400a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a8e:	bf00      	nop
  400a90:	400e1850 	.word	0x400e1850
  400a94:	e000ed00 	.word	0xe000ed00
  400a98:	400e0c00 	.word	0x400e0c00
  400a9c:	5a00080c 	.word	0x5a00080c
  400aa0:	0040100d 	.word	0x0040100d
  400aa4:	400e1200 	.word	0x400e1200
  400aa8:	40088000 	.word	0x40088000
  400aac:	400e1000 	.word	0x400e1000
  400ab0:	00400c99 	.word	0x00400c99

00400ab4 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400ab4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400ab8:	0053      	lsls	r3, r2, #1
  400aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400abe:	fbb2 f2f3 	udiv	r2, r2, r3
  400ac2:	3a01      	subs	r2, #1
  400ac4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400ac8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400acc:	4770      	bx	lr

00400ace <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400ace:	6301      	str	r1, [r0, #48]	; 0x30
  400ad0:	4770      	bx	lr

00400ad2 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400ad2:	6341      	str	r1, [r0, #52]	; 0x34
  400ad4:	4770      	bx	lr

00400ad6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ad6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ad8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400adc:	d03a      	beq.n	400b54 <pio_set_peripheral+0x7e>
  400ade:	d813      	bhi.n	400b08 <pio_set_peripheral+0x32>
  400ae0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ae4:	d025      	beq.n	400b32 <pio_set_peripheral+0x5c>
  400ae6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400aea:	d10a      	bne.n	400b02 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400aee:	4313      	orrs	r3, r2
  400af0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400af2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400af4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400af6:	400b      	ands	r3, r1
  400af8:	ea23 0302 	bic.w	r3, r3, r2
  400afc:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400afe:	6042      	str	r2, [r0, #4]
  400b00:	4770      	bx	lr
	switch (ul_type) {
  400b02:	2900      	cmp	r1, #0
  400b04:	d1fb      	bne.n	400afe <pio_set_peripheral+0x28>
  400b06:	4770      	bx	lr
  400b08:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b0c:	d021      	beq.n	400b52 <pio_set_peripheral+0x7c>
  400b0e:	d809      	bhi.n	400b24 <pio_set_peripheral+0x4e>
  400b10:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b14:	d1f3      	bne.n	400afe <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b16:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b18:	4313      	orrs	r3, r2
  400b1a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b1e:	4313      	orrs	r3, r2
  400b20:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b22:	e7ec      	b.n	400afe <pio_set_peripheral+0x28>
	switch (ul_type) {
  400b24:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b28:	d013      	beq.n	400b52 <pio_set_peripheral+0x7c>
  400b2a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b2e:	d010      	beq.n	400b52 <pio_set_peripheral+0x7c>
  400b30:	e7e5      	b.n	400afe <pio_set_peripheral+0x28>
{
  400b32:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b34:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b36:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400b38:	43d3      	mvns	r3, r2
  400b3a:	4021      	ands	r1, r4
  400b3c:	461c      	mov	r4, r3
  400b3e:	4019      	ands	r1, r3
  400b40:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b42:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b44:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400b46:	400b      	ands	r3, r1
  400b48:	4023      	ands	r3, r4
  400b4a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400b4c:	6042      	str	r2, [r0, #4]
}
  400b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b52:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b54:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b56:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400b58:	400b      	ands	r3, r1
  400b5a:	ea23 0302 	bic.w	r3, r3, r2
  400b5e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b60:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b62:	4313      	orrs	r3, r2
  400b64:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b66:	e7ca      	b.n	400afe <pio_set_peripheral+0x28>

00400b68 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b68:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400b6a:	f012 0f01 	tst.w	r2, #1
  400b6e:	d10d      	bne.n	400b8c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400b70:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b72:	f012 0f0a 	tst.w	r2, #10
  400b76:	d00b      	beq.n	400b90 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400b78:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400b7a:	f012 0f02 	tst.w	r2, #2
  400b7e:	d109      	bne.n	400b94 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400b80:	f012 0f08 	tst.w	r2, #8
  400b84:	d008      	beq.n	400b98 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400b86:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400b8a:	e005      	b.n	400b98 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400b8c:	6641      	str	r1, [r0, #100]	; 0x64
  400b8e:	e7f0      	b.n	400b72 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400b90:	6241      	str	r1, [r0, #36]	; 0x24
  400b92:	e7f2      	b.n	400b7a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400b94:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400b98:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400b9a:	6001      	str	r1, [r0, #0]
  400b9c:	4770      	bx	lr

00400b9e <pio_set_output>:
{
  400b9e:	b410      	push	{r4}
  400ba0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400ba2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ba4:	b94c      	cbnz	r4, 400bba <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400ba6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400ba8:	b14b      	cbz	r3, 400bbe <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400baa:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400bac:	b94a      	cbnz	r2, 400bc2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400bae:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400bb0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400bb2:	6001      	str	r1, [r0, #0]
}
  400bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bb8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400bba:	6641      	str	r1, [r0, #100]	; 0x64
  400bbc:	e7f4      	b.n	400ba8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400bbe:	6541      	str	r1, [r0, #84]	; 0x54
  400bc0:	e7f4      	b.n	400bac <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400bc2:	6301      	str	r1, [r0, #48]	; 0x30
  400bc4:	e7f4      	b.n	400bb0 <pio_set_output+0x12>
	...

00400bc8 <pio_configure>:
{
  400bc8:	b570      	push	{r4, r5, r6, lr}
  400bca:	b082      	sub	sp, #8
  400bcc:	4605      	mov	r5, r0
  400bce:	4616      	mov	r6, r2
  400bd0:	461c      	mov	r4, r3
	switch (ul_type) {
  400bd2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400bd6:	d014      	beq.n	400c02 <pio_configure+0x3a>
  400bd8:	d90a      	bls.n	400bf0 <pio_configure+0x28>
  400bda:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400bde:	d024      	beq.n	400c2a <pio_configure+0x62>
  400be0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400be4:	d021      	beq.n	400c2a <pio_configure+0x62>
  400be6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400bea:	d017      	beq.n	400c1c <pio_configure+0x54>
		return 0;
  400bec:	2000      	movs	r0, #0
  400bee:	e01a      	b.n	400c26 <pio_configure+0x5e>
	switch (ul_type) {
  400bf0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400bf4:	d005      	beq.n	400c02 <pio_configure+0x3a>
  400bf6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400bfa:	d002      	beq.n	400c02 <pio_configure+0x3a>
  400bfc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c00:	d1f4      	bne.n	400bec <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400c02:	4632      	mov	r2, r6
  400c04:	4628      	mov	r0, r5
  400c06:	4b11      	ldr	r3, [pc, #68]	; (400c4c <pio_configure+0x84>)
  400c08:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400c0a:	f014 0f01 	tst.w	r4, #1
  400c0e:	d102      	bne.n	400c16 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400c10:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400c12:	2001      	movs	r0, #1
  400c14:	e007      	b.n	400c26 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400c16:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400c18:	2001      	movs	r0, #1
  400c1a:	e004      	b.n	400c26 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400c1c:	461a      	mov	r2, r3
  400c1e:	4631      	mov	r1, r6
  400c20:	4b0b      	ldr	r3, [pc, #44]	; (400c50 <pio_configure+0x88>)
  400c22:	4798      	blx	r3
	return 1;
  400c24:	2001      	movs	r0, #1
}
  400c26:	b002      	add	sp, #8
  400c28:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400c2a:	f004 0301 	and.w	r3, r4, #1
  400c2e:	9300      	str	r3, [sp, #0]
  400c30:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400c34:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c38:	bf14      	ite	ne
  400c3a:	2200      	movne	r2, #0
  400c3c:	2201      	moveq	r2, #1
  400c3e:	4631      	mov	r1, r6
  400c40:	4628      	mov	r0, r5
  400c42:	4c04      	ldr	r4, [pc, #16]	; (400c54 <pio_configure+0x8c>)
  400c44:	47a0      	blx	r4
	return 1;
  400c46:	2001      	movs	r0, #1
		break;
  400c48:	e7ed      	b.n	400c26 <pio_configure+0x5e>
  400c4a:	bf00      	nop
  400c4c:	00400ad7 	.word	0x00400ad7
  400c50:	00400b69 	.word	0x00400b69
  400c54:	00400b9f 	.word	0x00400b9f

00400c58 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400c58:	f012 0f10 	tst.w	r2, #16
  400c5c:	d012      	beq.n	400c84 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400c5e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400c62:	f012 0f20 	tst.w	r2, #32
  400c66:	d007      	beq.n	400c78 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400c68:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400c6c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400c70:	d005      	beq.n	400c7e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400c72:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400c76:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400c78:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400c7c:	e7f6      	b.n	400c6c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400c7e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400c82:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400c84:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400c88:	4770      	bx	lr

00400c8a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400c8a:	6401      	str	r1, [r0, #64]	; 0x40
  400c8c:	4770      	bx	lr

00400c8e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c8e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c90:	4770      	bx	lr

00400c92 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c92:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c94:	4770      	bx	lr
	...

00400c98 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c98:	b570      	push	{r4, r5, r6, lr}
  400c9a:	b082      	sub	sp, #8
  400c9c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400c9e:	4c46      	ldr	r4, [pc, #280]	; (400db8 <pio_configure_pin+0x120>)
  400ca0:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400ca4:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400ca6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400cae:	d059      	beq.n	400d64 <pio_configure_pin+0xcc>
  400cb0:	d80a      	bhi.n	400cc8 <pio_configure_pin+0x30>
  400cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400cb6:	d02f      	beq.n	400d18 <pio_configure_pin+0x80>
  400cb8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400cbc:	d03f      	beq.n	400d3e <pio_configure_pin+0xa6>
  400cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400cc2:	d016      	beq.n	400cf2 <pio_configure_pin+0x5a>
		return 0;
  400cc4:	2000      	movs	r0, #0
  400cc6:	e012      	b.n	400cee <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  400cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400ccc:	d05d      	beq.n	400d8a <pio_configure_pin+0xf2>
  400cce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400cd2:	d05a      	beq.n	400d8a <pio_configure_pin+0xf2>
  400cd4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cd8:	d1f4      	bne.n	400cc4 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400cda:	f000 011f 	and.w	r1, r0, #31
  400cde:	2601      	movs	r6, #1
  400ce0:	462a      	mov	r2, r5
  400ce2:	fa06 f101 	lsl.w	r1, r6, r1
  400ce6:	4620      	mov	r0, r4
  400ce8:	4b34      	ldr	r3, [pc, #208]	; (400dbc <pio_configure_pin+0x124>)
  400cea:	4798      	blx	r3
	return 1;
  400cec:	4630      	mov	r0, r6
}
  400cee:	b002      	add	sp, #8
  400cf0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400cf2:	f000 001f 	and.w	r0, r0, #31
  400cf6:	2601      	movs	r6, #1
  400cf8:	4086      	lsls	r6, r0
  400cfa:	4632      	mov	r2, r6
  400cfc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d00:	4620      	mov	r0, r4
  400d02:	4b2f      	ldr	r3, [pc, #188]	; (400dc0 <pio_configure_pin+0x128>)
  400d04:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d06:	f015 0f01 	tst.w	r5, #1
  400d0a:	d102      	bne.n	400d12 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  400d0c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400d0e:	2001      	movs	r0, #1
  400d10:	e7ed      	b.n	400cee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400d12:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400d14:	2001      	movs	r0, #1
  400d16:	e7ea      	b.n	400cee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400d18:	f000 001f 	and.w	r0, r0, #31
  400d1c:	2601      	movs	r6, #1
  400d1e:	4086      	lsls	r6, r0
  400d20:	4632      	mov	r2, r6
  400d22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d26:	4620      	mov	r0, r4
  400d28:	4b25      	ldr	r3, [pc, #148]	; (400dc0 <pio_configure_pin+0x128>)
  400d2a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d2c:	f015 0f01 	tst.w	r5, #1
  400d30:	d102      	bne.n	400d38 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  400d32:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400d34:	2001      	movs	r0, #1
  400d36:	e7da      	b.n	400cee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400d38:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400d3a:	2001      	movs	r0, #1
  400d3c:	e7d7      	b.n	400cee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400d3e:	f000 001f 	and.w	r0, r0, #31
  400d42:	2601      	movs	r6, #1
  400d44:	4086      	lsls	r6, r0
  400d46:	4632      	mov	r2, r6
  400d48:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400d4c:	4620      	mov	r0, r4
  400d4e:	4b1c      	ldr	r3, [pc, #112]	; (400dc0 <pio_configure_pin+0x128>)
  400d50:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d52:	f015 0f01 	tst.w	r5, #1
  400d56:	d102      	bne.n	400d5e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400d58:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400d5a:	2001      	movs	r0, #1
  400d5c:	e7c7      	b.n	400cee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400d5e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400d60:	2001      	movs	r0, #1
  400d62:	e7c4      	b.n	400cee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400d64:	f000 001f 	and.w	r0, r0, #31
  400d68:	2601      	movs	r6, #1
  400d6a:	4086      	lsls	r6, r0
  400d6c:	4632      	mov	r2, r6
  400d6e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d72:	4620      	mov	r0, r4
  400d74:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <pio_configure_pin+0x128>)
  400d76:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d78:	f015 0f01 	tst.w	r5, #1
  400d7c:	d102      	bne.n	400d84 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400d7e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400d80:	2001      	movs	r0, #1
  400d82:	e7b4      	b.n	400cee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400d84:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400d86:	2001      	movs	r0, #1
  400d88:	e7b1      	b.n	400cee <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400d8a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d8e:	f000 011f 	and.w	r1, r0, #31
  400d92:	2601      	movs	r6, #1
  400d94:	ea05 0306 	and.w	r3, r5, r6
  400d98:	9300      	str	r3, [sp, #0]
  400d9a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400d9e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400da2:	bf14      	ite	ne
  400da4:	2200      	movne	r2, #0
  400da6:	2201      	moveq	r2, #1
  400da8:	fa06 f101 	lsl.w	r1, r6, r1
  400dac:	4620      	mov	r0, r4
  400dae:	4c05      	ldr	r4, [pc, #20]	; (400dc4 <pio_configure_pin+0x12c>)
  400db0:	47a0      	blx	r4
	return 1;
  400db2:	4630      	mov	r0, r6
		break;
  400db4:	e79b      	b.n	400cee <pio_configure_pin+0x56>
  400db6:	bf00      	nop
  400db8:	00200707 	.word	0x00200707
  400dbc:	00400b69 	.word	0x00400b69
  400dc0:	00400ad7 	.word	0x00400ad7
  400dc4:	00400b9f 	.word	0x00400b9f

00400dc8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dcc:	4604      	mov	r4, r0
  400dce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dd0:	4b0e      	ldr	r3, [pc, #56]	; (400e0c <pio_handler_process+0x44>)
  400dd2:	4798      	blx	r3
  400dd4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dd6:	4620      	mov	r0, r4
  400dd8:	4b0d      	ldr	r3, [pc, #52]	; (400e10 <pio_handler_process+0x48>)
  400dda:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ddc:	4005      	ands	r5, r0
  400dde:	d013      	beq.n	400e08 <pio_handler_process+0x40>
  400de0:	4c0c      	ldr	r4, [pc, #48]	; (400e14 <pio_handler_process+0x4c>)
  400de2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400de6:	e003      	b.n	400df0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400de8:	42b4      	cmp	r4, r6
  400dea:	d00d      	beq.n	400e08 <pio_handler_process+0x40>
  400dec:	3410      	adds	r4, #16
		while (status != 0) {
  400dee:	b15d      	cbz	r5, 400e08 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400df0:	6820      	ldr	r0, [r4, #0]
  400df2:	4540      	cmp	r0, r8
  400df4:	d1f8      	bne.n	400de8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400df6:	6861      	ldr	r1, [r4, #4]
  400df8:	4229      	tst	r1, r5
  400dfa:	d0f5      	beq.n	400de8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400dfc:	68e3      	ldr	r3, [r4, #12]
  400dfe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e00:	6863      	ldr	r3, [r4, #4]
  400e02:	ea25 0503 	bic.w	r5, r5, r3
  400e06:	e7ef      	b.n	400de8 <pio_handler_process+0x20>
  400e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e0c:	00400c8f 	.word	0x00400c8f
  400e10:	00400c93 	.word	0x00400c93
  400e14:	204009e4 	.word	0x204009e4

00400e18 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e1a:	4c18      	ldr	r4, [pc, #96]	; (400e7c <pio_handler_set+0x64>)
  400e1c:	6826      	ldr	r6, [r4, #0]
  400e1e:	2e06      	cmp	r6, #6
  400e20:	d82a      	bhi.n	400e78 <pio_handler_set+0x60>
  400e22:	f04f 0c00 	mov.w	ip, #0
  400e26:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e28:	4f15      	ldr	r7, [pc, #84]	; (400e80 <pio_handler_set+0x68>)
  400e2a:	e004      	b.n	400e36 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e2c:	3401      	adds	r4, #1
  400e2e:	b2e4      	uxtb	r4, r4
  400e30:	46a4      	mov	ip, r4
  400e32:	42a6      	cmp	r6, r4
  400e34:	d309      	bcc.n	400e4a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e36:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e38:	0125      	lsls	r5, r4, #4
  400e3a:	597d      	ldr	r5, [r7, r5]
  400e3c:	428d      	cmp	r5, r1
  400e3e:	d1f5      	bne.n	400e2c <pio_handler_set+0x14>
  400e40:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e44:	686d      	ldr	r5, [r5, #4]
  400e46:	4295      	cmp	r5, r2
  400e48:	d1f0      	bne.n	400e2c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e4a:	4d0d      	ldr	r5, [pc, #52]	; (400e80 <pio_handler_set+0x68>)
  400e4c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e50:	eb05 040e 	add.w	r4, r5, lr
  400e54:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e58:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e5a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e5c:	9906      	ldr	r1, [sp, #24]
  400e5e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e60:	3601      	adds	r6, #1
  400e62:	4566      	cmp	r6, ip
  400e64:	d005      	beq.n	400e72 <pio_handler_set+0x5a>
  400e66:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e68:	461a      	mov	r2, r3
  400e6a:	4b06      	ldr	r3, [pc, #24]	; (400e84 <pio_handler_set+0x6c>)
  400e6c:	4798      	blx	r3

	return 0;
  400e6e:	2000      	movs	r0, #0
  400e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e72:	4902      	ldr	r1, [pc, #8]	; (400e7c <pio_handler_set+0x64>)
  400e74:	600e      	str	r6, [r1, #0]
  400e76:	e7f6      	b.n	400e66 <pio_handler_set+0x4e>
		return 1;
  400e78:	2001      	movs	r0, #1
}
  400e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e7c:	20400a54 	.word	0x20400a54
  400e80:	204009e4 	.word	0x204009e4
  400e84:	00400c59 	.word	0x00400c59

00400e88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e8a:	210a      	movs	r1, #10
  400e8c:	4801      	ldr	r0, [pc, #4]	; (400e94 <PIOA_Handler+0xc>)
  400e8e:	4b02      	ldr	r3, [pc, #8]	; (400e98 <PIOA_Handler+0x10>)
  400e90:	4798      	blx	r3
  400e92:	bd08      	pop	{r3, pc}
  400e94:	400e0e00 	.word	0x400e0e00
  400e98:	00400dc9 	.word	0x00400dc9

00400e9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e9e:	210b      	movs	r1, #11
  400ea0:	4801      	ldr	r0, [pc, #4]	; (400ea8 <PIOB_Handler+0xc>)
  400ea2:	4b02      	ldr	r3, [pc, #8]	; (400eac <PIOB_Handler+0x10>)
  400ea4:	4798      	blx	r3
  400ea6:	bd08      	pop	{r3, pc}
  400ea8:	400e1000 	.word	0x400e1000
  400eac:	00400dc9 	.word	0x00400dc9

00400eb0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400eb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400eb2:	210c      	movs	r1, #12
  400eb4:	4801      	ldr	r0, [pc, #4]	; (400ebc <PIOC_Handler+0xc>)
  400eb6:	4b02      	ldr	r3, [pc, #8]	; (400ec0 <PIOC_Handler+0x10>)
  400eb8:	4798      	blx	r3
  400eba:	bd08      	pop	{r3, pc}
  400ebc:	400e1200 	.word	0x400e1200
  400ec0:	00400dc9 	.word	0x00400dc9

00400ec4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ec4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ec6:	2110      	movs	r1, #16
  400ec8:	4801      	ldr	r0, [pc, #4]	; (400ed0 <PIOD_Handler+0xc>)
  400eca:	4b02      	ldr	r3, [pc, #8]	; (400ed4 <PIOD_Handler+0x10>)
  400ecc:	4798      	blx	r3
  400ece:	bd08      	pop	{r3, pc}
  400ed0:	400e1400 	.word	0x400e1400
  400ed4:	00400dc9 	.word	0x00400dc9

00400ed8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ed8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400eda:	2111      	movs	r1, #17
  400edc:	4801      	ldr	r0, [pc, #4]	; (400ee4 <PIOE_Handler+0xc>)
  400ede:	4b02      	ldr	r3, [pc, #8]	; (400ee8 <PIOE_Handler+0x10>)
  400ee0:	4798      	blx	r3
  400ee2:	bd08      	pop	{r3, pc}
  400ee4:	400e1600 	.word	0x400e1600
  400ee8:	00400dc9 	.word	0x00400dc9

00400eec <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400eec:	2803      	cmp	r0, #3
  400eee:	d011      	beq.n	400f14 <pmc_mck_set_division+0x28>
  400ef0:	2804      	cmp	r0, #4
  400ef2:	d012      	beq.n	400f1a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ef4:	2802      	cmp	r0, #2
  400ef6:	bf0c      	ite	eq
  400ef8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400efc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400efe:	4a08      	ldr	r2, [pc, #32]	; (400f20 <pmc_mck_set_division+0x34>)
  400f00:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f06:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f08:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f0a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f0c:	f013 0f08 	tst.w	r3, #8
  400f10:	d0fb      	beq.n	400f0a <pmc_mck_set_division+0x1e>
}
  400f12:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f14:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f18:	e7f1      	b.n	400efe <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f1e:	e7ee      	b.n	400efe <pmc_mck_set_division+0x12>
  400f20:	400e0600 	.word	0x400e0600

00400f24 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f24:	4a17      	ldr	r2, [pc, #92]	; (400f84 <pmc_switch_mck_to_pllack+0x60>)
  400f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f2c:	4318      	orrs	r0, r3
  400f2e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f32:	f013 0f08 	tst.w	r3, #8
  400f36:	d10a      	bne.n	400f4e <pmc_switch_mck_to_pllack+0x2a>
  400f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f3c:	4911      	ldr	r1, [pc, #68]	; (400f84 <pmc_switch_mck_to_pllack+0x60>)
  400f3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f40:	f012 0f08 	tst.w	r2, #8
  400f44:	d103      	bne.n	400f4e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f46:	3b01      	subs	r3, #1
  400f48:	d1f9      	bne.n	400f3e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f4a:	2001      	movs	r0, #1
  400f4c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f4e:	4a0d      	ldr	r2, [pc, #52]	; (400f84 <pmc_switch_mck_to_pllack+0x60>)
  400f50:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f52:	f023 0303 	bic.w	r3, r3, #3
  400f56:	f043 0302 	orr.w	r3, r3, #2
  400f5a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f5e:	f013 0f08 	tst.w	r3, #8
  400f62:	d10a      	bne.n	400f7a <pmc_switch_mck_to_pllack+0x56>
  400f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f68:	4906      	ldr	r1, [pc, #24]	; (400f84 <pmc_switch_mck_to_pllack+0x60>)
  400f6a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f6c:	f012 0f08 	tst.w	r2, #8
  400f70:	d105      	bne.n	400f7e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f72:	3b01      	subs	r3, #1
  400f74:	d1f9      	bne.n	400f6a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f76:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f78:	4770      	bx	lr
	return 0;
  400f7a:	2000      	movs	r0, #0
  400f7c:	4770      	bx	lr
  400f7e:	2000      	movs	r0, #0
  400f80:	4770      	bx	lr
  400f82:	bf00      	nop
  400f84:	400e0600 	.word	0x400e0600

00400f88 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f88:	b9a0      	cbnz	r0, 400fb4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f8a:	480e      	ldr	r0, [pc, #56]	; (400fc4 <pmc_switch_mainck_to_xtal+0x3c>)
  400f8c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f8e:	0209      	lsls	r1, r1, #8
  400f90:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f92:	4a0d      	ldr	r2, [pc, #52]	; (400fc8 <pmc_switch_mainck_to_xtal+0x40>)
  400f94:	401a      	ands	r2, r3
  400f96:	4b0d      	ldr	r3, [pc, #52]	; (400fcc <pmc_switch_mainck_to_xtal+0x44>)
  400f98:	4313      	orrs	r3, r2
  400f9a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f9c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f9e:	4602      	mov	r2, r0
  400fa0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fa2:	f013 0f01 	tst.w	r3, #1
  400fa6:	d0fb      	beq.n	400fa0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fa8:	4a06      	ldr	r2, [pc, #24]	; (400fc4 <pmc_switch_mainck_to_xtal+0x3c>)
  400faa:	6a11      	ldr	r1, [r2, #32]
  400fac:	4b08      	ldr	r3, [pc, #32]	; (400fd0 <pmc_switch_mainck_to_xtal+0x48>)
  400fae:	430b      	orrs	r3, r1
  400fb0:	6213      	str	r3, [r2, #32]
  400fb2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb4:	4903      	ldr	r1, [pc, #12]	; (400fc4 <pmc_switch_mainck_to_xtal+0x3c>)
  400fb6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fb8:	4a06      	ldr	r2, [pc, #24]	; (400fd4 <pmc_switch_mainck_to_xtal+0x4c>)
  400fba:	401a      	ands	r2, r3
  400fbc:	4b06      	ldr	r3, [pc, #24]	; (400fd8 <pmc_switch_mainck_to_xtal+0x50>)
  400fbe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fc0:	620b      	str	r3, [r1, #32]
  400fc2:	4770      	bx	lr
  400fc4:	400e0600 	.word	0x400e0600
  400fc8:	ffc8fffc 	.word	0xffc8fffc
  400fcc:	00370001 	.word	0x00370001
  400fd0:	01370000 	.word	0x01370000
  400fd4:	fec8fffc 	.word	0xfec8fffc
  400fd8:	01370002 	.word	0x01370002

00400fdc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fdc:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <pmc_osc_is_ready_mainck+0xc>)
  400fde:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fe0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop
  400fe8:	400e0600 	.word	0x400e0600

00400fec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ff0:	4b01      	ldr	r3, [pc, #4]	; (400ff8 <pmc_disable_pllack+0xc>)
  400ff2:	629a      	str	r2, [r3, #40]	; 0x28
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop
  400ff8:	400e0600 	.word	0x400e0600

00400ffc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ffc:	4b02      	ldr	r3, [pc, #8]	; (401008 <pmc_is_locked_pllack+0xc>)
  400ffe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401000:	f000 0002 	and.w	r0, r0, #2
  401004:	4770      	bx	lr
  401006:	bf00      	nop
  401008:	400e0600 	.word	0x400e0600

0040100c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40100c:	283f      	cmp	r0, #63	; 0x3f
  40100e:	d81e      	bhi.n	40104e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401010:	281f      	cmp	r0, #31
  401012:	d80c      	bhi.n	40102e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <pmc_enable_periph_clk+0x50>)
  401016:	699a      	ldr	r2, [r3, #24]
  401018:	2301      	movs	r3, #1
  40101a:	4083      	lsls	r3, r0
  40101c:	4393      	bics	r3, r2
  40101e:	d018      	beq.n	401052 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401020:	2301      	movs	r3, #1
  401022:	fa03 f000 	lsl.w	r0, r3, r0
  401026:	4b0d      	ldr	r3, [pc, #52]	; (40105c <pmc_enable_periph_clk+0x50>)
  401028:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40102a:	2000      	movs	r0, #0
  40102c:	4770      	bx	lr
		ul_id -= 32;
  40102e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401030:	4b0a      	ldr	r3, [pc, #40]	; (40105c <pmc_enable_periph_clk+0x50>)
  401032:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401036:	2301      	movs	r3, #1
  401038:	4083      	lsls	r3, r0
  40103a:	4393      	bics	r3, r2
  40103c:	d00b      	beq.n	401056 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40103e:	2301      	movs	r3, #1
  401040:	fa03 f000 	lsl.w	r0, r3, r0
  401044:	4b05      	ldr	r3, [pc, #20]	; (40105c <pmc_enable_periph_clk+0x50>)
  401046:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40104a:	2000      	movs	r0, #0
  40104c:	4770      	bx	lr
		return 1;
  40104e:	2001      	movs	r0, #1
  401050:	4770      	bx	lr
	return 0;
  401052:	2000      	movs	r0, #0
  401054:	4770      	bx	lr
  401056:	2000      	movs	r0, #0
}
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	400e0600 	.word	0x400e0600

00401060 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401060:	6943      	ldr	r3, [r0, #20]
  401062:	f013 0f02 	tst.w	r3, #2
  401066:	d002      	beq.n	40106e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401068:	61c1      	str	r1, [r0, #28]
	return 0;
  40106a:	2000      	movs	r0, #0
  40106c:	4770      	bx	lr
		return 1;
  40106e:	2001      	movs	r0, #1
}
  401070:	4770      	bx	lr

00401072 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401072:	6943      	ldr	r3, [r0, #20]
  401074:	f013 0f01 	tst.w	r3, #1
  401078:	d003      	beq.n	401082 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40107a:	6983      	ldr	r3, [r0, #24]
  40107c:	700b      	strb	r3, [r1, #0]
	return 0;
  40107e:	2000      	movs	r0, #0
  401080:	4770      	bx	lr
		return 1;
  401082:	2001      	movs	r0, #1
}
  401084:	4770      	bx	lr

00401086 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401086:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401088:	010b      	lsls	r3, r1, #4
  40108a:	4293      	cmp	r3, r2
  40108c:	d914      	bls.n	4010b8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40108e:	00c9      	lsls	r1, r1, #3
  401090:	084b      	lsrs	r3, r1, #1
  401092:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401096:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40109a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40109c:	1e5c      	subs	r4, r3, #1
  40109e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010a2:	428c      	cmp	r4, r1
  4010a4:	d901      	bls.n	4010aa <usart_set_async_baudrate+0x24>
		return 1;
  4010a6:	2001      	movs	r0, #1
  4010a8:	e017      	b.n	4010da <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4010aa:	6841      	ldr	r1, [r0, #4]
  4010ac:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4010b0:	6041      	str	r1, [r0, #4]
  4010b2:	e00c      	b.n	4010ce <usart_set_async_baudrate+0x48>
		return 1;
  4010b4:	2001      	movs	r0, #1
  4010b6:	e010      	b.n	4010da <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010b8:	0859      	lsrs	r1, r3, #1
  4010ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4010be:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010c2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010c4:	1e5c      	subs	r4, r3, #1
  4010c6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010ca:	428c      	cmp	r4, r1
  4010cc:	d8f2      	bhi.n	4010b4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010ce:	0412      	lsls	r2, r2, #16
  4010d0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4010d4:	431a      	orrs	r2, r3
  4010d6:	6202      	str	r2, [r0, #32]

	return 0;
  4010d8:	2000      	movs	r0, #0
}
  4010da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010de:	4770      	bx	lr

004010e0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <usart_reset+0x24>)
  4010e2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4010e6:	2300      	movs	r3, #0
  4010e8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4010ea:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010ec:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4010ee:	2388      	movs	r3, #136	; 0x88
  4010f0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010f2:	2324      	movs	r3, #36	; 0x24
  4010f4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010fa:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4010fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401100:	6003      	str	r3, [r0, #0]
  401102:	4770      	bx	lr
  401104:	55534100 	.word	0x55534100

00401108 <usart_init_rs232>:
{
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	4605      	mov	r5, r0
  40110c:	460c      	mov	r4, r1
  40110e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401110:	4b0f      	ldr	r3, [pc, #60]	; (401150 <usart_init_rs232+0x48>)
  401112:	4798      	blx	r3
	ul_reg_val = 0;
  401114:	2200      	movs	r2, #0
  401116:	4b0f      	ldr	r3, [pc, #60]	; (401154 <usart_init_rs232+0x4c>)
  401118:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40111a:	b1a4      	cbz	r4, 401146 <usart_init_rs232+0x3e>
  40111c:	4632      	mov	r2, r6
  40111e:	6821      	ldr	r1, [r4, #0]
  401120:	4628      	mov	r0, r5
  401122:	4b0d      	ldr	r3, [pc, #52]	; (401158 <usart_init_rs232+0x50>)
  401124:	4798      	blx	r3
  401126:	4602      	mov	r2, r0
  401128:	b978      	cbnz	r0, 40114a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40112a:	6863      	ldr	r3, [r4, #4]
  40112c:	68a1      	ldr	r1, [r4, #8]
  40112e:	430b      	orrs	r3, r1
  401130:	6921      	ldr	r1, [r4, #16]
  401132:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401134:	68e1      	ldr	r1, [r4, #12]
  401136:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401138:	4906      	ldr	r1, [pc, #24]	; (401154 <usart_init_rs232+0x4c>)
  40113a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40113c:	6869      	ldr	r1, [r5, #4]
  40113e:	430b      	orrs	r3, r1
  401140:	606b      	str	r3, [r5, #4]
}
  401142:	4610      	mov	r0, r2
  401144:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401146:	2201      	movs	r2, #1
  401148:	e7fb      	b.n	401142 <usart_init_rs232+0x3a>
  40114a:	2201      	movs	r2, #1
  40114c:	e7f9      	b.n	401142 <usart_init_rs232+0x3a>
  40114e:	bf00      	nop
  401150:	004010e1 	.word	0x004010e1
  401154:	20400a58 	.word	0x20400a58
  401158:	00401087 	.word	0x00401087

0040115c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40115c:	2340      	movs	r3, #64	; 0x40
  40115e:	6003      	str	r3, [r0, #0]
  401160:	4770      	bx	lr

00401162 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401162:	2310      	movs	r3, #16
  401164:	6003      	str	r3, [r0, #0]
  401166:	4770      	bx	lr

00401168 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401168:	6943      	ldr	r3, [r0, #20]
  40116a:	f013 0f02 	tst.w	r3, #2
  40116e:	d004      	beq.n	40117a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401170:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401174:	61c1      	str	r1, [r0, #28]
	return 0;
  401176:	2000      	movs	r0, #0
  401178:	4770      	bx	lr
		return 1;
  40117a:	2001      	movs	r0, #1
}
  40117c:	4770      	bx	lr

0040117e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40117e:	6943      	ldr	r3, [r0, #20]
  401180:	f013 0f01 	tst.w	r3, #1
  401184:	d005      	beq.n	401192 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401186:	6983      	ldr	r3, [r0, #24]
  401188:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40118c:	600b      	str	r3, [r1, #0]
	return 0;
  40118e:	2000      	movs	r0, #0
  401190:	4770      	bx	lr
		return 1;
  401192:	2001      	movs	r0, #1
}
  401194:	4770      	bx	lr

00401196 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401196:	e7fe      	b.n	401196 <Dummy_Handler>

00401198 <Reset_Handler>:
{
  401198:	b500      	push	{lr}
  40119a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40119c:	4b25      	ldr	r3, [pc, #148]	; (401234 <Reset_Handler+0x9c>)
  40119e:	4a26      	ldr	r2, [pc, #152]	; (401238 <Reset_Handler+0xa0>)
  4011a0:	429a      	cmp	r2, r3
  4011a2:	d010      	beq.n	4011c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4011a4:	4b25      	ldr	r3, [pc, #148]	; (40123c <Reset_Handler+0xa4>)
  4011a6:	4a23      	ldr	r2, [pc, #140]	; (401234 <Reset_Handler+0x9c>)
  4011a8:	429a      	cmp	r2, r3
  4011aa:	d20c      	bcs.n	4011c6 <Reset_Handler+0x2e>
  4011ac:	3b01      	subs	r3, #1
  4011ae:	1a9b      	subs	r3, r3, r2
  4011b0:	f023 0303 	bic.w	r3, r3, #3
  4011b4:	3304      	adds	r3, #4
  4011b6:	4413      	add	r3, r2
  4011b8:	491f      	ldr	r1, [pc, #124]	; (401238 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4011ba:	f851 0b04 	ldr.w	r0, [r1], #4
  4011be:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4011c2:	429a      	cmp	r2, r3
  4011c4:	d1f9      	bne.n	4011ba <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4011c6:	4b1e      	ldr	r3, [pc, #120]	; (401240 <Reset_Handler+0xa8>)
  4011c8:	4a1e      	ldr	r2, [pc, #120]	; (401244 <Reset_Handler+0xac>)
  4011ca:	429a      	cmp	r2, r3
  4011cc:	d20a      	bcs.n	4011e4 <Reset_Handler+0x4c>
  4011ce:	3b01      	subs	r3, #1
  4011d0:	1a9b      	subs	r3, r3, r2
  4011d2:	f023 0303 	bic.w	r3, r3, #3
  4011d6:	3304      	adds	r3, #4
  4011d8:	4413      	add	r3, r2
                *pDest++ = 0;
  4011da:	2100      	movs	r1, #0
  4011dc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011e0:	4293      	cmp	r3, r2
  4011e2:	d1fb      	bne.n	4011dc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011e4:	4a18      	ldr	r2, [pc, #96]	; (401248 <Reset_Handler+0xb0>)
  4011e6:	4b19      	ldr	r3, [pc, #100]	; (40124c <Reset_Handler+0xb4>)
  4011e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011ec:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011f2:	fab3 f383 	clz	r3, r3
  4011f6:	095b      	lsrs	r3, r3, #5
  4011f8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011fa:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401200:	2200      	movs	r2, #0
  401202:	4b13      	ldr	r3, [pc, #76]	; (401250 <Reset_Handler+0xb8>)
  401204:	701a      	strb	r2, [r3, #0]
	return flags;
  401206:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401208:	4a12      	ldr	r2, [pc, #72]	; (401254 <Reset_Handler+0xbc>)
  40120a:	6813      	ldr	r3, [r2, #0]
  40120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401210:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401212:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401216:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40121a:	b129      	cbz	r1, 401228 <Reset_Handler+0x90>
		cpu_irq_enable();
  40121c:	2201      	movs	r2, #1
  40121e:	4b0c      	ldr	r3, [pc, #48]	; (401250 <Reset_Handler+0xb8>)
  401220:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401222:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401226:	b662      	cpsie	i
        __libc_init_array();
  401228:	4b0b      	ldr	r3, [pc, #44]	; (401258 <Reset_Handler+0xc0>)
  40122a:	4798      	blx	r3
        main();
  40122c:	4b0b      	ldr	r3, [pc, #44]	; (40125c <Reset_Handler+0xc4>)
  40122e:	4798      	blx	r3
  401230:	e7fe      	b.n	401230 <Reset_Handler+0x98>
  401232:	bf00      	nop
  401234:	20400000 	.word	0x20400000
  401238:	00406a6c 	.word	0x00406a6c
  40123c:	204009c8 	.word	0x204009c8
  401240:	20400cdc 	.word	0x20400cdc
  401244:	204009c8 	.word	0x204009c8
  401248:	e000ed00 	.word	0xe000ed00
  40124c:	00400000 	.word	0x00400000
  401250:	2040000a 	.word	0x2040000a
  401254:	e000ed88 	.word	0xe000ed88
  401258:	004038a9 	.word	0x004038a9
  40125c:	00403575 	.word	0x00403575

00401260 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401260:	4b3b      	ldr	r3, [pc, #236]	; (401350 <SystemCoreClockUpdate+0xf0>)
  401262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401264:	f003 0303 	and.w	r3, r3, #3
  401268:	2b01      	cmp	r3, #1
  40126a:	d01d      	beq.n	4012a8 <SystemCoreClockUpdate+0x48>
  40126c:	b183      	cbz	r3, 401290 <SystemCoreClockUpdate+0x30>
  40126e:	2b02      	cmp	r3, #2
  401270:	d036      	beq.n	4012e0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401272:	4b37      	ldr	r3, [pc, #220]	; (401350 <SystemCoreClockUpdate+0xf0>)
  401274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401276:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40127a:	2b70      	cmp	r3, #112	; 0x70
  40127c:	d05f      	beq.n	40133e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40127e:	4b34      	ldr	r3, [pc, #208]	; (401350 <SystemCoreClockUpdate+0xf0>)
  401280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401282:	4934      	ldr	r1, [pc, #208]	; (401354 <SystemCoreClockUpdate+0xf4>)
  401284:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401288:	680b      	ldr	r3, [r1, #0]
  40128a:	40d3      	lsrs	r3, r2
  40128c:	600b      	str	r3, [r1, #0]
  40128e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401290:	4b31      	ldr	r3, [pc, #196]	; (401358 <SystemCoreClockUpdate+0xf8>)
  401292:	695b      	ldr	r3, [r3, #20]
  401294:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401298:	bf14      	ite	ne
  40129a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40129e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4012a2:	4b2c      	ldr	r3, [pc, #176]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012a4:	601a      	str	r2, [r3, #0]
  4012a6:	e7e4      	b.n	401272 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012a8:	4b29      	ldr	r3, [pc, #164]	; (401350 <SystemCoreClockUpdate+0xf0>)
  4012aa:	6a1b      	ldr	r3, [r3, #32]
  4012ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012b0:	d003      	beq.n	4012ba <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4012b2:	4a2a      	ldr	r2, [pc, #168]	; (40135c <SystemCoreClockUpdate+0xfc>)
  4012b4:	4b27      	ldr	r3, [pc, #156]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012b6:	601a      	str	r2, [r3, #0]
  4012b8:	e7db      	b.n	401272 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012ba:	4a29      	ldr	r2, [pc, #164]	; (401360 <SystemCoreClockUpdate+0x100>)
  4012bc:	4b25      	ldr	r3, [pc, #148]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012be:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012c0:	4b23      	ldr	r3, [pc, #140]	; (401350 <SystemCoreClockUpdate+0xf0>)
  4012c2:	6a1b      	ldr	r3, [r3, #32]
  4012c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012c8:	2b10      	cmp	r3, #16
  4012ca:	d005      	beq.n	4012d8 <SystemCoreClockUpdate+0x78>
  4012cc:	2b20      	cmp	r3, #32
  4012ce:	d1d0      	bne.n	401272 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012d0:	4a22      	ldr	r2, [pc, #136]	; (40135c <SystemCoreClockUpdate+0xfc>)
  4012d2:	4b20      	ldr	r3, [pc, #128]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012d4:	601a      	str	r2, [r3, #0]
          break;
  4012d6:	e7cc      	b.n	401272 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012d8:	4a22      	ldr	r2, [pc, #136]	; (401364 <SystemCoreClockUpdate+0x104>)
  4012da:	4b1e      	ldr	r3, [pc, #120]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012dc:	601a      	str	r2, [r3, #0]
          break;
  4012de:	e7c8      	b.n	401272 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012e0:	4b1b      	ldr	r3, [pc, #108]	; (401350 <SystemCoreClockUpdate+0xf0>)
  4012e2:	6a1b      	ldr	r3, [r3, #32]
  4012e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012e8:	d016      	beq.n	401318 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012ea:	4a1c      	ldr	r2, [pc, #112]	; (40135c <SystemCoreClockUpdate+0xfc>)
  4012ec:	4b19      	ldr	r3, [pc, #100]	; (401354 <SystemCoreClockUpdate+0xf4>)
  4012ee:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012f0:	4b17      	ldr	r3, [pc, #92]	; (401350 <SystemCoreClockUpdate+0xf0>)
  4012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012f4:	f003 0303 	and.w	r3, r3, #3
  4012f8:	2b02      	cmp	r3, #2
  4012fa:	d1ba      	bne.n	401272 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012fc:	4a14      	ldr	r2, [pc, #80]	; (401350 <SystemCoreClockUpdate+0xf0>)
  4012fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401300:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401302:	4814      	ldr	r0, [pc, #80]	; (401354 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401304:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401308:	6803      	ldr	r3, [r0, #0]
  40130a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40130e:	b2d2      	uxtb	r2, r2
  401310:	fbb3 f3f2 	udiv	r3, r3, r2
  401314:	6003      	str	r3, [r0, #0]
  401316:	e7ac      	b.n	401272 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401318:	4a11      	ldr	r2, [pc, #68]	; (401360 <SystemCoreClockUpdate+0x100>)
  40131a:	4b0e      	ldr	r3, [pc, #56]	; (401354 <SystemCoreClockUpdate+0xf4>)
  40131c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40131e:	4b0c      	ldr	r3, [pc, #48]	; (401350 <SystemCoreClockUpdate+0xf0>)
  401320:	6a1b      	ldr	r3, [r3, #32]
  401322:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401326:	2b10      	cmp	r3, #16
  401328:	d005      	beq.n	401336 <SystemCoreClockUpdate+0xd6>
  40132a:	2b20      	cmp	r3, #32
  40132c:	d1e0      	bne.n	4012f0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40132e:	4a0b      	ldr	r2, [pc, #44]	; (40135c <SystemCoreClockUpdate+0xfc>)
  401330:	4b08      	ldr	r3, [pc, #32]	; (401354 <SystemCoreClockUpdate+0xf4>)
  401332:	601a      	str	r2, [r3, #0]
          break;
  401334:	e7dc      	b.n	4012f0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401336:	4a0b      	ldr	r2, [pc, #44]	; (401364 <SystemCoreClockUpdate+0x104>)
  401338:	4b06      	ldr	r3, [pc, #24]	; (401354 <SystemCoreClockUpdate+0xf4>)
  40133a:	601a      	str	r2, [r3, #0]
          break;
  40133c:	e7d8      	b.n	4012f0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40133e:	4a05      	ldr	r2, [pc, #20]	; (401354 <SystemCoreClockUpdate+0xf4>)
  401340:	6813      	ldr	r3, [r2, #0]
  401342:	4909      	ldr	r1, [pc, #36]	; (401368 <SystemCoreClockUpdate+0x108>)
  401344:	fba1 1303 	umull	r1, r3, r1, r3
  401348:	085b      	lsrs	r3, r3, #1
  40134a:	6013      	str	r3, [r2, #0]
  40134c:	4770      	bx	lr
  40134e:	bf00      	nop
  401350:	400e0600 	.word	0x400e0600
  401354:	2040000c 	.word	0x2040000c
  401358:	400e1810 	.word	0x400e1810
  40135c:	00b71b00 	.word	0x00b71b00
  401360:	003d0900 	.word	0x003d0900
  401364:	007a1200 	.word	0x007a1200
  401368:	aaaaaaab 	.word	0xaaaaaaab

0040136c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40136c:	4b16      	ldr	r3, [pc, #88]	; (4013c8 <system_init_flash+0x5c>)
  40136e:	4298      	cmp	r0, r3
  401370:	d913      	bls.n	40139a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401372:	4b16      	ldr	r3, [pc, #88]	; (4013cc <system_init_flash+0x60>)
  401374:	4298      	cmp	r0, r3
  401376:	d915      	bls.n	4013a4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401378:	4b15      	ldr	r3, [pc, #84]	; (4013d0 <system_init_flash+0x64>)
  40137a:	4298      	cmp	r0, r3
  40137c:	d916      	bls.n	4013ac <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40137e:	4b15      	ldr	r3, [pc, #84]	; (4013d4 <system_init_flash+0x68>)
  401380:	4298      	cmp	r0, r3
  401382:	d917      	bls.n	4013b4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401384:	4b14      	ldr	r3, [pc, #80]	; (4013d8 <system_init_flash+0x6c>)
  401386:	4298      	cmp	r0, r3
  401388:	d918      	bls.n	4013bc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40138a:	4b14      	ldr	r3, [pc, #80]	; (4013dc <system_init_flash+0x70>)
  40138c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40138e:	bf94      	ite	ls
  401390:	4a13      	ldrls	r2, [pc, #76]	; (4013e0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401392:	4a14      	ldrhi	r2, [pc, #80]	; (4013e4 <system_init_flash+0x78>)
  401394:	4b14      	ldr	r3, [pc, #80]	; (4013e8 <system_init_flash+0x7c>)
  401396:	601a      	str	r2, [r3, #0]
  401398:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40139a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40139e:	4b12      	ldr	r3, [pc, #72]	; (4013e8 <system_init_flash+0x7c>)
  4013a0:	601a      	str	r2, [r3, #0]
  4013a2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4013a4:	4a11      	ldr	r2, [pc, #68]	; (4013ec <system_init_flash+0x80>)
  4013a6:	4b10      	ldr	r3, [pc, #64]	; (4013e8 <system_init_flash+0x7c>)
  4013a8:	601a      	str	r2, [r3, #0]
  4013aa:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013ac:	4a10      	ldr	r2, [pc, #64]	; (4013f0 <system_init_flash+0x84>)
  4013ae:	4b0e      	ldr	r3, [pc, #56]	; (4013e8 <system_init_flash+0x7c>)
  4013b0:	601a      	str	r2, [r3, #0]
  4013b2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013b4:	4a0f      	ldr	r2, [pc, #60]	; (4013f4 <system_init_flash+0x88>)
  4013b6:	4b0c      	ldr	r3, [pc, #48]	; (4013e8 <system_init_flash+0x7c>)
  4013b8:	601a      	str	r2, [r3, #0]
  4013ba:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013bc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013c0:	4b09      	ldr	r3, [pc, #36]	; (4013e8 <system_init_flash+0x7c>)
  4013c2:	601a      	str	r2, [r3, #0]
  4013c4:	4770      	bx	lr
  4013c6:	bf00      	nop
  4013c8:	015ef3bf 	.word	0x015ef3bf
  4013cc:	02bde77f 	.word	0x02bde77f
  4013d0:	041cdb3f 	.word	0x041cdb3f
  4013d4:	057bceff 	.word	0x057bceff
  4013d8:	06dac2bf 	.word	0x06dac2bf
  4013dc:	0839b67f 	.word	0x0839b67f
  4013e0:	04000500 	.word	0x04000500
  4013e4:	04000600 	.word	0x04000600
  4013e8:	400e0c00 	.word	0x400e0c00
  4013ec:	04000100 	.word	0x04000100
  4013f0:	04000200 	.word	0x04000200
  4013f4:	04000300 	.word	0x04000300

004013f8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013f8:	4b0a      	ldr	r3, [pc, #40]	; (401424 <_sbrk+0x2c>)
  4013fa:	681b      	ldr	r3, [r3, #0]
  4013fc:	b153      	cbz	r3, 401414 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4013fe:	4b09      	ldr	r3, [pc, #36]	; (401424 <_sbrk+0x2c>)
  401400:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401402:	181a      	adds	r2, r3, r0
  401404:	4908      	ldr	r1, [pc, #32]	; (401428 <_sbrk+0x30>)
  401406:	4291      	cmp	r1, r2
  401408:	db08      	blt.n	40141c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40140a:	4610      	mov	r0, r2
  40140c:	4a05      	ldr	r2, [pc, #20]	; (401424 <_sbrk+0x2c>)
  40140e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401410:	4618      	mov	r0, r3
  401412:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401414:	4a05      	ldr	r2, [pc, #20]	; (40142c <_sbrk+0x34>)
  401416:	4b03      	ldr	r3, [pc, #12]	; (401424 <_sbrk+0x2c>)
  401418:	601a      	str	r2, [r3, #0]
  40141a:	e7f0      	b.n	4013fe <_sbrk+0x6>
		return (caddr_t) -1;	
  40141c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401420:	4770      	bx	lr
  401422:	bf00      	nop
  401424:	20400a5c 	.word	0x20400a5c
  401428:	2045fffc 	.word	0x2045fffc
  40142c:	20402ee0 	.word	0x20402ee0

00401430 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401430:	f04f 30ff 	mov.w	r0, #4294967295
  401434:	4770      	bx	lr

00401436 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40143a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40143c:	2000      	movs	r0, #0
  40143e:	4770      	bx	lr

00401440 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401440:	2001      	movs	r0, #1
  401442:	4770      	bx	lr

00401444 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401444:	2000      	movs	r0, #0
  401446:	4770      	bx	lr

00401448 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401448:	f100 0308 	add.w	r3, r0, #8
  40144c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40144e:	f04f 32ff 	mov.w	r2, #4294967295
  401452:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401454:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401456:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401458:	2300      	movs	r3, #0
  40145a:	6003      	str	r3, [r0, #0]
  40145c:	4770      	bx	lr

0040145e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40145e:	2300      	movs	r3, #0
  401460:	6103      	str	r3, [r0, #16]
  401462:	4770      	bx	lr

00401464 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401464:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401466:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401468:	689a      	ldr	r2, [r3, #8]
  40146a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40146c:	689a      	ldr	r2, [r3, #8]
  40146e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401470:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401472:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401474:	6803      	ldr	r3, [r0, #0]
  401476:	3301      	adds	r3, #1
  401478:	6003      	str	r3, [r0, #0]
  40147a:	4770      	bx	lr

0040147c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40147c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40147e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401480:	f1b5 3fff 	cmp.w	r5, #4294967295
  401484:	d002      	beq.n	40148c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401486:	f100 0208 	add.w	r2, r0, #8
  40148a:	e002      	b.n	401492 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40148c:	6902      	ldr	r2, [r0, #16]
  40148e:	e004      	b.n	40149a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401490:	461a      	mov	r2, r3
  401492:	6853      	ldr	r3, [r2, #4]
  401494:	681c      	ldr	r4, [r3, #0]
  401496:	42a5      	cmp	r5, r4
  401498:	d2fa      	bcs.n	401490 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40149a:	6853      	ldr	r3, [r2, #4]
  40149c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40149e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4014a0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4014a2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4014a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4014a6:	6803      	ldr	r3, [r0, #0]
  4014a8:	3301      	adds	r3, #1
  4014aa:	6003      	str	r3, [r0, #0]
}
  4014ac:	bc30      	pop	{r4, r5}
  4014ae:	4770      	bx	lr

004014b0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4014b0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4014b2:	6842      	ldr	r2, [r0, #4]
  4014b4:	6881      	ldr	r1, [r0, #8]
  4014b6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4014b8:	6882      	ldr	r2, [r0, #8]
  4014ba:	6841      	ldr	r1, [r0, #4]
  4014bc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4014be:	685a      	ldr	r2, [r3, #4]
  4014c0:	4290      	cmp	r0, r2
  4014c2:	d005      	beq.n	4014d0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4014c4:	2200      	movs	r2, #0
  4014c6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014c8:	6818      	ldr	r0, [r3, #0]
  4014ca:	3801      	subs	r0, #1
  4014cc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014ce:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014d0:	6882      	ldr	r2, [r0, #8]
  4014d2:	605a      	str	r2, [r3, #4]
  4014d4:	e7f6      	b.n	4014c4 <uxListRemove+0x14>
	...

004014d8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014d8:	4b0d      	ldr	r3, [pc, #52]	; (401510 <prvTaskExitError+0x38>)
  4014da:	681b      	ldr	r3, [r3, #0]
  4014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014e0:	d00a      	beq.n	4014f8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014e6:	b672      	cpsid	i
  4014e8:	f383 8811 	msr	BASEPRI, r3
  4014ec:	f3bf 8f6f 	isb	sy
  4014f0:	f3bf 8f4f 	dsb	sy
  4014f4:	b662      	cpsie	i
  4014f6:	e7fe      	b.n	4014f6 <prvTaskExitError+0x1e>
  4014f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014fc:	b672      	cpsid	i
  4014fe:	f383 8811 	msr	BASEPRI, r3
  401502:	f3bf 8f6f 	isb	sy
  401506:	f3bf 8f4f 	dsb	sy
  40150a:	b662      	cpsie	i
  40150c:	e7fe      	b.n	40150c <prvTaskExitError+0x34>
  40150e:	bf00      	nop
  401510:	20400010 	.word	0x20400010

00401514 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401514:	4806      	ldr	r0, [pc, #24]	; (401530 <prvPortStartFirstTask+0x1c>)
  401516:	6800      	ldr	r0, [r0, #0]
  401518:	6800      	ldr	r0, [r0, #0]
  40151a:	f380 8808 	msr	MSP, r0
  40151e:	b662      	cpsie	i
  401520:	b661      	cpsie	f
  401522:	f3bf 8f4f 	dsb	sy
  401526:	f3bf 8f6f 	isb	sy
  40152a:	df00      	svc	0
  40152c:	bf00      	nop
  40152e:	0000      	.short	0x0000
  401530:	e000ed08 	.word	0xe000ed08

00401534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401544 <vPortEnableVFP+0x10>
  401538:	6801      	ldr	r1, [r0, #0]
  40153a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40153e:	6001      	str	r1, [r0, #0]
  401540:	4770      	bx	lr
  401542:	0000      	.short	0x0000
  401544:	e000ed88 	.word	0xe000ed88

00401548 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40154c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401550:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401554:	4b05      	ldr	r3, [pc, #20]	; (40156c <pxPortInitialiseStack+0x24>)
  401556:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40155a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40155e:	f06f 0302 	mvn.w	r3, #2
  401562:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401566:	3844      	subs	r0, #68	; 0x44
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	004014d9 	.word	0x004014d9

00401570 <SVC_Handler>:
	__asm volatile (
  401570:	4b06      	ldr	r3, [pc, #24]	; (40158c <pxCurrentTCBConst2>)
  401572:	6819      	ldr	r1, [r3, #0]
  401574:	6808      	ldr	r0, [r1, #0]
  401576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40157a:	f380 8809 	msr	PSP, r0
  40157e:	f3bf 8f6f 	isb	sy
  401582:	f04f 0000 	mov.w	r0, #0
  401586:	f380 8811 	msr	BASEPRI, r0
  40158a:	4770      	bx	lr

0040158c <pxCurrentTCBConst2>:
  40158c:	20400a68 	.word	0x20400a68
  401590:	4770      	bx	lr
  401592:	bf00      	nop

00401594 <vPortEnterCritical>:
  401594:	f04f 0380 	mov.w	r3, #128	; 0x80
  401598:	b672      	cpsid	i
  40159a:	f383 8811 	msr	BASEPRI, r3
  40159e:	f3bf 8f6f 	isb	sy
  4015a2:	f3bf 8f4f 	dsb	sy
  4015a6:	b662      	cpsie	i
	uxCriticalNesting++;
  4015a8:	4a0b      	ldr	r2, [pc, #44]	; (4015d8 <vPortEnterCritical+0x44>)
  4015aa:	6813      	ldr	r3, [r2, #0]
  4015ac:	3301      	adds	r3, #1
  4015ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4015b0:	2b01      	cmp	r3, #1
  4015b2:	d10f      	bne.n	4015d4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <vPortEnterCritical+0x48>)
  4015b6:	681b      	ldr	r3, [r3, #0]
  4015b8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015bc:	d00a      	beq.n	4015d4 <vPortEnterCritical+0x40>
  4015be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c2:	b672      	cpsid	i
  4015c4:	f383 8811 	msr	BASEPRI, r3
  4015c8:	f3bf 8f6f 	isb	sy
  4015cc:	f3bf 8f4f 	dsb	sy
  4015d0:	b662      	cpsie	i
  4015d2:	e7fe      	b.n	4015d2 <vPortEnterCritical+0x3e>
  4015d4:	4770      	bx	lr
  4015d6:	bf00      	nop
  4015d8:	20400010 	.word	0x20400010
  4015dc:	e000ed04 	.word	0xe000ed04

004015e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015e0:	4b0a      	ldr	r3, [pc, #40]	; (40160c <vPortExitCritical+0x2c>)
  4015e2:	681b      	ldr	r3, [r3, #0]
  4015e4:	b953      	cbnz	r3, 4015fc <vPortExitCritical+0x1c>
  4015e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ea:	b672      	cpsid	i
  4015ec:	f383 8811 	msr	BASEPRI, r3
  4015f0:	f3bf 8f6f 	isb	sy
  4015f4:	f3bf 8f4f 	dsb	sy
  4015f8:	b662      	cpsie	i
  4015fa:	e7fe      	b.n	4015fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015fc:	3b01      	subs	r3, #1
  4015fe:	4a03      	ldr	r2, [pc, #12]	; (40160c <vPortExitCritical+0x2c>)
  401600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401602:	b90b      	cbnz	r3, 401608 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401604:	f383 8811 	msr	BASEPRI, r3
  401608:	4770      	bx	lr
  40160a:	bf00      	nop
  40160c:	20400010 	.word	0x20400010

00401610 <PendSV_Handler>:
	__asm volatile
  401610:	f3ef 8009 	mrs	r0, PSP
  401614:	f3bf 8f6f 	isb	sy
  401618:	4b15      	ldr	r3, [pc, #84]	; (401670 <pxCurrentTCBConst>)
  40161a:	681a      	ldr	r2, [r3, #0]
  40161c:	f01e 0f10 	tst.w	lr, #16
  401620:	bf08      	it	eq
  401622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40162a:	6010      	str	r0, [r2, #0]
  40162c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401630:	f04f 0080 	mov.w	r0, #128	; 0x80
  401634:	b672      	cpsid	i
  401636:	f380 8811 	msr	BASEPRI, r0
  40163a:	f3bf 8f4f 	dsb	sy
  40163e:	f3bf 8f6f 	isb	sy
  401642:	b662      	cpsie	i
  401644:	f001 f8fe 	bl	402844 <vTaskSwitchContext>
  401648:	f04f 0000 	mov.w	r0, #0
  40164c:	f380 8811 	msr	BASEPRI, r0
  401650:	bc08      	pop	{r3}
  401652:	6819      	ldr	r1, [r3, #0]
  401654:	6808      	ldr	r0, [r1, #0]
  401656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40165a:	f01e 0f10 	tst.w	lr, #16
  40165e:	bf08      	it	eq
  401660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401664:	f380 8809 	msr	PSP, r0
  401668:	f3bf 8f6f 	isb	sy
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop

00401670 <pxCurrentTCBConst>:
  401670:	20400a68 	.word	0x20400a68
  401674:	4770      	bx	lr
  401676:	bf00      	nop

00401678 <SysTick_Handler>:
{
  401678:	b508      	push	{r3, lr}
	__asm volatile
  40167a:	f3ef 8311 	mrs	r3, BASEPRI
  40167e:	f04f 0280 	mov.w	r2, #128	; 0x80
  401682:	b672      	cpsid	i
  401684:	f382 8811 	msr	BASEPRI, r2
  401688:	f3bf 8f6f 	isb	sy
  40168c:	f3bf 8f4f 	dsb	sy
  401690:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401692:	4b05      	ldr	r3, [pc, #20]	; (4016a8 <SysTick_Handler+0x30>)
  401694:	4798      	blx	r3
  401696:	b118      	cbz	r0, 4016a0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40169c:	4b03      	ldr	r3, [pc, #12]	; (4016ac <SysTick_Handler+0x34>)
  40169e:	601a      	str	r2, [r3, #0]
	__asm volatile
  4016a0:	2300      	movs	r3, #0
  4016a2:	f383 8811 	msr	BASEPRI, r3
  4016a6:	bd08      	pop	{r3, pc}
  4016a8:	004024b1 	.word	0x004024b1
  4016ac:	e000ed04 	.word	0xe000ed04

004016b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4016b0:	4a03      	ldr	r2, [pc, #12]	; (4016c0 <vPortSetupTimerInterrupt+0x10>)
  4016b2:	4b04      	ldr	r3, [pc, #16]	; (4016c4 <vPortSetupTimerInterrupt+0x14>)
  4016b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4016b6:	2207      	movs	r2, #7
  4016b8:	3b04      	subs	r3, #4
  4016ba:	601a      	str	r2, [r3, #0]
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop
  4016c0:	000927bf 	.word	0x000927bf
  4016c4:	e000e014 	.word	0xe000e014

004016c8 <xPortStartScheduler>:
{
  4016c8:	b500      	push	{lr}
  4016ca:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016cc:	4b25      	ldr	r3, [pc, #148]	; (401764 <xPortStartScheduler+0x9c>)
  4016ce:	781a      	ldrb	r2, [r3, #0]
  4016d0:	b2d2      	uxtb	r2, r2
  4016d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016d4:	22ff      	movs	r2, #255	; 0xff
  4016d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016d8:	781b      	ldrb	r3, [r3, #0]
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016e8:	4a1f      	ldr	r2, [pc, #124]	; (401768 <xPortStartScheduler+0xa0>)
  4016ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016ec:	2207      	movs	r2, #7
  4016ee:	4b1f      	ldr	r3, [pc, #124]	; (40176c <xPortStartScheduler+0xa4>)
  4016f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016f6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016fa:	d010      	beq.n	40171e <xPortStartScheduler+0x56>
  4016fc:	2206      	movs	r2, #6
  4016fe:	e000      	b.n	401702 <xPortStartScheduler+0x3a>
  401700:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401702:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401706:	005b      	lsls	r3, r3, #1
  401708:	b2db      	uxtb	r3, r3
  40170a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40170e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401712:	1e51      	subs	r1, r2, #1
  401714:	f013 0f80 	tst.w	r3, #128	; 0x80
  401718:	d1f2      	bne.n	401700 <xPortStartScheduler+0x38>
  40171a:	4b14      	ldr	r3, [pc, #80]	; (40176c <xPortStartScheduler+0xa4>)
  40171c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40171e:	4a13      	ldr	r2, [pc, #76]	; (40176c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401720:	6813      	ldr	r3, [r2, #0]
  401722:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401728:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40172a:	9b01      	ldr	r3, [sp, #4]
  40172c:	b2db      	uxtb	r3, r3
  40172e:	4a0d      	ldr	r2, [pc, #52]	; (401764 <xPortStartScheduler+0x9c>)
  401730:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401732:	4b0f      	ldr	r3, [pc, #60]	; (401770 <xPortStartScheduler+0xa8>)
  401734:	681a      	ldr	r2, [r3, #0]
  401736:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40173a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40173c:	681a      	ldr	r2, [r3, #0]
  40173e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401742:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401744:	4b0b      	ldr	r3, [pc, #44]	; (401774 <xPortStartScheduler+0xac>)
  401746:	4798      	blx	r3
	uxCriticalNesting = 0;
  401748:	2200      	movs	r2, #0
  40174a:	4b0b      	ldr	r3, [pc, #44]	; (401778 <xPortStartScheduler+0xb0>)
  40174c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40174e:	4b0b      	ldr	r3, [pc, #44]	; (40177c <xPortStartScheduler+0xb4>)
  401750:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401752:	4a0b      	ldr	r2, [pc, #44]	; (401780 <xPortStartScheduler+0xb8>)
  401754:	6813      	ldr	r3, [r2, #0]
  401756:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40175a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40175c:	4b09      	ldr	r3, [pc, #36]	; (401784 <xPortStartScheduler+0xbc>)
  40175e:	4798      	blx	r3
	prvTaskExitError();
  401760:	4b09      	ldr	r3, [pc, #36]	; (401788 <xPortStartScheduler+0xc0>)
  401762:	4798      	blx	r3
  401764:	e000e400 	.word	0xe000e400
  401768:	20400a60 	.word	0x20400a60
  40176c:	20400a64 	.word	0x20400a64
  401770:	e000ed20 	.word	0xe000ed20
  401774:	004016b1 	.word	0x004016b1
  401778:	20400010 	.word	0x20400010
  40177c:	00401535 	.word	0x00401535
  401780:	e000ef34 	.word	0xe000ef34
  401784:	00401515 	.word	0x00401515
  401788:	004014d9 	.word	0x004014d9

0040178c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40178c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401790:	2b0f      	cmp	r3, #15
  401792:	d911      	bls.n	4017b8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401794:	4a12      	ldr	r2, [pc, #72]	; (4017e0 <vPortValidateInterruptPriority+0x54>)
  401796:	5c9b      	ldrb	r3, [r3, r2]
  401798:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40179a:	4a12      	ldr	r2, [pc, #72]	; (4017e4 <vPortValidateInterruptPriority+0x58>)
  40179c:	7812      	ldrb	r2, [r2, #0]
  40179e:	429a      	cmp	r2, r3
  4017a0:	d90a      	bls.n	4017b8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4017a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a6:	b672      	cpsid	i
  4017a8:	f383 8811 	msr	BASEPRI, r3
  4017ac:	f3bf 8f6f 	isb	sy
  4017b0:	f3bf 8f4f 	dsb	sy
  4017b4:	b662      	cpsie	i
  4017b6:	e7fe      	b.n	4017b6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4017b8:	4b0b      	ldr	r3, [pc, #44]	; (4017e8 <vPortValidateInterruptPriority+0x5c>)
  4017ba:	681b      	ldr	r3, [r3, #0]
  4017bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4017c0:	4a0a      	ldr	r2, [pc, #40]	; (4017ec <vPortValidateInterruptPriority+0x60>)
  4017c2:	6812      	ldr	r2, [r2, #0]
  4017c4:	4293      	cmp	r3, r2
  4017c6:	d90a      	bls.n	4017de <vPortValidateInterruptPriority+0x52>
  4017c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017cc:	b672      	cpsid	i
  4017ce:	f383 8811 	msr	BASEPRI, r3
  4017d2:	f3bf 8f6f 	isb	sy
  4017d6:	f3bf 8f4f 	dsb	sy
  4017da:	b662      	cpsie	i
  4017dc:	e7fe      	b.n	4017dc <vPortValidateInterruptPriority+0x50>
  4017de:	4770      	bx	lr
  4017e0:	e000e3f0 	.word	0xe000e3f0
  4017e4:	20400a60 	.word	0x20400a60
  4017e8:	e000ed0c 	.word	0xe000ed0c
  4017ec:	20400a64 	.word	0x20400a64

004017f0 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017f0:	b510      	push	{r4, lr}
  4017f2:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4017f4:	4b06      	ldr	r3, [pc, #24]	; (401810 <pvPortMalloc+0x20>)
  4017f6:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4017f8:	4620      	mov	r0, r4
  4017fa:	4b06      	ldr	r3, [pc, #24]	; (401814 <pvPortMalloc+0x24>)
  4017fc:	4798      	blx	r3
  4017fe:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401800:	4b05      	ldr	r3, [pc, #20]	; (401818 <pvPortMalloc+0x28>)
  401802:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401804:	b10c      	cbz	r4, 40180a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401806:	4620      	mov	r0, r4
  401808:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40180a:	4b04      	ldr	r3, [pc, #16]	; (40181c <pvPortMalloc+0x2c>)
  40180c:	4798      	blx	r3
	return pvReturn;
  40180e:	e7fa      	b.n	401806 <pvPortMalloc+0x16>
  401810:	00402495 	.word	0x00402495
  401814:	00403921 	.word	0x00403921
  401818:	004025fd 	.word	0x004025fd
  40181c:	004034ab 	.word	0x004034ab

00401820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401820:	b148      	cbz	r0, 401836 <vPortFree+0x16>
{
  401822:	b510      	push	{r4, lr}
  401824:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401826:	4b04      	ldr	r3, [pc, #16]	; (401838 <vPortFree+0x18>)
  401828:	4798      	blx	r3
		{
			free( pv );
  40182a:	4620      	mov	r0, r4
  40182c:	4b03      	ldr	r3, [pc, #12]	; (40183c <vPortFree+0x1c>)
  40182e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401830:	4b03      	ldr	r3, [pc, #12]	; (401840 <vPortFree+0x20>)
  401832:	4798      	blx	r3
  401834:	bd10      	pop	{r4, pc}
  401836:	4770      	bx	lr
  401838:	00402495 	.word	0x00402495
  40183c:	00403931 	.word	0x00403931
  401840:	004025fd 	.word	0x004025fd

00401844 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401844:	b538      	push	{r3, r4, r5, lr}
  401846:	4604      	mov	r4, r0
  401848:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40184a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40184c:	b95a      	cbnz	r2, 401866 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40184e:	6803      	ldr	r3, [r0, #0]
  401850:	2b00      	cmp	r3, #0
  401852:	d12e      	bne.n	4018b2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401854:	6840      	ldr	r0, [r0, #4]
  401856:	4b1b      	ldr	r3, [pc, #108]	; (4018c4 <prvCopyDataToQueue+0x80>)
  401858:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40185a:	2300      	movs	r3, #0
  40185c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40185e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401860:	3301      	adds	r3, #1
  401862:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401864:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401866:	b96d      	cbnz	r5, 401884 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401868:	6880      	ldr	r0, [r0, #8]
  40186a:	4b17      	ldr	r3, [pc, #92]	; (4018c8 <prvCopyDataToQueue+0x84>)
  40186c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40186e:	68a3      	ldr	r3, [r4, #8]
  401870:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401872:	4413      	add	r3, r2
  401874:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401876:	6862      	ldr	r2, [r4, #4]
  401878:	4293      	cmp	r3, r2
  40187a:	d31c      	bcc.n	4018b6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40187c:	6823      	ldr	r3, [r4, #0]
  40187e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401880:	2000      	movs	r0, #0
  401882:	e7ec      	b.n	40185e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401884:	68c0      	ldr	r0, [r0, #12]
  401886:	4b10      	ldr	r3, [pc, #64]	; (4018c8 <prvCopyDataToQueue+0x84>)
  401888:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40188a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40188c:	425b      	negs	r3, r3
  40188e:	68e2      	ldr	r2, [r4, #12]
  401890:	441a      	add	r2, r3
  401892:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401894:	6821      	ldr	r1, [r4, #0]
  401896:	428a      	cmp	r2, r1
  401898:	d202      	bcs.n	4018a0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40189a:	6862      	ldr	r2, [r4, #4]
  40189c:	4413      	add	r3, r2
  40189e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4018a0:	2d02      	cmp	r5, #2
  4018a2:	d10a      	bne.n	4018ba <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a6:	b153      	cbz	r3, 4018be <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018aa:	3b01      	subs	r3, #1
  4018ac:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4018ae:	2000      	movs	r0, #0
  4018b0:	e7d5      	b.n	40185e <prvCopyDataToQueue+0x1a>
  4018b2:	2000      	movs	r0, #0
  4018b4:	e7d3      	b.n	40185e <prvCopyDataToQueue+0x1a>
  4018b6:	2000      	movs	r0, #0
  4018b8:	e7d1      	b.n	40185e <prvCopyDataToQueue+0x1a>
  4018ba:	2000      	movs	r0, #0
  4018bc:	e7cf      	b.n	40185e <prvCopyDataToQueue+0x1a>
  4018be:	2000      	movs	r0, #0
  4018c0:	e7cd      	b.n	40185e <prvCopyDataToQueue+0x1a>
  4018c2:	bf00      	nop
  4018c4:	00402c45 	.word	0x00402c45
  4018c8:	00403ea1 	.word	0x00403ea1

004018cc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4018cc:	b530      	push	{r4, r5, lr}
  4018ce:	b083      	sub	sp, #12
  4018d0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4018d2:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4018d4:	b174      	cbz	r4, 4018f4 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4018d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018da:	429a      	cmp	r2, r3
  4018dc:	d315      	bcc.n	40190a <prvNotifyQueueSetContainer+0x3e>
  4018de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018e2:	b672      	cpsid	i
  4018e4:	f383 8811 	msr	BASEPRI, r3
  4018e8:	f3bf 8f6f 	isb	sy
  4018ec:	f3bf 8f4f 	dsb	sy
  4018f0:	b662      	cpsie	i
  4018f2:	e7fe      	b.n	4018f2 <prvNotifyQueueSetContainer+0x26>
  4018f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f8:	b672      	cpsid	i
  4018fa:	f383 8811 	msr	BASEPRI, r3
  4018fe:	f3bf 8f6f 	isb	sy
  401902:	f3bf 8f4f 	dsb	sy
  401906:	b662      	cpsie	i
  401908:	e7fe      	b.n	401908 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40190a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40190c:	4293      	cmp	r3, r2
  40190e:	d803      	bhi.n	401918 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401910:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401912:	4628      	mov	r0, r5
  401914:	b003      	add	sp, #12
  401916:	bd30      	pop	{r4, r5, pc}
  401918:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40191a:	a901      	add	r1, sp, #4
  40191c:	4620      	mov	r0, r4
  40191e:	4b0b      	ldr	r3, [pc, #44]	; (40194c <prvNotifyQueueSetContainer+0x80>)
  401920:	4798      	blx	r3
  401922:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401924:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401926:	f1b3 3fff 	cmp.w	r3, #4294967295
  40192a:	d10a      	bne.n	401942 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40192e:	2b00      	cmp	r3, #0
  401930:	d0ef      	beq.n	401912 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401932:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401936:	4b06      	ldr	r3, [pc, #24]	; (401950 <prvNotifyQueueSetContainer+0x84>)
  401938:	4798      	blx	r3
  40193a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40193c:	bf18      	it	ne
  40193e:	2501      	movne	r5, #1
  401940:	e7e7      	b.n	401912 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401944:	3301      	adds	r3, #1
  401946:	64a3      	str	r3, [r4, #72]	; 0x48
  401948:	e7e3      	b.n	401912 <prvNotifyQueueSetContainer+0x46>
  40194a:	bf00      	nop
  40194c:	00401845 	.word	0x00401845
  401950:	00402a19 	.word	0x00402a19

00401954 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401954:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401956:	b172      	cbz	r2, 401976 <prvCopyDataFromQueue+0x22>
{
  401958:	b510      	push	{r4, lr}
  40195a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40195c:	68c4      	ldr	r4, [r0, #12]
  40195e:	4414      	add	r4, r2
  401960:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401962:	6840      	ldr	r0, [r0, #4]
  401964:	4284      	cmp	r4, r0
  401966:	d301      	bcc.n	40196c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401968:	6818      	ldr	r0, [r3, #0]
  40196a:	60d8      	str	r0, [r3, #12]
  40196c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40196e:	68d9      	ldr	r1, [r3, #12]
  401970:	4b01      	ldr	r3, [pc, #4]	; (401978 <prvCopyDataFromQueue+0x24>)
  401972:	4798      	blx	r3
  401974:	bd10      	pop	{r4, pc}
  401976:	4770      	bx	lr
  401978:	00403ea1 	.word	0x00403ea1

0040197c <prvUnlockQueue>:
{
  40197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40197e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401980:	4b22      	ldr	r3, [pc, #136]	; (401a0c <prvUnlockQueue+0x90>)
  401982:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401986:	2b00      	cmp	r3, #0
  401988:	dd1b      	ble.n	4019c2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40198a:	4d21      	ldr	r5, [pc, #132]	; (401a10 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40198c:	4f21      	ldr	r7, [pc, #132]	; (401a14 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40198e:	4e22      	ldr	r6, [pc, #136]	; (401a18 <prvUnlockQueue+0x9c>)
  401990:	e00b      	b.n	4019aa <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401992:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401994:	b1ab      	cbz	r3, 4019c2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401996:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40199a:	47b0      	blx	r6
  40199c:	b978      	cbnz	r0, 4019be <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40199e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019a0:	3b01      	subs	r3, #1
  4019a2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	dd0b      	ble.n	4019c2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d0f0      	beq.n	401992 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019b0:	2100      	movs	r1, #0
  4019b2:	4620      	mov	r0, r4
  4019b4:	47a8      	blx	r5
  4019b6:	2801      	cmp	r0, #1
  4019b8:	d1f1      	bne.n	40199e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4019ba:	47b8      	blx	r7
  4019bc:	e7ef      	b.n	40199e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4019be:	47b8      	blx	r7
  4019c0:	e7ed      	b.n	40199e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4019c2:	f04f 33ff 	mov.w	r3, #4294967295
  4019c6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4019c8:	4b14      	ldr	r3, [pc, #80]	; (401a1c <prvUnlockQueue+0xa0>)
  4019ca:	4798      	blx	r3
	taskENTER_CRITICAL();
  4019cc:	4b0f      	ldr	r3, [pc, #60]	; (401a0c <prvUnlockQueue+0x90>)
  4019ce:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019d2:	2b00      	cmp	r3, #0
  4019d4:	dd14      	ble.n	401a00 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019d6:	6923      	ldr	r3, [r4, #16]
  4019d8:	b193      	cbz	r3, 401a00 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019da:	f104 0610 	add.w	r6, r4, #16
  4019de:	4d0e      	ldr	r5, [pc, #56]	; (401a18 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4019e0:	4f0c      	ldr	r7, [pc, #48]	; (401a14 <prvUnlockQueue+0x98>)
  4019e2:	e007      	b.n	4019f4 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4019e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e6:	3b01      	subs	r3, #1
  4019e8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019ec:	2b00      	cmp	r3, #0
  4019ee:	dd07      	ble.n	401a00 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019f0:	6923      	ldr	r3, [r4, #16]
  4019f2:	b12b      	cbz	r3, 401a00 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019f4:	4630      	mov	r0, r6
  4019f6:	47a8      	blx	r5
  4019f8:	2800      	cmp	r0, #0
  4019fa:	d0f3      	beq.n	4019e4 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4019fc:	47b8      	blx	r7
  4019fe:	e7f1      	b.n	4019e4 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401a00:	f04f 33ff 	mov.w	r3, #4294967295
  401a04:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401a06:	4b05      	ldr	r3, [pc, #20]	; (401a1c <prvUnlockQueue+0xa0>)
  401a08:	4798      	blx	r3
  401a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a0c:	00401595 	.word	0x00401595
  401a10:	004018cd 	.word	0x004018cd
  401a14:	00402b75 	.word	0x00402b75
  401a18:	00402a19 	.word	0x00402a19
  401a1c:	004015e1 	.word	0x004015e1

00401a20 <xQueueGenericReset>:
{
  401a20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a22:	b308      	cbz	r0, 401a68 <xQueueGenericReset+0x48>
  401a24:	4604      	mov	r4, r0
  401a26:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a28:	4b1d      	ldr	r3, [pc, #116]	; (401aa0 <xQueueGenericReset+0x80>)
  401a2a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a2c:	6822      	ldr	r2, [r4, #0]
  401a2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a32:	fb03 f301 	mul.w	r3, r3, r1
  401a36:	18d0      	adds	r0, r2, r3
  401a38:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a3a:	2000      	movs	r0, #0
  401a3c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a3e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a40:	1a5b      	subs	r3, r3, r1
  401a42:	4413      	add	r3, r2
  401a44:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a46:	f04f 33ff 	mov.w	r3, #4294967295
  401a4a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a4c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a4e:	b9fd      	cbnz	r5, 401a90 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a50:	6923      	ldr	r3, [r4, #16]
  401a52:	b12b      	cbz	r3, 401a60 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a54:	f104 0010 	add.w	r0, r4, #16
  401a58:	4b12      	ldr	r3, [pc, #72]	; (401aa4 <xQueueGenericReset+0x84>)
  401a5a:	4798      	blx	r3
  401a5c:	2801      	cmp	r0, #1
  401a5e:	d00e      	beq.n	401a7e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401a60:	4b11      	ldr	r3, [pc, #68]	; (401aa8 <xQueueGenericReset+0x88>)
  401a62:	4798      	blx	r3
}
  401a64:	2001      	movs	r0, #1
  401a66:	bd38      	pop	{r3, r4, r5, pc}
  401a68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a6c:	b672      	cpsid	i
  401a6e:	f383 8811 	msr	BASEPRI, r3
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	f3bf 8f4f 	dsb	sy
  401a7a:	b662      	cpsie	i
  401a7c:	e7fe      	b.n	401a7c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a82:	4b0a      	ldr	r3, [pc, #40]	; (401aac <xQueueGenericReset+0x8c>)
  401a84:	601a      	str	r2, [r3, #0]
  401a86:	f3bf 8f4f 	dsb	sy
  401a8a:	f3bf 8f6f 	isb	sy
  401a8e:	e7e7      	b.n	401a60 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a90:	f104 0010 	add.w	r0, r4, #16
  401a94:	4d06      	ldr	r5, [pc, #24]	; (401ab0 <xQueueGenericReset+0x90>)
  401a96:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a9c:	47a8      	blx	r5
  401a9e:	e7df      	b.n	401a60 <xQueueGenericReset+0x40>
  401aa0:	00401595 	.word	0x00401595
  401aa4:	00402a19 	.word	0x00402a19
  401aa8:	004015e1 	.word	0x004015e1
  401aac:	e000ed04 	.word	0xe000ed04
  401ab0:	00401449 	.word	0x00401449

00401ab4 <xQueueGenericCreate>:
{
  401ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401ab6:	b950      	cbnz	r0, 401ace <xQueueGenericCreate+0x1a>
  401ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401abc:	b672      	cpsid	i
  401abe:	f383 8811 	msr	BASEPRI, r3
  401ac2:	f3bf 8f6f 	isb	sy
  401ac6:	f3bf 8f4f 	dsb	sy
  401aca:	b662      	cpsie	i
  401acc:	e7fe      	b.n	401acc <xQueueGenericCreate+0x18>
  401ace:	4606      	mov	r6, r0
  401ad0:	4617      	mov	r7, r2
  401ad2:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401ad4:	b189      	cbz	r1, 401afa <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ad6:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401ada:	3059      	adds	r0, #89	; 0x59
  401adc:	4b12      	ldr	r3, [pc, #72]	; (401b28 <xQueueGenericCreate+0x74>)
  401ade:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401ae0:	4604      	mov	r4, r0
  401ae2:	b9e8      	cbnz	r0, 401b20 <xQueueGenericCreate+0x6c>
  401ae4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae8:	b672      	cpsid	i
  401aea:	f383 8811 	msr	BASEPRI, r3
  401aee:	f3bf 8f6f 	isb	sy
  401af2:	f3bf 8f4f 	dsb	sy
  401af6:	b662      	cpsie	i
  401af8:	e7fe      	b.n	401af8 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401afa:	2058      	movs	r0, #88	; 0x58
  401afc:	4b0a      	ldr	r3, [pc, #40]	; (401b28 <xQueueGenericCreate+0x74>)
  401afe:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401b00:	4604      	mov	r4, r0
  401b02:	2800      	cmp	r0, #0
  401b04:	d0ee      	beq.n	401ae4 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401b06:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b08:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b0a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b0c:	2101      	movs	r1, #1
  401b0e:	4620      	mov	r0, r4
  401b10:	4b06      	ldr	r3, [pc, #24]	; (401b2c <xQueueGenericCreate+0x78>)
  401b12:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b14:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b18:	2300      	movs	r3, #0
  401b1a:	6563      	str	r3, [r4, #84]	; 0x54
}
  401b1c:	4620      	mov	r0, r4
  401b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b20:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b24:	6003      	str	r3, [r0, #0]
  401b26:	e7ef      	b.n	401b08 <xQueueGenericCreate+0x54>
  401b28:	004017f1 	.word	0x004017f1
  401b2c:	00401a21 	.word	0x00401a21

00401b30 <xQueueGenericSend>:
{
  401b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b34:	b085      	sub	sp, #20
  401b36:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b38:	b1b8      	cbz	r0, 401b6a <xQueueGenericSend+0x3a>
  401b3a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b3c:	b301      	cbz	r1, 401b80 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b3e:	2b02      	cmp	r3, #2
  401b40:	d02c      	beq.n	401b9c <xQueueGenericSend+0x6c>
  401b42:	461d      	mov	r5, r3
  401b44:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b46:	4b66      	ldr	r3, [pc, #408]	; (401ce0 <xQueueGenericSend+0x1b0>)
  401b48:	4798      	blx	r3
  401b4a:	2800      	cmp	r0, #0
  401b4c:	d134      	bne.n	401bb8 <xQueueGenericSend+0x88>
  401b4e:	9b01      	ldr	r3, [sp, #4]
  401b50:	2b00      	cmp	r3, #0
  401b52:	d038      	beq.n	401bc6 <xQueueGenericSend+0x96>
  401b54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b58:	b672      	cpsid	i
  401b5a:	f383 8811 	msr	BASEPRI, r3
  401b5e:	f3bf 8f6f 	isb	sy
  401b62:	f3bf 8f4f 	dsb	sy
  401b66:	b662      	cpsie	i
  401b68:	e7fe      	b.n	401b68 <xQueueGenericSend+0x38>
  401b6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b6e:	b672      	cpsid	i
  401b70:	f383 8811 	msr	BASEPRI, r3
  401b74:	f3bf 8f6f 	isb	sy
  401b78:	f3bf 8f4f 	dsb	sy
  401b7c:	b662      	cpsie	i
  401b7e:	e7fe      	b.n	401b7e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b80:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b82:	2a00      	cmp	r2, #0
  401b84:	d0db      	beq.n	401b3e <xQueueGenericSend+0xe>
  401b86:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8a:	b672      	cpsid	i
  401b8c:	f383 8811 	msr	BASEPRI, r3
  401b90:	f3bf 8f6f 	isb	sy
  401b94:	f3bf 8f4f 	dsb	sy
  401b98:	b662      	cpsie	i
  401b9a:	e7fe      	b.n	401b9a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401b9e:	2a01      	cmp	r2, #1
  401ba0:	d0cf      	beq.n	401b42 <xQueueGenericSend+0x12>
  401ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba6:	b672      	cpsid	i
  401ba8:	f383 8811 	msr	BASEPRI, r3
  401bac:	f3bf 8f6f 	isb	sy
  401bb0:	f3bf 8f4f 	dsb	sy
  401bb4:	b662      	cpsie	i
  401bb6:	e7fe      	b.n	401bb6 <xQueueGenericSend+0x86>
  401bb8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401bba:	4e4a      	ldr	r6, [pc, #296]	; (401ce4 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401bbc:	f8df a150 	ldr.w	sl, [pc, #336]	; 401d10 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401bc0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401cf0 <xQueueGenericSend+0x1c0>
  401bc4:	e042      	b.n	401c4c <xQueueGenericSend+0x11c>
  401bc6:	2700      	movs	r7, #0
  401bc8:	e7f7      	b.n	401bba <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401bca:	462a      	mov	r2, r5
  401bcc:	4641      	mov	r1, r8
  401bce:	4620      	mov	r0, r4
  401bd0:	4b45      	ldr	r3, [pc, #276]	; (401ce8 <xQueueGenericSend+0x1b8>)
  401bd2:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401bd6:	b19b      	cbz	r3, 401c00 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401bd8:	4629      	mov	r1, r5
  401bda:	4620      	mov	r0, r4
  401bdc:	4b43      	ldr	r3, [pc, #268]	; (401cec <xQueueGenericSend+0x1bc>)
  401bde:	4798      	blx	r3
  401be0:	2801      	cmp	r0, #1
  401be2:	d107      	bne.n	401bf4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be8:	4b41      	ldr	r3, [pc, #260]	; (401cf0 <xQueueGenericSend+0x1c0>)
  401bea:	601a      	str	r2, [r3, #0]
  401bec:	f3bf 8f4f 	dsb	sy
  401bf0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bf4:	4b3f      	ldr	r3, [pc, #252]	; (401cf4 <xQueueGenericSend+0x1c4>)
  401bf6:	4798      	blx	r3
				return pdPASS;
  401bf8:	2001      	movs	r0, #1
}
  401bfa:	b005      	add	sp, #20
  401bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c02:	b173      	cbz	r3, 401c22 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401c04:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c08:	4b3b      	ldr	r3, [pc, #236]	; (401cf8 <xQueueGenericSend+0x1c8>)
  401c0a:	4798      	blx	r3
  401c0c:	2801      	cmp	r0, #1
  401c0e:	d1f1      	bne.n	401bf4 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c14:	4b36      	ldr	r3, [pc, #216]	; (401cf0 <xQueueGenericSend+0x1c0>)
  401c16:	601a      	str	r2, [r3, #0]
  401c18:	f3bf 8f4f 	dsb	sy
  401c1c:	f3bf 8f6f 	isb	sy
  401c20:	e7e8      	b.n	401bf4 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c22:	2800      	cmp	r0, #0
  401c24:	d0e6      	beq.n	401bf4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c2a:	4b31      	ldr	r3, [pc, #196]	; (401cf0 <xQueueGenericSend+0x1c0>)
  401c2c:	601a      	str	r2, [r3, #0]
  401c2e:	f3bf 8f4f 	dsb	sy
  401c32:	f3bf 8f6f 	isb	sy
  401c36:	e7dd      	b.n	401bf4 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c38:	4b2e      	ldr	r3, [pc, #184]	; (401cf4 <xQueueGenericSend+0x1c4>)
  401c3a:	4798      	blx	r3
					return errQUEUE_FULL;
  401c3c:	2000      	movs	r0, #0
  401c3e:	e7dc      	b.n	401bfa <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c40:	4620      	mov	r0, r4
  401c42:	4b2e      	ldr	r3, [pc, #184]	; (401cfc <xQueueGenericSend+0x1cc>)
  401c44:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c46:	4b2e      	ldr	r3, [pc, #184]	; (401d00 <xQueueGenericSend+0x1d0>)
  401c48:	4798      	blx	r3
  401c4a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c4c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c52:	429a      	cmp	r2, r3
  401c54:	d3b9      	bcc.n	401bca <xQueueGenericSend+0x9a>
  401c56:	2d02      	cmp	r5, #2
  401c58:	d0b7      	beq.n	401bca <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c5a:	9b01      	ldr	r3, [sp, #4]
  401c5c:	2b00      	cmp	r3, #0
  401c5e:	d0eb      	beq.n	401c38 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401c60:	b90f      	cbnz	r7, 401c66 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401c62:	a802      	add	r0, sp, #8
  401c64:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c66:	4b23      	ldr	r3, [pc, #140]	; (401cf4 <xQueueGenericSend+0x1c4>)
  401c68:	4798      	blx	r3
		vTaskSuspendAll();
  401c6a:	4b26      	ldr	r3, [pc, #152]	; (401d04 <xQueueGenericSend+0x1d4>)
  401c6c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c6e:	47b0      	blx	r6
  401c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c72:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c76:	d101      	bne.n	401c7c <xQueueGenericSend+0x14c>
  401c78:	2300      	movs	r3, #0
  401c7a:	6463      	str	r3, [r4, #68]	; 0x44
  401c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c82:	d101      	bne.n	401c88 <xQueueGenericSend+0x158>
  401c84:	2300      	movs	r3, #0
  401c86:	64a3      	str	r3, [r4, #72]	; 0x48
  401c88:	4b1a      	ldr	r3, [pc, #104]	; (401cf4 <xQueueGenericSend+0x1c4>)
  401c8a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c8c:	a901      	add	r1, sp, #4
  401c8e:	a802      	add	r0, sp, #8
  401c90:	4b1d      	ldr	r3, [pc, #116]	; (401d08 <xQueueGenericSend+0x1d8>)
  401c92:	4798      	blx	r3
  401c94:	b9e0      	cbnz	r0, 401cd0 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401c96:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401c98:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401c9c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401c9e:	4b15      	ldr	r3, [pc, #84]	; (401cf4 <xQueueGenericSend+0x1c4>)
  401ca0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401ca2:	45bb      	cmp	fp, r7
  401ca4:	d1cc      	bne.n	401c40 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401ca6:	9901      	ldr	r1, [sp, #4]
  401ca8:	f104 0010 	add.w	r0, r4, #16
  401cac:	4b17      	ldr	r3, [pc, #92]	; (401d0c <xQueueGenericSend+0x1dc>)
  401cae:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cb0:	4620      	mov	r0, r4
  401cb2:	4b12      	ldr	r3, [pc, #72]	; (401cfc <xQueueGenericSend+0x1cc>)
  401cb4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cb6:	4b12      	ldr	r3, [pc, #72]	; (401d00 <xQueueGenericSend+0x1d0>)
  401cb8:	4798      	blx	r3
  401cba:	2800      	cmp	r0, #0
  401cbc:	d1c5      	bne.n	401c4a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401cbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cc2:	f8c9 3000 	str.w	r3, [r9]
  401cc6:	f3bf 8f4f 	dsb	sy
  401cca:	f3bf 8f6f 	isb	sy
  401cce:	e7bc      	b.n	401c4a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401cd0:	4620      	mov	r0, r4
  401cd2:	4b0a      	ldr	r3, [pc, #40]	; (401cfc <xQueueGenericSend+0x1cc>)
  401cd4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cd6:	4b0a      	ldr	r3, [pc, #40]	; (401d00 <xQueueGenericSend+0x1d0>)
  401cd8:	4798      	blx	r3
			return errQUEUE_FULL;
  401cda:	2000      	movs	r0, #0
  401cdc:	e78d      	b.n	401bfa <xQueueGenericSend+0xca>
  401cde:	bf00      	nop
  401ce0:	00402b81 	.word	0x00402b81
  401ce4:	00401595 	.word	0x00401595
  401ce8:	00401845 	.word	0x00401845
  401cec:	004018cd 	.word	0x004018cd
  401cf0:	e000ed04 	.word	0xe000ed04
  401cf4:	004015e1 	.word	0x004015e1
  401cf8:	00402a19 	.word	0x00402a19
  401cfc:	0040197d 	.word	0x0040197d
  401d00:	004025fd 	.word	0x004025fd
  401d04:	00402495 	.word	0x00402495
  401d08:	00402ae1 	.word	0x00402ae1
  401d0c:	00402915 	.word	0x00402915
  401d10:	00402ab1 	.word	0x00402ab1

00401d14 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d14:	2800      	cmp	r0, #0
  401d16:	d036      	beq.n	401d86 <xQueueGenericSendFromISR+0x72>
{
  401d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d1c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d1e:	2900      	cmp	r1, #0
  401d20:	d03c      	beq.n	401d9c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d22:	2b02      	cmp	r3, #2
  401d24:	d048      	beq.n	401db8 <xQueueGenericSendFromISR+0xa4>
  401d26:	461e      	mov	r6, r3
  401d28:	4615      	mov	r5, r2
  401d2a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401d2c:	4b35      	ldr	r3, [pc, #212]	; (401e04 <xQueueGenericSendFromISR+0xf0>)
  401d2e:	4798      	blx	r3
	__asm volatile
  401d30:	f3ef 8711 	mrs	r7, BASEPRI
  401d34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d38:	b672      	cpsid	i
  401d3a:	f383 8811 	msr	BASEPRI, r3
  401d3e:	f3bf 8f6f 	isb	sy
  401d42:	f3bf 8f4f 	dsb	sy
  401d46:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401d48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d4c:	429a      	cmp	r2, r3
  401d4e:	d301      	bcc.n	401d54 <xQueueGenericSendFromISR+0x40>
  401d50:	2e02      	cmp	r6, #2
  401d52:	d14f      	bne.n	401df4 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401d54:	4632      	mov	r2, r6
  401d56:	4641      	mov	r1, r8
  401d58:	4620      	mov	r0, r4
  401d5a:	4b2b      	ldr	r3, [pc, #172]	; (401e08 <xQueueGenericSendFromISR+0xf4>)
  401d5c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401d5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d60:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d64:	d141      	bne.n	401dea <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401d66:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d68:	2b00      	cmp	r3, #0
  401d6a:	d033      	beq.n	401dd4 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401d6c:	4631      	mov	r1, r6
  401d6e:	4620      	mov	r0, r4
  401d70:	4b26      	ldr	r3, [pc, #152]	; (401e0c <xQueueGenericSendFromISR+0xf8>)
  401d72:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401d74:	2d00      	cmp	r5, #0
  401d76:	d03f      	beq.n	401df8 <xQueueGenericSendFromISR+0xe4>
  401d78:	2801      	cmp	r0, #1
  401d7a:	d13d      	bne.n	401df8 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401d7c:	6028      	str	r0, [r5, #0]
	__asm volatile
  401d7e:	f387 8811 	msr	BASEPRI, r7
}
  401d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401d86:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8a:	b672      	cpsid	i
  401d8c:	f383 8811 	msr	BASEPRI, r3
  401d90:	f3bf 8f6f 	isb	sy
  401d94:	f3bf 8f4f 	dsb	sy
  401d98:	b662      	cpsie	i
  401d9a:	e7fe      	b.n	401d9a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d9c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d9e:	2800      	cmp	r0, #0
  401da0:	d0bf      	beq.n	401d22 <xQueueGenericSendFromISR+0xe>
  401da2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401da6:	b672      	cpsid	i
  401da8:	f383 8811 	msr	BASEPRI, r3
  401dac:	f3bf 8f6f 	isb	sy
  401db0:	f3bf 8f4f 	dsb	sy
  401db4:	b662      	cpsie	i
  401db6:	e7fe      	b.n	401db6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401db8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401dba:	2801      	cmp	r0, #1
  401dbc:	d0b3      	beq.n	401d26 <xQueueGenericSendFromISR+0x12>
  401dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc2:	b672      	cpsid	i
  401dc4:	f383 8811 	msr	BASEPRI, r3
  401dc8:	f3bf 8f6f 	isb	sy
  401dcc:	f3bf 8f4f 	dsb	sy
  401dd0:	b662      	cpsie	i
  401dd2:	e7fe      	b.n	401dd2 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401dd6:	b18b      	cbz	r3, 401dfc <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401dd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ddc:	4b0c      	ldr	r3, [pc, #48]	; (401e10 <xQueueGenericSendFromISR+0xfc>)
  401dde:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401de0:	b175      	cbz	r5, 401e00 <xQueueGenericSendFromISR+0xec>
  401de2:	b168      	cbz	r0, 401e00 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401de4:	2001      	movs	r0, #1
  401de6:	6028      	str	r0, [r5, #0]
  401de8:	e7c9      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401dea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401dec:	3301      	adds	r3, #1
  401dee:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401df0:	2001      	movs	r0, #1
  401df2:	e7c4      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401df4:	2000      	movs	r0, #0
  401df6:	e7c2      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401df8:	2001      	movs	r0, #1
  401dfa:	e7c0      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
  401dfc:	2001      	movs	r0, #1
  401dfe:	e7be      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
  401e00:	2001      	movs	r0, #1
  401e02:	e7bc      	b.n	401d7e <xQueueGenericSendFromISR+0x6a>
  401e04:	0040178d 	.word	0x0040178d
  401e08:	00401845 	.word	0x00401845
  401e0c:	004018cd 	.word	0x004018cd
  401e10:	00402a19 	.word	0x00402a19

00401e14 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401e14:	b170      	cbz	r0, 401e34 <xQueueGiveFromISR+0x20>
{
  401e16:	b570      	push	{r4, r5, r6, lr}
  401e18:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401e1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401e1c:	b1ab      	cbz	r3, 401e4a <xQueueGiveFromISR+0x36>
  401e1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e22:	b672      	cpsid	i
  401e24:	f383 8811 	msr	BASEPRI, r3
  401e28:	f3bf 8f6f 	isb	sy
  401e2c:	f3bf 8f4f 	dsb	sy
  401e30:	b662      	cpsie	i
  401e32:	e7fe      	b.n	401e32 <xQueueGiveFromISR+0x1e>
  401e34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e38:	b672      	cpsid	i
  401e3a:	f383 8811 	msr	BASEPRI, r3
  401e3e:	f3bf 8f6f 	isb	sy
  401e42:	f3bf 8f4f 	dsb	sy
  401e46:	b662      	cpsie	i
  401e48:	e7fe      	b.n	401e48 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e4a:	6803      	ldr	r3, [r0, #0]
  401e4c:	b333      	cbz	r3, 401e9c <xQueueGiveFromISR+0x88>
  401e4e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e50:	4b25      	ldr	r3, [pc, #148]	; (401ee8 <xQueueGiveFromISR+0xd4>)
  401e52:	4798      	blx	r3
	__asm volatile
  401e54:	f3ef 8611 	mrs	r6, BASEPRI
  401e58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e5c:	b672      	cpsid	i
  401e5e:	f383 8811 	msr	BASEPRI, r3
  401e62:	f3bf 8f6f 	isb	sy
  401e66:	f3bf 8f4f 	dsb	sy
  401e6a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401e6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e70:	429a      	cmp	r2, r3
  401e72:	d231      	bcs.n	401ed8 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e76:	3301      	adds	r3, #1
  401e78:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e80:	d125      	bne.n	401ece <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e84:	b1c3      	cbz	r3, 401eb8 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401e86:	2100      	movs	r1, #0
  401e88:	4620      	mov	r0, r4
  401e8a:	4b18      	ldr	r3, [pc, #96]	; (401eec <xQueueGiveFromISR+0xd8>)
  401e8c:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401e8e:	b32d      	cbz	r5, 401edc <xQueueGiveFromISR+0xc8>
  401e90:	2801      	cmp	r0, #1
  401e92:	d123      	bne.n	401edc <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e94:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e96:	f386 8811 	msr	BASEPRI, r6
}
  401e9a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e9c:	6843      	ldr	r3, [r0, #4]
  401e9e:	2b00      	cmp	r3, #0
  401ea0:	d0d5      	beq.n	401e4e <xQueueGiveFromISR+0x3a>
	__asm volatile
  401ea2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ea6:	b672      	cpsid	i
  401ea8:	f383 8811 	msr	BASEPRI, r3
  401eac:	f3bf 8f6f 	isb	sy
  401eb0:	f3bf 8f4f 	dsb	sy
  401eb4:	b662      	cpsie	i
  401eb6:	e7fe      	b.n	401eb6 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eba:	b18b      	cbz	r3, 401ee0 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ebc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ec0:	4b0b      	ldr	r3, [pc, #44]	; (401ef0 <xQueueGiveFromISR+0xdc>)
  401ec2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ec4:	b175      	cbz	r5, 401ee4 <xQueueGiveFromISR+0xd0>
  401ec6:	b168      	cbz	r0, 401ee4 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ec8:	2001      	movs	r0, #1
  401eca:	6028      	str	r0, [r5, #0]
  401ecc:	e7e3      	b.n	401e96 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401ece:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ed0:	3301      	adds	r3, #1
  401ed2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ed4:	2001      	movs	r0, #1
  401ed6:	e7de      	b.n	401e96 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401ed8:	2000      	movs	r0, #0
  401eda:	e7dc      	b.n	401e96 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401edc:	2001      	movs	r0, #1
  401ede:	e7da      	b.n	401e96 <xQueueGiveFromISR+0x82>
  401ee0:	2001      	movs	r0, #1
  401ee2:	e7d8      	b.n	401e96 <xQueueGiveFromISR+0x82>
  401ee4:	2001      	movs	r0, #1
  401ee6:	e7d6      	b.n	401e96 <xQueueGiveFromISR+0x82>
  401ee8:	0040178d 	.word	0x0040178d
  401eec:	004018cd 	.word	0x004018cd
  401ef0:	00402a19 	.word	0x00402a19

00401ef4 <xQueueGenericReceive>:
{
  401ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ef8:	b084      	sub	sp, #16
  401efa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401efc:	b198      	cbz	r0, 401f26 <xQueueGenericReceive+0x32>
  401efe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f00:	b1e1      	cbz	r1, 401f3c <xQueueGenericReceive+0x48>
  401f02:	4698      	mov	r8, r3
  401f04:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f06:	4b61      	ldr	r3, [pc, #388]	; (40208c <xQueueGenericReceive+0x198>)
  401f08:	4798      	blx	r3
  401f0a:	bb28      	cbnz	r0, 401f58 <xQueueGenericReceive+0x64>
  401f0c:	9b01      	ldr	r3, [sp, #4]
  401f0e:	b353      	cbz	r3, 401f66 <xQueueGenericReceive+0x72>
  401f10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f14:	b672      	cpsid	i
  401f16:	f383 8811 	msr	BASEPRI, r3
  401f1a:	f3bf 8f6f 	isb	sy
  401f1e:	f3bf 8f4f 	dsb	sy
  401f22:	b662      	cpsie	i
  401f24:	e7fe      	b.n	401f24 <xQueueGenericReceive+0x30>
  401f26:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f2a:	b672      	cpsid	i
  401f2c:	f383 8811 	msr	BASEPRI, r3
  401f30:	f3bf 8f6f 	isb	sy
  401f34:	f3bf 8f4f 	dsb	sy
  401f38:	b662      	cpsie	i
  401f3a:	e7fe      	b.n	401f3a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f3e:	2a00      	cmp	r2, #0
  401f40:	d0df      	beq.n	401f02 <xQueueGenericReceive+0xe>
  401f42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f46:	b672      	cpsid	i
  401f48:	f383 8811 	msr	BASEPRI, r3
  401f4c:	f3bf 8f6f 	isb	sy
  401f50:	f3bf 8f4f 	dsb	sy
  401f54:	b662      	cpsie	i
  401f56:	e7fe      	b.n	401f56 <xQueueGenericReceive+0x62>
  401f58:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401f5a:	4d4d      	ldr	r5, [pc, #308]	; (402090 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401f5c:	f8df a160 	ldr.w	sl, [pc, #352]	; 4020c0 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401f60:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4020a0 <xQueueGenericReceive+0x1ac>
  401f64:	e04b      	b.n	401ffe <xQueueGenericReceive+0x10a>
  401f66:	2600      	movs	r6, #0
  401f68:	e7f7      	b.n	401f5a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401f6a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f6c:	4639      	mov	r1, r7
  401f6e:	4620      	mov	r0, r4
  401f70:	4b48      	ldr	r3, [pc, #288]	; (402094 <xQueueGenericReceive+0x1a0>)
  401f72:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401f74:	f1b8 0f00 	cmp.w	r8, #0
  401f78:	d11d      	bne.n	401fb6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f7c:	3b01      	subs	r3, #1
  401f7e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f80:	6823      	ldr	r3, [r4, #0]
  401f82:	b913      	cbnz	r3, 401f8a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401f84:	4b44      	ldr	r3, [pc, #272]	; (402098 <xQueueGenericReceive+0x1a4>)
  401f86:	4798      	blx	r3
  401f88:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f8a:	6923      	ldr	r3, [r4, #16]
  401f8c:	b16b      	cbz	r3, 401faa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f8e:	f104 0010 	add.w	r0, r4, #16
  401f92:	4b42      	ldr	r3, [pc, #264]	; (40209c <xQueueGenericReceive+0x1a8>)
  401f94:	4798      	blx	r3
  401f96:	2801      	cmp	r0, #1
  401f98:	d107      	bne.n	401faa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f9e:	4b40      	ldr	r3, [pc, #256]	; (4020a0 <xQueueGenericReceive+0x1ac>)
  401fa0:	601a      	str	r2, [r3, #0]
  401fa2:	f3bf 8f4f 	dsb	sy
  401fa6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401faa:	4b3e      	ldr	r3, [pc, #248]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  401fac:	4798      	blx	r3
				return pdPASS;
  401fae:	2001      	movs	r0, #1
}
  401fb0:	b004      	add	sp, #16
  401fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401fb6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fba:	2b00      	cmp	r3, #0
  401fbc:	d0f5      	beq.n	401faa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fc2:	4b36      	ldr	r3, [pc, #216]	; (40209c <xQueueGenericReceive+0x1a8>)
  401fc4:	4798      	blx	r3
  401fc6:	2800      	cmp	r0, #0
  401fc8:	d0ef      	beq.n	401faa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fce:	4b34      	ldr	r3, [pc, #208]	; (4020a0 <xQueueGenericReceive+0x1ac>)
  401fd0:	601a      	str	r2, [r3, #0]
  401fd2:	f3bf 8f4f 	dsb	sy
  401fd6:	f3bf 8f6f 	isb	sy
  401fda:	e7e6      	b.n	401faa <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401fdc:	4b31      	ldr	r3, [pc, #196]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  401fde:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401fe0:	2000      	movs	r0, #0
  401fe2:	e7e5      	b.n	401fb0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401fe4:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401fe6:	6860      	ldr	r0, [r4, #4]
  401fe8:	4b2f      	ldr	r3, [pc, #188]	; (4020a8 <xQueueGenericReceive+0x1b4>)
  401fea:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401fec:	4b2d      	ldr	r3, [pc, #180]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  401fee:	4798      	blx	r3
  401ff0:	e030      	b.n	402054 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401ff2:	4620      	mov	r0, r4
  401ff4:	4b2d      	ldr	r3, [pc, #180]	; (4020ac <xQueueGenericReceive+0x1b8>)
  401ff6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ff8:	4b2d      	ldr	r3, [pc, #180]	; (4020b0 <xQueueGenericReceive+0x1bc>)
  401ffa:	4798      	blx	r3
  401ffc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401ffe:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402002:	2b00      	cmp	r3, #0
  402004:	d1b1      	bne.n	401f6a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402006:	9b01      	ldr	r3, [sp, #4]
  402008:	2b00      	cmp	r3, #0
  40200a:	d0e7      	beq.n	401fdc <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  40200c:	b90e      	cbnz	r6, 402012 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40200e:	a802      	add	r0, sp, #8
  402010:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402012:	4b24      	ldr	r3, [pc, #144]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  402014:	4798      	blx	r3
		vTaskSuspendAll();
  402016:	4b27      	ldr	r3, [pc, #156]	; (4020b4 <xQueueGenericReceive+0x1c0>)
  402018:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40201a:	47a8      	blx	r5
  40201c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40201e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402022:	d101      	bne.n	402028 <xQueueGenericReceive+0x134>
  402024:	2300      	movs	r3, #0
  402026:	6463      	str	r3, [r4, #68]	; 0x44
  402028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40202a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202e:	d101      	bne.n	402034 <xQueueGenericReceive+0x140>
  402030:	2300      	movs	r3, #0
  402032:	64a3      	str	r3, [r4, #72]	; 0x48
  402034:	4b1b      	ldr	r3, [pc, #108]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  402036:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402038:	a901      	add	r1, sp, #4
  40203a:	a802      	add	r0, sp, #8
  40203c:	4b1e      	ldr	r3, [pc, #120]	; (4020b8 <xQueueGenericReceive+0x1c4>)
  40203e:	4798      	blx	r3
  402040:	b9e8      	cbnz	r0, 40207e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402042:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402044:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402046:	4b17      	ldr	r3, [pc, #92]	; (4020a4 <xQueueGenericReceive+0x1b0>)
  402048:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40204a:	2e00      	cmp	r6, #0
  40204c:	d1d1      	bne.n	401ff2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40204e:	6823      	ldr	r3, [r4, #0]
  402050:	2b00      	cmp	r3, #0
  402052:	d0c7      	beq.n	401fe4 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402054:	9901      	ldr	r1, [sp, #4]
  402056:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40205a:	4b18      	ldr	r3, [pc, #96]	; (4020bc <xQueueGenericReceive+0x1c8>)
  40205c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40205e:	4620      	mov	r0, r4
  402060:	4b12      	ldr	r3, [pc, #72]	; (4020ac <xQueueGenericReceive+0x1b8>)
  402062:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402064:	4b12      	ldr	r3, [pc, #72]	; (4020b0 <xQueueGenericReceive+0x1bc>)
  402066:	4798      	blx	r3
  402068:	2800      	cmp	r0, #0
  40206a:	d1c7      	bne.n	401ffc <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  40206c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402070:	f8c9 3000 	str.w	r3, [r9]
  402074:	f3bf 8f4f 	dsb	sy
  402078:	f3bf 8f6f 	isb	sy
  40207c:	e7be      	b.n	401ffc <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40207e:	4620      	mov	r0, r4
  402080:	4b0a      	ldr	r3, [pc, #40]	; (4020ac <xQueueGenericReceive+0x1b8>)
  402082:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402084:	4b0a      	ldr	r3, [pc, #40]	; (4020b0 <xQueueGenericReceive+0x1bc>)
  402086:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402088:	2000      	movs	r0, #0
  40208a:	e791      	b.n	401fb0 <xQueueGenericReceive+0xbc>
  40208c:	00402b81 	.word	0x00402b81
  402090:	00401595 	.word	0x00401595
  402094:	00401955 	.word	0x00401955
  402098:	00402d01 	.word	0x00402d01
  40209c:	00402a19 	.word	0x00402a19
  4020a0:	e000ed04 	.word	0xe000ed04
  4020a4:	004015e1 	.word	0x004015e1
  4020a8:	00402ba1 	.word	0x00402ba1
  4020ac:	0040197d 	.word	0x0040197d
  4020b0:	004025fd 	.word	0x004025fd
  4020b4:	00402495 	.word	0x00402495
  4020b8:	00402ae1 	.word	0x00402ae1
  4020bc:	00402915 	.word	0x00402915
  4020c0:	00402ab1 	.word	0x00402ab1

004020c4 <vQueueAddToRegistry>:
	{
  4020c4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4020c6:	4b0b      	ldr	r3, [pc, #44]	; (4020f4 <vQueueAddToRegistry+0x30>)
  4020c8:	681b      	ldr	r3, [r3, #0]
  4020ca:	b153      	cbz	r3, 4020e2 <vQueueAddToRegistry+0x1e>
  4020cc:	2301      	movs	r3, #1
  4020ce:	4c09      	ldr	r4, [pc, #36]	; (4020f4 <vQueueAddToRegistry+0x30>)
  4020d0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4020d4:	b132      	cbz	r2, 4020e4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020d6:	3301      	adds	r3, #1
  4020d8:	2b08      	cmp	r3, #8
  4020da:	d1f9      	bne.n	4020d0 <vQueueAddToRegistry+0xc>
	}
  4020dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020e0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020e2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4020e4:	4a03      	ldr	r2, [pc, #12]	; (4020f4 <vQueueAddToRegistry+0x30>)
  4020e6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4020ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4020ee:	6058      	str	r0, [r3, #4]
				break;
  4020f0:	e7f4      	b.n	4020dc <vQueueAddToRegistry+0x18>
  4020f2:	bf00      	nop
  4020f4:	20400c70 	.word	0x20400c70

004020f8 <vQueueWaitForMessageRestricted>:
	{
  4020f8:	b570      	push	{r4, r5, r6, lr}
  4020fa:	4604      	mov	r4, r0
  4020fc:	460d      	mov	r5, r1
  4020fe:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402100:	4b0f      	ldr	r3, [pc, #60]	; (402140 <vQueueWaitForMessageRestricted+0x48>)
  402102:	4798      	blx	r3
  402104:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402106:	f1b3 3fff 	cmp.w	r3, #4294967295
  40210a:	d00b      	beq.n	402124 <vQueueWaitForMessageRestricted+0x2c>
  40210c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40210e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402112:	d00a      	beq.n	40212a <vQueueWaitForMessageRestricted+0x32>
  402114:	4b0b      	ldr	r3, [pc, #44]	; (402144 <vQueueWaitForMessageRestricted+0x4c>)
  402116:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40211a:	b14b      	cbz	r3, 402130 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40211c:	4620      	mov	r0, r4
  40211e:	4b0a      	ldr	r3, [pc, #40]	; (402148 <vQueueWaitForMessageRestricted+0x50>)
  402120:	4798      	blx	r3
  402122:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402124:	2300      	movs	r3, #0
  402126:	6463      	str	r3, [r4, #68]	; 0x44
  402128:	e7f0      	b.n	40210c <vQueueWaitForMessageRestricted+0x14>
  40212a:	2300      	movs	r3, #0
  40212c:	64a3      	str	r3, [r4, #72]	; 0x48
  40212e:	e7f1      	b.n	402114 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402130:	4632      	mov	r2, r6
  402132:	4629      	mov	r1, r5
  402134:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402138:	4b04      	ldr	r3, [pc, #16]	; (40214c <vQueueWaitForMessageRestricted+0x54>)
  40213a:	4798      	blx	r3
  40213c:	e7ee      	b.n	40211c <vQueueWaitForMessageRestricted+0x24>
  40213e:	bf00      	nop
  402140:	00401595 	.word	0x00401595
  402144:	004015e1 	.word	0x004015e1
  402148:	0040197d 	.word	0x0040197d
  40214c:	00402999 	.word	0x00402999

00402150 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402150:	4b08      	ldr	r3, [pc, #32]	; (402174 <prvResetNextTaskUnblockTime+0x24>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	681b      	ldr	r3, [r3, #0]
  402156:	b13b      	cbz	r3, 402168 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402158:	4b06      	ldr	r3, [pc, #24]	; (402174 <prvResetNextTaskUnblockTime+0x24>)
  40215a:	681b      	ldr	r3, [r3, #0]
  40215c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40215e:	68db      	ldr	r3, [r3, #12]
  402160:	685a      	ldr	r2, [r3, #4]
  402162:	4b05      	ldr	r3, [pc, #20]	; (402178 <prvResetNextTaskUnblockTime+0x28>)
  402164:	601a      	str	r2, [r3, #0]
  402166:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402168:	f04f 32ff 	mov.w	r2, #4294967295
  40216c:	4b02      	ldr	r3, [pc, #8]	; (402178 <prvResetNextTaskUnblockTime+0x28>)
  40216e:	601a      	str	r2, [r3, #0]
  402170:	4770      	bx	lr
  402172:	bf00      	nop
  402174:	20400a6c 	.word	0x20400a6c
  402178:	20400b18 	.word	0x20400b18

0040217c <prvAddCurrentTaskToDelayedList>:
{
  40217c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40217e:	4b0f      	ldr	r3, [pc, #60]	; (4021bc <prvAddCurrentTaskToDelayedList+0x40>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402184:	4b0e      	ldr	r3, [pc, #56]	; (4021c0 <prvAddCurrentTaskToDelayedList+0x44>)
  402186:	681b      	ldr	r3, [r3, #0]
  402188:	4298      	cmp	r0, r3
  40218a:	d30e      	bcc.n	4021aa <prvAddCurrentTaskToDelayedList+0x2e>
  40218c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40218e:	4b0d      	ldr	r3, [pc, #52]	; (4021c4 <prvAddCurrentTaskToDelayedList+0x48>)
  402190:	6818      	ldr	r0, [r3, #0]
  402192:	4b0a      	ldr	r3, [pc, #40]	; (4021bc <prvAddCurrentTaskToDelayedList+0x40>)
  402194:	6819      	ldr	r1, [r3, #0]
  402196:	3104      	adds	r1, #4
  402198:	4b0b      	ldr	r3, [pc, #44]	; (4021c8 <prvAddCurrentTaskToDelayedList+0x4c>)
  40219a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40219c:	4b0b      	ldr	r3, [pc, #44]	; (4021cc <prvAddCurrentTaskToDelayedList+0x50>)
  40219e:	681b      	ldr	r3, [r3, #0]
  4021a0:	429c      	cmp	r4, r3
  4021a2:	d201      	bcs.n	4021a8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <prvAddCurrentTaskToDelayedList+0x50>)
  4021a6:	601c      	str	r4, [r3, #0]
  4021a8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021aa:	4b09      	ldr	r3, [pc, #36]	; (4021d0 <prvAddCurrentTaskToDelayedList+0x54>)
  4021ac:	6818      	ldr	r0, [r3, #0]
  4021ae:	4b03      	ldr	r3, [pc, #12]	; (4021bc <prvAddCurrentTaskToDelayedList+0x40>)
  4021b0:	6819      	ldr	r1, [r3, #0]
  4021b2:	3104      	adds	r1, #4
  4021b4:	4b04      	ldr	r3, [pc, #16]	; (4021c8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4021b6:	4798      	blx	r3
  4021b8:	bd10      	pop	{r4, pc}
  4021ba:	bf00      	nop
  4021bc:	20400a68 	.word	0x20400a68
  4021c0:	20400b60 	.word	0x20400b60
  4021c4:	20400a6c 	.word	0x20400a6c
  4021c8:	0040147d 	.word	0x0040147d
  4021cc:	20400b18 	.word	0x20400b18
  4021d0:	20400a70 	.word	0x20400a70

004021d4 <xTaskGenericCreate>:
{
  4021d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021d8:	b083      	sub	sp, #12
  4021da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4021dc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4021e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4021e2:	b160      	cbz	r0, 4021fe <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4021e4:	2d04      	cmp	r5, #4
  4021e6:	d915      	bls.n	402214 <xTaskGenericCreate+0x40>
  4021e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ec:	b672      	cpsid	i
  4021ee:	f383 8811 	msr	BASEPRI, r3
  4021f2:	f3bf 8f6f 	isb	sy
  4021f6:	f3bf 8f4f 	dsb	sy
  4021fa:	b662      	cpsie	i
  4021fc:	e7fe      	b.n	4021fc <xTaskGenericCreate+0x28>
  4021fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402202:	b672      	cpsid	i
  402204:	f383 8811 	msr	BASEPRI, r3
  402208:	f3bf 8f6f 	isb	sy
  40220c:	f3bf 8f4f 	dsb	sy
  402210:	b662      	cpsie	i
  402212:	e7fe      	b.n	402212 <xTaskGenericCreate+0x3e>
  402214:	9001      	str	r0, [sp, #4]
  402216:	4698      	mov	r8, r3
  402218:	4691      	mov	r9, r2
  40221a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40221c:	b936      	cbnz	r6, 40222c <xTaskGenericCreate+0x58>
  40221e:	0090      	lsls	r0, r2, #2
  402220:	4b62      	ldr	r3, [pc, #392]	; (4023ac <xTaskGenericCreate+0x1d8>)
  402222:	4798      	blx	r3
		if( pxStack != NULL )
  402224:	4606      	mov	r6, r0
  402226:	2800      	cmp	r0, #0
  402228:	f000 809e 	beq.w	402368 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40222c:	2058      	movs	r0, #88	; 0x58
  40222e:	4b5f      	ldr	r3, [pc, #380]	; (4023ac <xTaskGenericCreate+0x1d8>)
  402230:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402232:	4604      	mov	r4, r0
  402234:	2800      	cmp	r0, #0
  402236:	f000 8094 	beq.w	402362 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40223a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40223c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402240:	21a5      	movs	r1, #165	; 0xa5
  402242:	4630      	mov	r0, r6
  402244:	4b5a      	ldr	r3, [pc, #360]	; (4023b0 <xTaskGenericCreate+0x1dc>)
  402246:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402248:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40224c:	444e      	add	r6, r9
  40224e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402250:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402254:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402258:	783b      	ldrb	r3, [r7, #0]
  40225a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40225e:	783b      	ldrb	r3, [r7, #0]
  402260:	2b00      	cmp	r3, #0
  402262:	f040 8084 	bne.w	40236e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402266:	2700      	movs	r7, #0
  402268:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40226c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40226e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402270:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402272:	f104 0904 	add.w	r9, r4, #4
  402276:	4648      	mov	r0, r9
  402278:	f8df b184 	ldr.w	fp, [pc, #388]	; 402400 <xTaskGenericCreate+0x22c>
  40227c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40227e:	f104 0018 	add.w	r0, r4, #24
  402282:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402284:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402286:	f1c5 0305 	rsb	r3, r5, #5
  40228a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40228c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40228e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402290:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402294:	4642      	mov	r2, r8
  402296:	9901      	ldr	r1, [sp, #4]
  402298:	4630      	mov	r0, r6
  40229a:	4b46      	ldr	r3, [pc, #280]	; (4023b4 <xTaskGenericCreate+0x1e0>)
  40229c:	4798      	blx	r3
  40229e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4022a0:	f1ba 0f00 	cmp.w	sl, #0
  4022a4:	d001      	beq.n	4022aa <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4022a6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4022aa:	4b43      	ldr	r3, [pc, #268]	; (4023b8 <xTaskGenericCreate+0x1e4>)
  4022ac:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022ae:	4a43      	ldr	r2, [pc, #268]	; (4023bc <xTaskGenericCreate+0x1e8>)
  4022b0:	6813      	ldr	r3, [r2, #0]
  4022b2:	3301      	adds	r3, #1
  4022b4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022b6:	4b42      	ldr	r3, [pc, #264]	; (4023c0 <xTaskGenericCreate+0x1ec>)
  4022b8:	681b      	ldr	r3, [r3, #0]
  4022ba:	2b00      	cmp	r3, #0
  4022bc:	d166      	bne.n	40238c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4022be:	4b40      	ldr	r3, [pc, #256]	; (4023c0 <xTaskGenericCreate+0x1ec>)
  4022c0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022c2:	6813      	ldr	r3, [r2, #0]
  4022c4:	2b01      	cmp	r3, #1
  4022c6:	d121      	bne.n	40230c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4022c8:	4f3e      	ldr	r7, [pc, #248]	; (4023c4 <xTaskGenericCreate+0x1f0>)
  4022ca:	4638      	mov	r0, r7
  4022cc:	4e3e      	ldr	r6, [pc, #248]	; (4023c8 <xTaskGenericCreate+0x1f4>)
  4022ce:	47b0      	blx	r6
  4022d0:	f107 0014 	add.w	r0, r7, #20
  4022d4:	47b0      	blx	r6
  4022d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4022da:	47b0      	blx	r6
  4022dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4022e0:	47b0      	blx	r6
  4022e2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4022e6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4022e8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402404 <xTaskGenericCreate+0x230>
  4022ec:	4640      	mov	r0, r8
  4022ee:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4022f0:	4f36      	ldr	r7, [pc, #216]	; (4023cc <xTaskGenericCreate+0x1f8>)
  4022f2:	4638      	mov	r0, r7
  4022f4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4022f6:	4836      	ldr	r0, [pc, #216]	; (4023d0 <xTaskGenericCreate+0x1fc>)
  4022f8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4022fa:	4836      	ldr	r0, [pc, #216]	; (4023d4 <xTaskGenericCreate+0x200>)
  4022fc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4022fe:	4836      	ldr	r0, [pc, #216]	; (4023d8 <xTaskGenericCreate+0x204>)
  402300:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402302:	4b36      	ldr	r3, [pc, #216]	; (4023dc <xTaskGenericCreate+0x208>)
  402304:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402308:	4b35      	ldr	r3, [pc, #212]	; (4023e0 <xTaskGenericCreate+0x20c>)
  40230a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40230c:	4a35      	ldr	r2, [pc, #212]	; (4023e4 <xTaskGenericCreate+0x210>)
  40230e:	6813      	ldr	r3, [r2, #0]
  402310:	3301      	adds	r3, #1
  402312:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402314:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402316:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402318:	4a33      	ldr	r2, [pc, #204]	; (4023e8 <xTaskGenericCreate+0x214>)
  40231a:	6811      	ldr	r1, [r2, #0]
  40231c:	2301      	movs	r3, #1
  40231e:	4083      	lsls	r3, r0
  402320:	430b      	orrs	r3, r1
  402322:	6013      	str	r3, [r2, #0]
  402324:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402328:	4649      	mov	r1, r9
  40232a:	4b26      	ldr	r3, [pc, #152]	; (4023c4 <xTaskGenericCreate+0x1f0>)
  40232c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402330:	4b2e      	ldr	r3, [pc, #184]	; (4023ec <xTaskGenericCreate+0x218>)
  402332:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402334:	4b2e      	ldr	r3, [pc, #184]	; (4023f0 <xTaskGenericCreate+0x21c>)
  402336:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402338:	4b2e      	ldr	r3, [pc, #184]	; (4023f4 <xTaskGenericCreate+0x220>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	2b00      	cmp	r3, #0
  40233e:	d031      	beq.n	4023a4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402340:	4b1f      	ldr	r3, [pc, #124]	; (4023c0 <xTaskGenericCreate+0x1ec>)
  402342:	681b      	ldr	r3, [r3, #0]
  402344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402346:	429d      	cmp	r5, r3
  402348:	d92e      	bls.n	4023a8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40234a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40234e:	4b2a      	ldr	r3, [pc, #168]	; (4023f8 <xTaskGenericCreate+0x224>)
  402350:	601a      	str	r2, [r3, #0]
  402352:	f3bf 8f4f 	dsb	sy
  402356:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40235a:	2001      	movs	r0, #1
}
  40235c:	b003      	add	sp, #12
  40235e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402362:	4630      	mov	r0, r6
  402364:	4b25      	ldr	r3, [pc, #148]	; (4023fc <xTaskGenericCreate+0x228>)
  402366:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402368:	f04f 30ff 	mov.w	r0, #4294967295
  40236c:	e7f6      	b.n	40235c <xTaskGenericCreate+0x188>
  40236e:	463b      	mov	r3, r7
  402370:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402374:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402376:	7859      	ldrb	r1, [r3, #1]
  402378:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40237c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402380:	2900      	cmp	r1, #0
  402382:	f43f af70 	beq.w	402266 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402386:	42bb      	cmp	r3, r7
  402388:	d1f5      	bne.n	402376 <xTaskGenericCreate+0x1a2>
  40238a:	e76c      	b.n	402266 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40238c:	4b19      	ldr	r3, [pc, #100]	; (4023f4 <xTaskGenericCreate+0x220>)
  40238e:	681b      	ldr	r3, [r3, #0]
  402390:	2b00      	cmp	r3, #0
  402392:	d1bb      	bne.n	40230c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402394:	4b0a      	ldr	r3, [pc, #40]	; (4023c0 <xTaskGenericCreate+0x1ec>)
  402396:	681b      	ldr	r3, [r3, #0]
  402398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40239a:	429d      	cmp	r5, r3
  40239c:	d3b6      	bcc.n	40230c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40239e:	4b08      	ldr	r3, [pc, #32]	; (4023c0 <xTaskGenericCreate+0x1ec>)
  4023a0:	601c      	str	r4, [r3, #0]
  4023a2:	e7b3      	b.n	40230c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4023a4:	2001      	movs	r0, #1
  4023a6:	e7d9      	b.n	40235c <xTaskGenericCreate+0x188>
  4023a8:	2001      	movs	r0, #1
	return xReturn;
  4023aa:	e7d7      	b.n	40235c <xTaskGenericCreate+0x188>
  4023ac:	004017f1 	.word	0x004017f1
  4023b0:	00403fd5 	.word	0x00403fd5
  4023b4:	00401549 	.word	0x00401549
  4023b8:	00401595 	.word	0x00401595
  4023bc:	20400ad8 	.word	0x20400ad8
  4023c0:	20400a68 	.word	0x20400a68
  4023c4:	20400a74 	.word	0x20400a74
  4023c8:	00401449 	.word	0x00401449
  4023cc:	20400b04 	.word	0x20400b04
  4023d0:	20400b20 	.word	0x20400b20
  4023d4:	20400b4c 	.word	0x20400b4c
  4023d8:	20400b38 	.word	0x20400b38
  4023dc:	20400a6c 	.word	0x20400a6c
  4023e0:	20400a70 	.word	0x20400a70
  4023e4:	20400ae4 	.word	0x20400ae4
  4023e8:	20400aec 	.word	0x20400aec
  4023ec:	00401465 	.word	0x00401465
  4023f0:	004015e1 	.word	0x004015e1
  4023f4:	20400b34 	.word	0x20400b34
  4023f8:	e000ed04 	.word	0xe000ed04
  4023fc:	00401821 	.word	0x00401821
  402400:	0040145f 	.word	0x0040145f
  402404:	20400af0 	.word	0x20400af0

00402408 <vTaskStartScheduler>:
{
  402408:	b510      	push	{r4, lr}
  40240a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40240c:	2300      	movs	r3, #0
  40240e:	9303      	str	r3, [sp, #12]
  402410:	9302      	str	r3, [sp, #8]
  402412:	9301      	str	r3, [sp, #4]
  402414:	9300      	str	r3, [sp, #0]
  402416:	2282      	movs	r2, #130	; 0x82
  402418:	4916      	ldr	r1, [pc, #88]	; (402474 <vTaskStartScheduler+0x6c>)
  40241a:	4817      	ldr	r0, [pc, #92]	; (402478 <vTaskStartScheduler+0x70>)
  40241c:	4c17      	ldr	r4, [pc, #92]	; (40247c <vTaskStartScheduler+0x74>)
  40241e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402420:	2801      	cmp	r0, #1
  402422:	d00b      	beq.n	40243c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402424:	bb20      	cbnz	r0, 402470 <vTaskStartScheduler+0x68>
  402426:	f04f 0380 	mov.w	r3, #128	; 0x80
  40242a:	b672      	cpsid	i
  40242c:	f383 8811 	msr	BASEPRI, r3
  402430:	f3bf 8f6f 	isb	sy
  402434:	f3bf 8f4f 	dsb	sy
  402438:	b662      	cpsie	i
  40243a:	e7fe      	b.n	40243a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  40243c:	4b10      	ldr	r3, [pc, #64]	; (402480 <vTaskStartScheduler+0x78>)
  40243e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402440:	2801      	cmp	r0, #1
  402442:	d1ef      	bne.n	402424 <vTaskStartScheduler+0x1c>
  402444:	f04f 0380 	mov.w	r3, #128	; 0x80
  402448:	b672      	cpsid	i
  40244a:	f383 8811 	msr	BASEPRI, r3
  40244e:	f3bf 8f6f 	isb	sy
  402452:	f3bf 8f4f 	dsb	sy
  402456:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402458:	f04f 32ff 	mov.w	r2, #4294967295
  40245c:	4b09      	ldr	r3, [pc, #36]	; (402484 <vTaskStartScheduler+0x7c>)
  40245e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402460:	2201      	movs	r2, #1
  402462:	4b09      	ldr	r3, [pc, #36]	; (402488 <vTaskStartScheduler+0x80>)
  402464:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402466:	2200      	movs	r2, #0
  402468:	4b08      	ldr	r3, [pc, #32]	; (40248c <vTaskStartScheduler+0x84>)
  40246a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40246c:	4b08      	ldr	r3, [pc, #32]	; (402490 <vTaskStartScheduler+0x88>)
  40246e:	4798      	blx	r3
}
  402470:	b004      	add	sp, #16
  402472:	bd10      	pop	{r4, pc}
  402474:	00406858 	.word	0x00406858
  402478:	004027ad 	.word	0x004027ad
  40247c:	004021d5 	.word	0x004021d5
  402480:	00402ded 	.word	0x00402ded
  402484:	20400b18 	.word	0x20400b18
  402488:	20400b34 	.word	0x20400b34
  40248c:	20400b60 	.word	0x20400b60
  402490:	004016c9 	.word	0x004016c9

00402494 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402494:	4a02      	ldr	r2, [pc, #8]	; (4024a0 <vTaskSuspendAll+0xc>)
  402496:	6813      	ldr	r3, [r2, #0]
  402498:	3301      	adds	r3, #1
  40249a:	6013      	str	r3, [r2, #0]
  40249c:	4770      	bx	lr
  40249e:	bf00      	nop
  4024a0:	20400ae0 	.word	0x20400ae0

004024a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4024a4:	4b01      	ldr	r3, [pc, #4]	; (4024ac <xTaskGetTickCount+0x8>)
  4024a6:	6818      	ldr	r0, [r3, #0]
}
  4024a8:	4770      	bx	lr
  4024aa:	bf00      	nop
  4024ac:	20400b60 	.word	0x20400b60

004024b0 <xTaskIncrementTick>:
{
  4024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024b4:	4b42      	ldr	r3, [pc, #264]	; (4025c0 <xTaskIncrementTick+0x110>)
  4024b6:	681b      	ldr	r3, [r3, #0]
  4024b8:	2b00      	cmp	r3, #0
  4024ba:	d178      	bne.n	4025ae <xTaskIncrementTick+0xfe>
		++xTickCount;
  4024bc:	4b41      	ldr	r3, [pc, #260]	; (4025c4 <xTaskIncrementTick+0x114>)
  4024be:	681a      	ldr	r2, [r3, #0]
  4024c0:	3201      	adds	r2, #1
  4024c2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4024c4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4024c6:	b9d6      	cbnz	r6, 4024fe <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4024c8:	4b3f      	ldr	r3, [pc, #252]	; (4025c8 <xTaskIncrementTick+0x118>)
  4024ca:	681b      	ldr	r3, [r3, #0]
  4024cc:	681b      	ldr	r3, [r3, #0]
  4024ce:	b153      	cbz	r3, 4024e6 <xTaskIncrementTick+0x36>
  4024d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024d4:	b672      	cpsid	i
  4024d6:	f383 8811 	msr	BASEPRI, r3
  4024da:	f3bf 8f6f 	isb	sy
  4024de:	f3bf 8f4f 	dsb	sy
  4024e2:	b662      	cpsie	i
  4024e4:	e7fe      	b.n	4024e4 <xTaskIncrementTick+0x34>
  4024e6:	4a38      	ldr	r2, [pc, #224]	; (4025c8 <xTaskIncrementTick+0x118>)
  4024e8:	6811      	ldr	r1, [r2, #0]
  4024ea:	4b38      	ldr	r3, [pc, #224]	; (4025cc <xTaskIncrementTick+0x11c>)
  4024ec:	6818      	ldr	r0, [r3, #0]
  4024ee:	6010      	str	r0, [r2, #0]
  4024f0:	6019      	str	r1, [r3, #0]
  4024f2:	4a37      	ldr	r2, [pc, #220]	; (4025d0 <xTaskIncrementTick+0x120>)
  4024f4:	6813      	ldr	r3, [r2, #0]
  4024f6:	3301      	adds	r3, #1
  4024f8:	6013      	str	r3, [r2, #0]
  4024fa:	4b36      	ldr	r3, [pc, #216]	; (4025d4 <xTaskIncrementTick+0x124>)
  4024fc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4024fe:	4b36      	ldr	r3, [pc, #216]	; (4025d8 <xTaskIncrementTick+0x128>)
  402500:	681b      	ldr	r3, [r3, #0]
  402502:	429e      	cmp	r6, r3
  402504:	d218      	bcs.n	402538 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402506:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402508:	4b34      	ldr	r3, [pc, #208]	; (4025dc <xTaskIncrementTick+0x12c>)
  40250a:	681b      	ldr	r3, [r3, #0]
  40250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40250e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402512:	4a33      	ldr	r2, [pc, #204]	; (4025e0 <xTaskIncrementTick+0x130>)
  402514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402518:	2b02      	cmp	r3, #2
  40251a:	bf28      	it	cs
  40251c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40251e:	4b31      	ldr	r3, [pc, #196]	; (4025e4 <xTaskIncrementTick+0x134>)
  402520:	681b      	ldr	r3, [r3, #0]
  402522:	b90b      	cbnz	r3, 402528 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402524:	4b30      	ldr	r3, [pc, #192]	; (4025e8 <xTaskIncrementTick+0x138>)
  402526:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402528:	4b30      	ldr	r3, [pc, #192]	; (4025ec <xTaskIncrementTick+0x13c>)
  40252a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40252c:	2b00      	cmp	r3, #0
}
  40252e:	bf0c      	ite	eq
  402530:	4620      	moveq	r0, r4
  402532:	2001      	movne	r0, #1
  402534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402538:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40253a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4025c8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40253e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4025f8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402542:	4f2b      	ldr	r7, [pc, #172]	; (4025f0 <xTaskIncrementTick+0x140>)
  402544:	e01f      	b.n	402586 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402546:	f04f 32ff 	mov.w	r2, #4294967295
  40254a:	4b23      	ldr	r3, [pc, #140]	; (4025d8 <xTaskIncrementTick+0x128>)
  40254c:	601a      	str	r2, [r3, #0]
						break;
  40254e:	e7db      	b.n	402508 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402550:	4a21      	ldr	r2, [pc, #132]	; (4025d8 <xTaskIncrementTick+0x128>)
  402552:	6013      	str	r3, [r2, #0]
							break;
  402554:	e7d8      	b.n	402508 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402556:	f105 0018 	add.w	r0, r5, #24
  40255a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40255c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40255e:	683a      	ldr	r2, [r7, #0]
  402560:	2301      	movs	r3, #1
  402562:	4083      	lsls	r3, r0
  402564:	4313      	orrs	r3, r2
  402566:	603b      	str	r3, [r7, #0]
  402568:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40256c:	4651      	mov	r1, sl
  40256e:	4b1c      	ldr	r3, [pc, #112]	; (4025e0 <xTaskIncrementTick+0x130>)
  402570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402574:	4b1f      	ldr	r3, [pc, #124]	; (4025f4 <xTaskIncrementTick+0x144>)
  402576:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402578:	4b18      	ldr	r3, [pc, #96]	; (4025dc <xTaskIncrementTick+0x12c>)
  40257a:	681b      	ldr	r3, [r3, #0]
  40257c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402580:	429a      	cmp	r2, r3
  402582:	bf28      	it	cs
  402584:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402586:	f8d9 3000 	ldr.w	r3, [r9]
  40258a:	681b      	ldr	r3, [r3, #0]
  40258c:	2b00      	cmp	r3, #0
  40258e:	d0da      	beq.n	402546 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402590:	f8d9 3000 	ldr.w	r3, [r9]
  402594:	68db      	ldr	r3, [r3, #12]
  402596:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402598:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40259a:	429e      	cmp	r6, r3
  40259c:	d3d8      	bcc.n	402550 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40259e:	f105 0a04 	add.w	sl, r5, #4
  4025a2:	4650      	mov	r0, sl
  4025a4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4025a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	d1d4      	bne.n	402556 <xTaskIncrementTick+0xa6>
  4025ac:	e7d6      	b.n	40255c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4025ae:	4a0d      	ldr	r2, [pc, #52]	; (4025e4 <xTaskIncrementTick+0x134>)
  4025b0:	6813      	ldr	r3, [r2, #0]
  4025b2:	3301      	adds	r3, #1
  4025b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4025b6:	4b0c      	ldr	r3, [pc, #48]	; (4025e8 <xTaskIncrementTick+0x138>)
  4025b8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4025ba:	2400      	movs	r4, #0
  4025bc:	e7b4      	b.n	402528 <xTaskIncrementTick+0x78>
  4025be:	bf00      	nop
  4025c0:	20400ae0 	.word	0x20400ae0
  4025c4:	20400b60 	.word	0x20400b60
  4025c8:	20400a6c 	.word	0x20400a6c
  4025cc:	20400a70 	.word	0x20400a70
  4025d0:	20400b1c 	.word	0x20400b1c
  4025d4:	00402151 	.word	0x00402151
  4025d8:	20400b18 	.word	0x20400b18
  4025dc:	20400a68 	.word	0x20400a68
  4025e0:	20400a74 	.word	0x20400a74
  4025e4:	20400adc 	.word	0x20400adc
  4025e8:	004034a9 	.word	0x004034a9
  4025ec:	20400b64 	.word	0x20400b64
  4025f0:	20400aec 	.word	0x20400aec
  4025f4:	00401465 	.word	0x00401465
  4025f8:	004014b1 	.word	0x004014b1

004025fc <xTaskResumeAll>:
{
  4025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402600:	4b38      	ldr	r3, [pc, #224]	; (4026e4 <xTaskResumeAll+0xe8>)
  402602:	681b      	ldr	r3, [r3, #0]
  402604:	b953      	cbnz	r3, 40261c <xTaskResumeAll+0x20>
  402606:	f04f 0380 	mov.w	r3, #128	; 0x80
  40260a:	b672      	cpsid	i
  40260c:	f383 8811 	msr	BASEPRI, r3
  402610:	f3bf 8f6f 	isb	sy
  402614:	f3bf 8f4f 	dsb	sy
  402618:	b662      	cpsie	i
  40261a:	e7fe      	b.n	40261a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  40261c:	4b32      	ldr	r3, [pc, #200]	; (4026e8 <xTaskResumeAll+0xec>)
  40261e:	4798      	blx	r3
		--uxSchedulerSuspended;
  402620:	4b30      	ldr	r3, [pc, #192]	; (4026e4 <xTaskResumeAll+0xe8>)
  402622:	681a      	ldr	r2, [r3, #0]
  402624:	3a01      	subs	r2, #1
  402626:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402628:	681b      	ldr	r3, [r3, #0]
  40262a:	2b00      	cmp	r3, #0
  40262c:	d155      	bne.n	4026da <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40262e:	4b2f      	ldr	r3, [pc, #188]	; (4026ec <xTaskResumeAll+0xf0>)
  402630:	681b      	ldr	r3, [r3, #0]
  402632:	2b00      	cmp	r3, #0
  402634:	d132      	bne.n	40269c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402636:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402638:	4b2d      	ldr	r3, [pc, #180]	; (4026f0 <xTaskResumeAll+0xf4>)
  40263a:	4798      	blx	r3
}
  40263c:	4620      	mov	r0, r4
  40263e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402642:	68fb      	ldr	r3, [r7, #12]
  402644:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402646:	f104 0018 	add.w	r0, r4, #24
  40264a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40264c:	f104 0804 	add.w	r8, r4, #4
  402650:	4640      	mov	r0, r8
  402652:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402654:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402656:	682a      	ldr	r2, [r5, #0]
  402658:	2301      	movs	r3, #1
  40265a:	4083      	lsls	r3, r0
  40265c:	4313      	orrs	r3, r2
  40265e:	602b      	str	r3, [r5, #0]
  402660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402664:	4641      	mov	r1, r8
  402666:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40266a:	4b22      	ldr	r3, [pc, #136]	; (4026f4 <xTaskResumeAll+0xf8>)
  40266c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40266e:	4b22      	ldr	r3, [pc, #136]	; (4026f8 <xTaskResumeAll+0xfc>)
  402670:	681b      	ldr	r3, [r3, #0]
  402672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402676:	429a      	cmp	r2, r3
  402678:	d20c      	bcs.n	402694 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40267a:	683b      	ldr	r3, [r7, #0]
  40267c:	2b00      	cmp	r3, #0
  40267e:	d1e0      	bne.n	402642 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402680:	4b1e      	ldr	r3, [pc, #120]	; (4026fc <xTaskResumeAll+0x100>)
  402682:	681b      	ldr	r3, [r3, #0]
  402684:	b1db      	cbz	r3, 4026be <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402686:	4b1d      	ldr	r3, [pc, #116]	; (4026fc <xTaskResumeAll+0x100>)
  402688:	681b      	ldr	r3, [r3, #0]
  40268a:	b1c3      	cbz	r3, 4026be <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40268c:	4e1c      	ldr	r6, [pc, #112]	; (402700 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40268e:	4d1d      	ldr	r5, [pc, #116]	; (402704 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402690:	4c1a      	ldr	r4, [pc, #104]	; (4026fc <xTaskResumeAll+0x100>)
  402692:	e00e      	b.n	4026b2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402694:	2201      	movs	r2, #1
  402696:	4b1b      	ldr	r3, [pc, #108]	; (402704 <xTaskResumeAll+0x108>)
  402698:	601a      	str	r2, [r3, #0]
  40269a:	e7ee      	b.n	40267a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40269c:	4f1a      	ldr	r7, [pc, #104]	; (402708 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40269e:	4e1b      	ldr	r6, [pc, #108]	; (40270c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4026a0:	4d1b      	ldr	r5, [pc, #108]	; (402710 <xTaskResumeAll+0x114>)
  4026a2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402718 <xTaskResumeAll+0x11c>
  4026a6:	e7e8      	b.n	40267a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4026a8:	6823      	ldr	r3, [r4, #0]
  4026aa:	3b01      	subs	r3, #1
  4026ac:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4026ae:	6823      	ldr	r3, [r4, #0]
  4026b0:	b12b      	cbz	r3, 4026be <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4026b2:	47b0      	blx	r6
  4026b4:	2800      	cmp	r0, #0
  4026b6:	d0f7      	beq.n	4026a8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4026b8:	2301      	movs	r3, #1
  4026ba:	602b      	str	r3, [r5, #0]
  4026bc:	e7f4      	b.n	4026a8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4026be:	4b11      	ldr	r3, [pc, #68]	; (402704 <xTaskResumeAll+0x108>)
  4026c0:	681b      	ldr	r3, [r3, #0]
  4026c2:	2b01      	cmp	r3, #1
  4026c4:	d10b      	bne.n	4026de <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4026c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026ca:	4b12      	ldr	r3, [pc, #72]	; (402714 <xTaskResumeAll+0x118>)
  4026cc:	601a      	str	r2, [r3, #0]
  4026ce:	f3bf 8f4f 	dsb	sy
  4026d2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4026d6:	2401      	movs	r4, #1
  4026d8:	e7ae      	b.n	402638 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4026da:	2400      	movs	r4, #0
  4026dc:	e7ac      	b.n	402638 <xTaskResumeAll+0x3c>
  4026de:	2400      	movs	r4, #0
  4026e0:	e7aa      	b.n	402638 <xTaskResumeAll+0x3c>
  4026e2:	bf00      	nop
  4026e4:	20400ae0 	.word	0x20400ae0
  4026e8:	00401595 	.word	0x00401595
  4026ec:	20400ad8 	.word	0x20400ad8
  4026f0:	004015e1 	.word	0x004015e1
  4026f4:	00401465 	.word	0x00401465
  4026f8:	20400a68 	.word	0x20400a68
  4026fc:	20400adc 	.word	0x20400adc
  402700:	004024b1 	.word	0x004024b1
  402704:	20400b64 	.word	0x20400b64
  402708:	20400b20 	.word	0x20400b20
  40270c:	004014b1 	.word	0x004014b1
  402710:	20400aec 	.word	0x20400aec
  402714:	e000ed04 	.word	0xe000ed04
  402718:	20400a74 	.word	0x20400a74

0040271c <vTaskDelay>:
	{
  40271c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40271e:	2800      	cmp	r0, #0
  402720:	d029      	beq.n	402776 <vTaskDelay+0x5a>
  402722:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402724:	4b18      	ldr	r3, [pc, #96]	; (402788 <vTaskDelay+0x6c>)
  402726:	681b      	ldr	r3, [r3, #0]
  402728:	b153      	cbz	r3, 402740 <vTaskDelay+0x24>
  40272a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272e:	b672      	cpsid	i
  402730:	f383 8811 	msr	BASEPRI, r3
  402734:	f3bf 8f6f 	isb	sy
  402738:	f3bf 8f4f 	dsb	sy
  40273c:	b662      	cpsie	i
  40273e:	e7fe      	b.n	40273e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402740:	4b12      	ldr	r3, [pc, #72]	; (40278c <vTaskDelay+0x70>)
  402742:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402744:	4b12      	ldr	r3, [pc, #72]	; (402790 <vTaskDelay+0x74>)
  402746:	681b      	ldr	r3, [r3, #0]
  402748:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40274a:	4b12      	ldr	r3, [pc, #72]	; (402794 <vTaskDelay+0x78>)
  40274c:	6818      	ldr	r0, [r3, #0]
  40274e:	3004      	adds	r0, #4
  402750:	4b11      	ldr	r3, [pc, #68]	; (402798 <vTaskDelay+0x7c>)
  402752:	4798      	blx	r3
  402754:	b948      	cbnz	r0, 40276a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402756:	4b0f      	ldr	r3, [pc, #60]	; (402794 <vTaskDelay+0x78>)
  402758:	681a      	ldr	r2, [r3, #0]
  40275a:	4910      	ldr	r1, [pc, #64]	; (40279c <vTaskDelay+0x80>)
  40275c:	680b      	ldr	r3, [r1, #0]
  40275e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402760:	2201      	movs	r2, #1
  402762:	4082      	lsls	r2, r0
  402764:	ea23 0302 	bic.w	r3, r3, r2
  402768:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40276a:	4620      	mov	r0, r4
  40276c:	4b0c      	ldr	r3, [pc, #48]	; (4027a0 <vTaskDelay+0x84>)
  40276e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402770:	4b0c      	ldr	r3, [pc, #48]	; (4027a4 <vTaskDelay+0x88>)
  402772:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402774:	b938      	cbnz	r0, 402786 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40277a:	4b0b      	ldr	r3, [pc, #44]	; (4027a8 <vTaskDelay+0x8c>)
  40277c:	601a      	str	r2, [r3, #0]
  40277e:	f3bf 8f4f 	dsb	sy
  402782:	f3bf 8f6f 	isb	sy
  402786:	bd10      	pop	{r4, pc}
  402788:	20400ae0 	.word	0x20400ae0
  40278c:	00402495 	.word	0x00402495
  402790:	20400b60 	.word	0x20400b60
  402794:	20400a68 	.word	0x20400a68
  402798:	004014b1 	.word	0x004014b1
  40279c:	20400aec 	.word	0x20400aec
  4027a0:	0040217d 	.word	0x0040217d
  4027a4:	004025fd 	.word	0x004025fd
  4027a8:	e000ed04 	.word	0xe000ed04

004027ac <prvIdleTask>:
{
  4027ac:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4027ae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402838 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027b2:	4e19      	ldr	r6, [pc, #100]	; (402818 <prvIdleTask+0x6c>)
				taskYIELD();
  4027b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40283c <prvIdleTask+0x90>
  4027b8:	e02a      	b.n	402810 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027ba:	4b18      	ldr	r3, [pc, #96]	; (40281c <prvIdleTask+0x70>)
  4027bc:	681b      	ldr	r3, [r3, #0]
  4027be:	2b01      	cmp	r3, #1
  4027c0:	d81e      	bhi.n	402800 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4027c2:	682b      	ldr	r3, [r5, #0]
  4027c4:	2b00      	cmp	r3, #0
  4027c6:	d0f8      	beq.n	4027ba <prvIdleTask+0xe>
			vTaskSuspendAll();
  4027c8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027ca:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4027cc:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4027ce:	2c00      	cmp	r4, #0
  4027d0:	d0f7      	beq.n	4027c2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4027d2:	4b13      	ldr	r3, [pc, #76]	; (402820 <prvIdleTask+0x74>)
  4027d4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4027d6:	68f3      	ldr	r3, [r6, #12]
  4027d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027da:	1d20      	adds	r0, r4, #4
  4027dc:	4b11      	ldr	r3, [pc, #68]	; (402824 <prvIdleTask+0x78>)
  4027de:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4027e0:	4a11      	ldr	r2, [pc, #68]	; (402828 <prvIdleTask+0x7c>)
  4027e2:	6813      	ldr	r3, [r2, #0]
  4027e4:	3b01      	subs	r3, #1
  4027e6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4027e8:	682b      	ldr	r3, [r5, #0]
  4027ea:	3b01      	subs	r3, #1
  4027ec:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4027ee:	4b0f      	ldr	r3, [pc, #60]	; (40282c <prvIdleTask+0x80>)
  4027f0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4027f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4027f4:	f8df a048 	ldr.w	sl, [pc, #72]	; 402840 <prvIdleTask+0x94>
  4027f8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4027fa:	4620      	mov	r0, r4
  4027fc:	47d0      	blx	sl
  4027fe:	e7e0      	b.n	4027c2 <prvIdleTask+0x16>
				taskYIELD();
  402800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402804:	f8c9 3000 	str.w	r3, [r9]
  402808:	f3bf 8f4f 	dsb	sy
  40280c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402810:	4d07      	ldr	r5, [pc, #28]	; (402830 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402812:	4f08      	ldr	r7, [pc, #32]	; (402834 <prvIdleTask+0x88>)
  402814:	e7d5      	b.n	4027c2 <prvIdleTask+0x16>
  402816:	bf00      	nop
  402818:	20400b4c 	.word	0x20400b4c
  40281c:	20400a74 	.word	0x20400a74
  402820:	00401595 	.word	0x00401595
  402824:	004014b1 	.word	0x004014b1
  402828:	20400ad8 	.word	0x20400ad8
  40282c:	004015e1 	.word	0x004015e1
  402830:	20400ae8 	.word	0x20400ae8
  402834:	004025fd 	.word	0x004025fd
  402838:	00402495 	.word	0x00402495
  40283c:	e000ed04 	.word	0xe000ed04
  402840:	00401821 	.word	0x00401821

00402844 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402844:	4b2d      	ldr	r3, [pc, #180]	; (4028fc <vTaskSwitchContext+0xb8>)
  402846:	681b      	ldr	r3, [r3, #0]
  402848:	2b00      	cmp	r3, #0
  40284a:	d12c      	bne.n	4028a6 <vTaskSwitchContext+0x62>
{
  40284c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40284e:	2200      	movs	r2, #0
  402850:	4b2b      	ldr	r3, [pc, #172]	; (402900 <vTaskSwitchContext+0xbc>)
  402852:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402854:	4b2b      	ldr	r3, [pc, #172]	; (402904 <vTaskSwitchContext+0xc0>)
  402856:	681b      	ldr	r3, [r3, #0]
  402858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40285a:	681a      	ldr	r2, [r3, #0]
  40285c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402860:	d103      	bne.n	40286a <vTaskSwitchContext+0x26>
  402862:	685a      	ldr	r2, [r3, #4]
  402864:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402868:	d021      	beq.n	4028ae <vTaskSwitchContext+0x6a>
  40286a:	4b26      	ldr	r3, [pc, #152]	; (402904 <vTaskSwitchContext+0xc0>)
  40286c:	6818      	ldr	r0, [r3, #0]
  40286e:	6819      	ldr	r1, [r3, #0]
  402870:	3134      	adds	r1, #52	; 0x34
  402872:	4b25      	ldr	r3, [pc, #148]	; (402908 <vTaskSwitchContext+0xc4>)
  402874:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402876:	4b25      	ldr	r3, [pc, #148]	; (40290c <vTaskSwitchContext+0xc8>)
  402878:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40287a:	fab3 f383 	clz	r3, r3
  40287e:	b2db      	uxtb	r3, r3
  402880:	f1c3 031f 	rsb	r3, r3, #31
  402884:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402888:	4a21      	ldr	r2, [pc, #132]	; (402910 <vTaskSwitchContext+0xcc>)
  40288a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40288e:	b9ba      	cbnz	r2, 4028c0 <vTaskSwitchContext+0x7c>
	__asm volatile
  402890:	f04f 0380 	mov.w	r3, #128	; 0x80
  402894:	b672      	cpsid	i
  402896:	f383 8811 	msr	BASEPRI, r3
  40289a:	f3bf 8f6f 	isb	sy
  40289e:	f3bf 8f4f 	dsb	sy
  4028a2:	b662      	cpsie	i
  4028a4:	e7fe      	b.n	4028a4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4028a6:	2201      	movs	r2, #1
  4028a8:	4b15      	ldr	r3, [pc, #84]	; (402900 <vTaskSwitchContext+0xbc>)
  4028aa:	601a      	str	r2, [r3, #0]
  4028ac:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4028ae:	689a      	ldr	r2, [r3, #8]
  4028b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4028b4:	d1d9      	bne.n	40286a <vTaskSwitchContext+0x26>
  4028b6:	68db      	ldr	r3, [r3, #12]
  4028b8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4028bc:	d1d5      	bne.n	40286a <vTaskSwitchContext+0x26>
  4028be:	e7da      	b.n	402876 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4028c0:	4a13      	ldr	r2, [pc, #76]	; (402910 <vTaskSwitchContext+0xcc>)
  4028c2:	0099      	lsls	r1, r3, #2
  4028c4:	18c8      	adds	r0, r1, r3
  4028c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4028ca:	6844      	ldr	r4, [r0, #4]
  4028cc:	6864      	ldr	r4, [r4, #4]
  4028ce:	6044      	str	r4, [r0, #4]
  4028d0:	4419      	add	r1, r3
  4028d2:	4602      	mov	r2, r0
  4028d4:	3208      	adds	r2, #8
  4028d6:	4294      	cmp	r4, r2
  4028d8:	d009      	beq.n	4028ee <vTaskSwitchContext+0xaa>
  4028da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028de:	4a0c      	ldr	r2, [pc, #48]	; (402910 <vTaskSwitchContext+0xcc>)
  4028e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028e4:	685b      	ldr	r3, [r3, #4]
  4028e6:	68da      	ldr	r2, [r3, #12]
  4028e8:	4b06      	ldr	r3, [pc, #24]	; (402904 <vTaskSwitchContext+0xc0>)
  4028ea:	601a      	str	r2, [r3, #0]
  4028ec:	bd10      	pop	{r4, pc}
  4028ee:	6860      	ldr	r0, [r4, #4]
  4028f0:	4a07      	ldr	r2, [pc, #28]	; (402910 <vTaskSwitchContext+0xcc>)
  4028f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4028f6:	6050      	str	r0, [r2, #4]
  4028f8:	e7ef      	b.n	4028da <vTaskSwitchContext+0x96>
  4028fa:	bf00      	nop
  4028fc:	20400ae0 	.word	0x20400ae0
  402900:	20400b64 	.word	0x20400b64
  402904:	20400a68 	.word	0x20400a68
  402908:	00403491 	.word	0x00403491
  40290c:	20400aec 	.word	0x20400aec
  402910:	20400a74 	.word	0x20400a74

00402914 <vTaskPlaceOnEventList>:
{
  402914:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402916:	b1e0      	cbz	r0, 402952 <vTaskPlaceOnEventList+0x3e>
  402918:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40291a:	4d17      	ldr	r5, [pc, #92]	; (402978 <vTaskPlaceOnEventList+0x64>)
  40291c:	6829      	ldr	r1, [r5, #0]
  40291e:	3118      	adds	r1, #24
  402920:	4b16      	ldr	r3, [pc, #88]	; (40297c <vTaskPlaceOnEventList+0x68>)
  402922:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402924:	6828      	ldr	r0, [r5, #0]
  402926:	3004      	adds	r0, #4
  402928:	4b15      	ldr	r3, [pc, #84]	; (402980 <vTaskPlaceOnEventList+0x6c>)
  40292a:	4798      	blx	r3
  40292c:	b940      	cbnz	r0, 402940 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40292e:	682a      	ldr	r2, [r5, #0]
  402930:	4914      	ldr	r1, [pc, #80]	; (402984 <vTaskPlaceOnEventList+0x70>)
  402932:	680b      	ldr	r3, [r1, #0]
  402934:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402936:	2201      	movs	r2, #1
  402938:	4082      	lsls	r2, r0
  40293a:	ea23 0302 	bic.w	r3, r3, r2
  40293e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402940:	f1b4 3fff 	cmp.w	r4, #4294967295
  402944:	d010      	beq.n	402968 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402946:	4b10      	ldr	r3, [pc, #64]	; (402988 <vTaskPlaceOnEventList+0x74>)
  402948:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40294a:	4420      	add	r0, r4
  40294c:	4b0f      	ldr	r3, [pc, #60]	; (40298c <vTaskPlaceOnEventList+0x78>)
  40294e:	4798      	blx	r3
  402950:	bd38      	pop	{r3, r4, r5, pc}
  402952:	f04f 0380 	mov.w	r3, #128	; 0x80
  402956:	b672      	cpsid	i
  402958:	f383 8811 	msr	BASEPRI, r3
  40295c:	f3bf 8f6f 	isb	sy
  402960:	f3bf 8f4f 	dsb	sy
  402964:	b662      	cpsie	i
  402966:	e7fe      	b.n	402966 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402968:	4b03      	ldr	r3, [pc, #12]	; (402978 <vTaskPlaceOnEventList+0x64>)
  40296a:	6819      	ldr	r1, [r3, #0]
  40296c:	3104      	adds	r1, #4
  40296e:	4808      	ldr	r0, [pc, #32]	; (402990 <vTaskPlaceOnEventList+0x7c>)
  402970:	4b08      	ldr	r3, [pc, #32]	; (402994 <vTaskPlaceOnEventList+0x80>)
  402972:	4798      	blx	r3
  402974:	bd38      	pop	{r3, r4, r5, pc}
  402976:	bf00      	nop
  402978:	20400a68 	.word	0x20400a68
  40297c:	0040147d 	.word	0x0040147d
  402980:	004014b1 	.word	0x004014b1
  402984:	20400aec 	.word	0x20400aec
  402988:	20400b60 	.word	0x20400b60
  40298c:	0040217d 	.word	0x0040217d
  402990:	20400b38 	.word	0x20400b38
  402994:	00401465 	.word	0x00401465

00402998 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402998:	b1e8      	cbz	r0, 4029d6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40299a:	b570      	push	{r4, r5, r6, lr}
  40299c:	4615      	mov	r5, r2
  40299e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4029a0:	4e16      	ldr	r6, [pc, #88]	; (4029fc <vTaskPlaceOnEventListRestricted+0x64>)
  4029a2:	6831      	ldr	r1, [r6, #0]
  4029a4:	3118      	adds	r1, #24
  4029a6:	4b16      	ldr	r3, [pc, #88]	; (402a00 <vTaskPlaceOnEventListRestricted+0x68>)
  4029a8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029aa:	6830      	ldr	r0, [r6, #0]
  4029ac:	3004      	adds	r0, #4
  4029ae:	4b15      	ldr	r3, [pc, #84]	; (402a04 <vTaskPlaceOnEventListRestricted+0x6c>)
  4029b0:	4798      	blx	r3
  4029b2:	b940      	cbnz	r0, 4029c6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029b4:	6832      	ldr	r2, [r6, #0]
  4029b6:	4914      	ldr	r1, [pc, #80]	; (402a08 <vTaskPlaceOnEventListRestricted+0x70>)
  4029b8:	680b      	ldr	r3, [r1, #0]
  4029ba:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4029bc:	2201      	movs	r2, #1
  4029be:	4082      	lsls	r2, r0
  4029c0:	ea23 0302 	bic.w	r3, r3, r2
  4029c4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4029c6:	2d01      	cmp	r5, #1
  4029c8:	d010      	beq.n	4029ec <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4029ca:	4b10      	ldr	r3, [pc, #64]	; (402a0c <vTaskPlaceOnEventListRestricted+0x74>)
  4029cc:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029ce:	4420      	add	r0, r4
  4029d0:	4b0f      	ldr	r3, [pc, #60]	; (402a10 <vTaskPlaceOnEventListRestricted+0x78>)
  4029d2:	4798      	blx	r3
  4029d4:	bd70      	pop	{r4, r5, r6, pc}
  4029d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029da:	b672      	cpsid	i
  4029dc:	f383 8811 	msr	BASEPRI, r3
  4029e0:	f3bf 8f6f 	isb	sy
  4029e4:	f3bf 8f4f 	dsb	sy
  4029e8:	b662      	cpsie	i
  4029ea:	e7fe      	b.n	4029ea <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4029ec:	4b03      	ldr	r3, [pc, #12]	; (4029fc <vTaskPlaceOnEventListRestricted+0x64>)
  4029ee:	6819      	ldr	r1, [r3, #0]
  4029f0:	3104      	adds	r1, #4
  4029f2:	4808      	ldr	r0, [pc, #32]	; (402a14 <vTaskPlaceOnEventListRestricted+0x7c>)
  4029f4:	4b02      	ldr	r3, [pc, #8]	; (402a00 <vTaskPlaceOnEventListRestricted+0x68>)
  4029f6:	4798      	blx	r3
  4029f8:	bd70      	pop	{r4, r5, r6, pc}
  4029fa:	bf00      	nop
  4029fc:	20400a68 	.word	0x20400a68
  402a00:	00401465 	.word	0x00401465
  402a04:	004014b1 	.word	0x004014b1
  402a08:	20400aec 	.word	0x20400aec
  402a0c:	20400b60 	.word	0x20400b60
  402a10:	0040217d 	.word	0x0040217d
  402a14:	20400b38 	.word	0x20400b38

00402a18 <xTaskRemoveFromEventList>:
{
  402a18:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402a1a:	68c3      	ldr	r3, [r0, #12]
  402a1c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402a1e:	b324      	cbz	r4, 402a6a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402a20:	f104 0518 	add.w	r5, r4, #24
  402a24:	4628      	mov	r0, r5
  402a26:	4b1a      	ldr	r3, [pc, #104]	; (402a90 <xTaskRemoveFromEventList+0x78>)
  402a28:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a2a:	4b1a      	ldr	r3, [pc, #104]	; (402a94 <xTaskRemoveFromEventList+0x7c>)
  402a2c:	681b      	ldr	r3, [r3, #0]
  402a2e:	bb3b      	cbnz	r3, 402a80 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402a30:	1d25      	adds	r5, r4, #4
  402a32:	4628      	mov	r0, r5
  402a34:	4b16      	ldr	r3, [pc, #88]	; (402a90 <xTaskRemoveFromEventList+0x78>)
  402a36:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402a38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a3a:	4a17      	ldr	r2, [pc, #92]	; (402a98 <xTaskRemoveFromEventList+0x80>)
  402a3c:	6811      	ldr	r1, [r2, #0]
  402a3e:	2301      	movs	r3, #1
  402a40:	4083      	lsls	r3, r0
  402a42:	430b      	orrs	r3, r1
  402a44:	6013      	str	r3, [r2, #0]
  402a46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a4a:	4629      	mov	r1, r5
  402a4c:	4b13      	ldr	r3, [pc, #76]	; (402a9c <xTaskRemoveFromEventList+0x84>)
  402a4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a52:	4b13      	ldr	r3, [pc, #76]	; (402aa0 <xTaskRemoveFromEventList+0x88>)
  402a54:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a56:	4b13      	ldr	r3, [pc, #76]	; (402aa4 <xTaskRemoveFromEventList+0x8c>)
  402a58:	681b      	ldr	r3, [r3, #0]
  402a5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a5e:	429a      	cmp	r2, r3
  402a60:	d913      	bls.n	402a8a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a62:	2001      	movs	r0, #1
  402a64:	4b10      	ldr	r3, [pc, #64]	; (402aa8 <xTaskRemoveFromEventList+0x90>)
  402a66:	6018      	str	r0, [r3, #0]
  402a68:	bd38      	pop	{r3, r4, r5, pc}
  402a6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a6e:	b672      	cpsid	i
  402a70:	f383 8811 	msr	BASEPRI, r3
  402a74:	f3bf 8f6f 	isb	sy
  402a78:	f3bf 8f4f 	dsb	sy
  402a7c:	b662      	cpsie	i
  402a7e:	e7fe      	b.n	402a7e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a80:	4629      	mov	r1, r5
  402a82:	480a      	ldr	r0, [pc, #40]	; (402aac <xTaskRemoveFromEventList+0x94>)
  402a84:	4b06      	ldr	r3, [pc, #24]	; (402aa0 <xTaskRemoveFromEventList+0x88>)
  402a86:	4798      	blx	r3
  402a88:	e7e5      	b.n	402a56 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402a8a:	2000      	movs	r0, #0
}
  402a8c:	bd38      	pop	{r3, r4, r5, pc}
  402a8e:	bf00      	nop
  402a90:	004014b1 	.word	0x004014b1
  402a94:	20400ae0 	.word	0x20400ae0
  402a98:	20400aec 	.word	0x20400aec
  402a9c:	20400a74 	.word	0x20400a74
  402aa0:	00401465 	.word	0x00401465
  402aa4:	20400a68 	.word	0x20400a68
  402aa8:	20400b64 	.word	0x20400b64
  402aac:	20400b20 	.word	0x20400b20

00402ab0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402ab0:	b130      	cbz	r0, 402ac0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402ab2:	4a09      	ldr	r2, [pc, #36]	; (402ad8 <vTaskSetTimeOutState+0x28>)
  402ab4:	6812      	ldr	r2, [r2, #0]
  402ab6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ab8:	4a08      	ldr	r2, [pc, #32]	; (402adc <vTaskSetTimeOutState+0x2c>)
  402aba:	6812      	ldr	r2, [r2, #0]
  402abc:	6042      	str	r2, [r0, #4]
  402abe:	4770      	bx	lr
  402ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac4:	b672      	cpsid	i
  402ac6:	f383 8811 	msr	BASEPRI, r3
  402aca:	f3bf 8f6f 	isb	sy
  402ace:	f3bf 8f4f 	dsb	sy
  402ad2:	b662      	cpsie	i
  402ad4:	e7fe      	b.n	402ad4 <vTaskSetTimeOutState+0x24>
  402ad6:	bf00      	nop
  402ad8:	20400b1c 	.word	0x20400b1c
  402adc:	20400b60 	.word	0x20400b60

00402ae0 <xTaskCheckForTimeOut>:
{
  402ae0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402ae2:	b1c0      	cbz	r0, 402b16 <xTaskCheckForTimeOut+0x36>
  402ae4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ae6:	b309      	cbz	r1, 402b2c <xTaskCheckForTimeOut+0x4c>
  402ae8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402aea:	4b1d      	ldr	r3, [pc, #116]	; (402b60 <xTaskCheckForTimeOut+0x80>)
  402aec:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402aee:	4b1d      	ldr	r3, [pc, #116]	; (402b64 <xTaskCheckForTimeOut+0x84>)
  402af0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402af2:	682b      	ldr	r3, [r5, #0]
  402af4:	f1b3 3fff 	cmp.w	r3, #4294967295
  402af8:	d02e      	beq.n	402b58 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402afa:	491b      	ldr	r1, [pc, #108]	; (402b68 <xTaskCheckForTimeOut+0x88>)
  402afc:	6809      	ldr	r1, [r1, #0]
  402afe:	6820      	ldr	r0, [r4, #0]
  402b00:	4288      	cmp	r0, r1
  402b02:	d002      	beq.n	402b0a <xTaskCheckForTimeOut+0x2a>
  402b04:	6861      	ldr	r1, [r4, #4]
  402b06:	428a      	cmp	r2, r1
  402b08:	d228      	bcs.n	402b5c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402b0a:	6861      	ldr	r1, [r4, #4]
  402b0c:	1a50      	subs	r0, r2, r1
  402b0e:	4283      	cmp	r3, r0
  402b10:	d817      	bhi.n	402b42 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402b12:	2401      	movs	r4, #1
  402b14:	e01c      	b.n	402b50 <xTaskCheckForTimeOut+0x70>
  402b16:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b1a:	b672      	cpsid	i
  402b1c:	f383 8811 	msr	BASEPRI, r3
  402b20:	f3bf 8f6f 	isb	sy
  402b24:	f3bf 8f4f 	dsb	sy
  402b28:	b662      	cpsie	i
  402b2a:	e7fe      	b.n	402b2a <xTaskCheckForTimeOut+0x4a>
  402b2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b30:	b672      	cpsid	i
  402b32:	f383 8811 	msr	BASEPRI, r3
  402b36:	f3bf 8f6f 	isb	sy
  402b3a:	f3bf 8f4f 	dsb	sy
  402b3e:	b662      	cpsie	i
  402b40:	e7fe      	b.n	402b40 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402b42:	1a9b      	subs	r3, r3, r2
  402b44:	440b      	add	r3, r1
  402b46:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402b48:	4620      	mov	r0, r4
  402b4a:	4b08      	ldr	r3, [pc, #32]	; (402b6c <xTaskCheckForTimeOut+0x8c>)
  402b4c:	4798      	blx	r3
			xReturn = pdFALSE;
  402b4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b50:	4b07      	ldr	r3, [pc, #28]	; (402b70 <xTaskCheckForTimeOut+0x90>)
  402b52:	4798      	blx	r3
}
  402b54:	4620      	mov	r0, r4
  402b56:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b58:	2400      	movs	r4, #0
  402b5a:	e7f9      	b.n	402b50 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b5c:	2401      	movs	r4, #1
  402b5e:	e7f7      	b.n	402b50 <xTaskCheckForTimeOut+0x70>
  402b60:	00401595 	.word	0x00401595
  402b64:	20400b60 	.word	0x20400b60
  402b68:	20400b1c 	.word	0x20400b1c
  402b6c:	00402ab1 	.word	0x00402ab1
  402b70:	004015e1 	.word	0x004015e1

00402b74 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b74:	2201      	movs	r2, #1
  402b76:	4b01      	ldr	r3, [pc, #4]	; (402b7c <vTaskMissedYield+0x8>)
  402b78:	601a      	str	r2, [r3, #0]
  402b7a:	4770      	bx	lr
  402b7c:	20400b64 	.word	0x20400b64

00402b80 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b80:	4b05      	ldr	r3, [pc, #20]	; (402b98 <xTaskGetSchedulerState+0x18>)
  402b82:	681b      	ldr	r3, [r3, #0]
  402b84:	b133      	cbz	r3, 402b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b86:	4b05      	ldr	r3, [pc, #20]	; (402b9c <xTaskGetSchedulerState+0x1c>)
  402b88:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402b8a:	2b00      	cmp	r3, #0
  402b8c:	bf0c      	ite	eq
  402b8e:	2002      	moveq	r0, #2
  402b90:	2000      	movne	r0, #0
  402b92:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402b94:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402b96:	4770      	bx	lr
  402b98:	20400b34 	.word	0x20400b34
  402b9c:	20400ae0 	.word	0x20400ae0

00402ba0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402ba0:	2800      	cmp	r0, #0
  402ba2:	d044      	beq.n	402c2e <vTaskPriorityInherit+0x8e>
	{
  402ba4:	b538      	push	{r3, r4, r5, lr}
  402ba6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402ba8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402baa:	4921      	ldr	r1, [pc, #132]	; (402c30 <vTaskPriorityInherit+0x90>)
  402bac:	6809      	ldr	r1, [r1, #0]
  402bae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bb0:	428a      	cmp	r2, r1
  402bb2:	d214      	bcs.n	402bde <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402bb4:	6981      	ldr	r1, [r0, #24]
  402bb6:	2900      	cmp	r1, #0
  402bb8:	db05      	blt.n	402bc6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bba:	491d      	ldr	r1, [pc, #116]	; (402c30 <vTaskPriorityInherit+0x90>)
  402bbc:	6809      	ldr	r1, [r1, #0]
  402bbe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bc0:	f1c1 0105 	rsb	r1, r1, #5
  402bc4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402bc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402bca:	491a      	ldr	r1, [pc, #104]	; (402c34 <vTaskPriorityInherit+0x94>)
  402bcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402bd0:	6961      	ldr	r1, [r4, #20]
  402bd2:	4291      	cmp	r1, r2
  402bd4:	d004      	beq.n	402be0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bd6:	4a16      	ldr	r2, [pc, #88]	; (402c30 <vTaskPriorityInherit+0x90>)
  402bd8:	6812      	ldr	r2, [r2, #0]
  402bda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402bdc:	62e2      	str	r2, [r4, #44]	; 0x2c
  402bde:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402be0:	1d25      	adds	r5, r4, #4
  402be2:	4628      	mov	r0, r5
  402be4:	4b14      	ldr	r3, [pc, #80]	; (402c38 <vTaskPriorityInherit+0x98>)
  402be6:	4798      	blx	r3
  402be8:	b970      	cbnz	r0, 402c08 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402bec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402bf0:	4a10      	ldr	r2, [pc, #64]	; (402c34 <vTaskPriorityInherit+0x94>)
  402bf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402bf6:	b93a      	cbnz	r2, 402c08 <vTaskPriorityInherit+0x68>
  402bf8:	4810      	ldr	r0, [pc, #64]	; (402c3c <vTaskPriorityInherit+0x9c>)
  402bfa:	6802      	ldr	r2, [r0, #0]
  402bfc:	2101      	movs	r1, #1
  402bfe:	fa01 f303 	lsl.w	r3, r1, r3
  402c02:	ea22 0303 	bic.w	r3, r2, r3
  402c06:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402c08:	4b09      	ldr	r3, [pc, #36]	; (402c30 <vTaskPriorityInherit+0x90>)
  402c0a:	681b      	ldr	r3, [r3, #0]
  402c0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402c0e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402c10:	4a0a      	ldr	r2, [pc, #40]	; (402c3c <vTaskPriorityInherit+0x9c>)
  402c12:	6811      	ldr	r1, [r2, #0]
  402c14:	2301      	movs	r3, #1
  402c16:	4083      	lsls	r3, r0
  402c18:	430b      	orrs	r3, r1
  402c1a:	6013      	str	r3, [r2, #0]
  402c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c20:	4629      	mov	r1, r5
  402c22:	4b04      	ldr	r3, [pc, #16]	; (402c34 <vTaskPriorityInherit+0x94>)
  402c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c28:	4b05      	ldr	r3, [pc, #20]	; (402c40 <vTaskPriorityInherit+0xa0>)
  402c2a:	4798      	blx	r3
  402c2c:	bd38      	pop	{r3, r4, r5, pc}
  402c2e:	4770      	bx	lr
  402c30:	20400a68 	.word	0x20400a68
  402c34:	20400a74 	.word	0x20400a74
  402c38:	004014b1 	.word	0x004014b1
  402c3c:	20400aec 	.word	0x20400aec
  402c40:	00401465 	.word	0x00401465

00402c44 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402c44:	2800      	cmp	r0, #0
  402c46:	d04d      	beq.n	402ce4 <xTaskPriorityDisinherit+0xa0>
	{
  402c48:	b538      	push	{r3, r4, r5, lr}
  402c4a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c4c:	4a27      	ldr	r2, [pc, #156]	; (402cec <xTaskPriorityDisinherit+0xa8>)
  402c4e:	6812      	ldr	r2, [r2, #0]
  402c50:	4290      	cmp	r0, r2
  402c52:	d00a      	beq.n	402c6a <xTaskPriorityDisinherit+0x26>
  402c54:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c58:	b672      	cpsid	i
  402c5a:	f383 8811 	msr	BASEPRI, r3
  402c5e:	f3bf 8f6f 	isb	sy
  402c62:	f3bf 8f4f 	dsb	sy
  402c66:	b662      	cpsie	i
  402c68:	e7fe      	b.n	402c68 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c6a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c6c:	b952      	cbnz	r2, 402c84 <xTaskPriorityDisinherit+0x40>
  402c6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c72:	b672      	cpsid	i
  402c74:	f383 8811 	msr	BASEPRI, r3
  402c78:	f3bf 8f6f 	isb	sy
  402c7c:	f3bf 8f4f 	dsb	sy
  402c80:	b662      	cpsie	i
  402c82:	e7fe      	b.n	402c82 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402c84:	3a01      	subs	r2, #1
  402c86:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402c88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402c8c:	4288      	cmp	r0, r1
  402c8e:	d02b      	beq.n	402ce8 <xTaskPriorityDisinherit+0xa4>
  402c90:	bb52      	cbnz	r2, 402ce8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c92:	1d25      	adds	r5, r4, #4
  402c94:	4628      	mov	r0, r5
  402c96:	4b16      	ldr	r3, [pc, #88]	; (402cf0 <xTaskPriorityDisinherit+0xac>)
  402c98:	4798      	blx	r3
  402c9a:	b968      	cbnz	r0, 402cb8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402c9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402ca2:	4b14      	ldr	r3, [pc, #80]	; (402cf4 <xTaskPriorityDisinherit+0xb0>)
  402ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402ca8:	b933      	cbnz	r3, 402cb8 <xTaskPriorityDisinherit+0x74>
  402caa:	4813      	ldr	r0, [pc, #76]	; (402cf8 <xTaskPriorityDisinherit+0xb4>)
  402cac:	6803      	ldr	r3, [r0, #0]
  402cae:	2201      	movs	r2, #1
  402cb0:	408a      	lsls	r2, r1
  402cb2:	ea23 0302 	bic.w	r3, r3, r2
  402cb6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402cb8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402cba:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402cbc:	f1c0 0305 	rsb	r3, r0, #5
  402cc0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402cc2:	4a0d      	ldr	r2, [pc, #52]	; (402cf8 <xTaskPriorityDisinherit+0xb4>)
  402cc4:	6811      	ldr	r1, [r2, #0]
  402cc6:	2401      	movs	r4, #1
  402cc8:	fa04 f300 	lsl.w	r3, r4, r0
  402ccc:	430b      	orrs	r3, r1
  402cce:	6013      	str	r3, [r2, #0]
  402cd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cd4:	4629      	mov	r1, r5
  402cd6:	4b07      	ldr	r3, [pc, #28]	; (402cf4 <xTaskPriorityDisinherit+0xb0>)
  402cd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cdc:	4b07      	ldr	r3, [pc, #28]	; (402cfc <xTaskPriorityDisinherit+0xb8>)
  402cde:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402ce0:	4620      	mov	r0, r4
  402ce2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402ce4:	2000      	movs	r0, #0
  402ce6:	4770      	bx	lr
  402ce8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402cea:	bd38      	pop	{r3, r4, r5, pc}
  402cec:	20400a68 	.word	0x20400a68
  402cf0:	004014b1 	.word	0x004014b1
  402cf4:	20400a74 	.word	0x20400a74
  402cf8:	20400aec 	.word	0x20400aec
  402cfc:	00401465 	.word	0x00401465

00402d00 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402d00:	4b05      	ldr	r3, [pc, #20]	; (402d18 <pvTaskIncrementMutexHeldCount+0x18>)
  402d02:	681b      	ldr	r3, [r3, #0]
  402d04:	b123      	cbz	r3, 402d10 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402d06:	4b04      	ldr	r3, [pc, #16]	; (402d18 <pvTaskIncrementMutexHeldCount+0x18>)
  402d08:	681a      	ldr	r2, [r3, #0]
  402d0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402d0c:	3301      	adds	r3, #1
  402d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402d10:	4b01      	ldr	r3, [pc, #4]	; (402d18 <pvTaskIncrementMutexHeldCount+0x18>)
  402d12:	6818      	ldr	r0, [r3, #0]
	}
  402d14:	4770      	bx	lr
  402d16:	bf00      	nop
  402d18:	20400a68 	.word	0x20400a68

00402d1c <prvInsertTimerInActiveList>:
  402d1c:	b508      	push	{r3, lr}
  402d1e:	6041      	str	r1, [r0, #4]
  402d20:	6100      	str	r0, [r0, #16]
  402d22:	4291      	cmp	r1, r2
  402d24:	d80c      	bhi.n	402d40 <prvInsertTimerInActiveList+0x24>
  402d26:	1ad2      	subs	r2, r2, r3
  402d28:	6983      	ldr	r3, [r0, #24]
  402d2a:	429a      	cmp	r2, r3
  402d2c:	d301      	bcc.n	402d32 <prvInsertTimerInActiveList+0x16>
  402d2e:	2001      	movs	r0, #1
  402d30:	bd08      	pop	{r3, pc}
  402d32:	1d01      	adds	r1, r0, #4
  402d34:	4b09      	ldr	r3, [pc, #36]	; (402d5c <prvInsertTimerInActiveList+0x40>)
  402d36:	6818      	ldr	r0, [r3, #0]
  402d38:	4b09      	ldr	r3, [pc, #36]	; (402d60 <prvInsertTimerInActiveList+0x44>)
  402d3a:	4798      	blx	r3
  402d3c:	2000      	movs	r0, #0
  402d3e:	bd08      	pop	{r3, pc}
  402d40:	429a      	cmp	r2, r3
  402d42:	d203      	bcs.n	402d4c <prvInsertTimerInActiveList+0x30>
  402d44:	4299      	cmp	r1, r3
  402d46:	d301      	bcc.n	402d4c <prvInsertTimerInActiveList+0x30>
  402d48:	2001      	movs	r0, #1
  402d4a:	bd08      	pop	{r3, pc}
  402d4c:	1d01      	adds	r1, r0, #4
  402d4e:	4b05      	ldr	r3, [pc, #20]	; (402d64 <prvInsertTimerInActiveList+0x48>)
  402d50:	6818      	ldr	r0, [r3, #0]
  402d52:	4b03      	ldr	r3, [pc, #12]	; (402d60 <prvInsertTimerInActiveList+0x44>)
  402d54:	4798      	blx	r3
  402d56:	2000      	movs	r0, #0
  402d58:	bd08      	pop	{r3, pc}
  402d5a:	bf00      	nop
  402d5c:	20400b6c 	.word	0x20400b6c
  402d60:	0040147d 	.word	0x0040147d
  402d64:	20400b68 	.word	0x20400b68

00402d68 <prvCheckForValidListAndQueue>:
  402d68:	b570      	push	{r4, r5, r6, lr}
  402d6a:	4b15      	ldr	r3, [pc, #84]	; (402dc0 <prvCheckForValidListAndQueue+0x58>)
  402d6c:	4798      	blx	r3
  402d6e:	4b15      	ldr	r3, [pc, #84]	; (402dc4 <prvCheckForValidListAndQueue+0x5c>)
  402d70:	681b      	ldr	r3, [r3, #0]
  402d72:	b113      	cbz	r3, 402d7a <prvCheckForValidListAndQueue+0x12>
  402d74:	4b14      	ldr	r3, [pc, #80]	; (402dc8 <prvCheckForValidListAndQueue+0x60>)
  402d76:	4798      	blx	r3
  402d78:	bd70      	pop	{r4, r5, r6, pc}
  402d7a:	4d14      	ldr	r5, [pc, #80]	; (402dcc <prvCheckForValidListAndQueue+0x64>)
  402d7c:	4628      	mov	r0, r5
  402d7e:	4e14      	ldr	r6, [pc, #80]	; (402dd0 <prvCheckForValidListAndQueue+0x68>)
  402d80:	47b0      	blx	r6
  402d82:	4c14      	ldr	r4, [pc, #80]	; (402dd4 <prvCheckForValidListAndQueue+0x6c>)
  402d84:	4620      	mov	r0, r4
  402d86:	47b0      	blx	r6
  402d88:	4b13      	ldr	r3, [pc, #76]	; (402dd8 <prvCheckForValidListAndQueue+0x70>)
  402d8a:	601d      	str	r5, [r3, #0]
  402d8c:	4b13      	ldr	r3, [pc, #76]	; (402ddc <prvCheckForValidListAndQueue+0x74>)
  402d8e:	601c      	str	r4, [r3, #0]
  402d90:	2200      	movs	r2, #0
  402d92:	2110      	movs	r1, #16
  402d94:	2005      	movs	r0, #5
  402d96:	4b12      	ldr	r3, [pc, #72]	; (402de0 <prvCheckForValidListAndQueue+0x78>)
  402d98:	4798      	blx	r3
  402d9a:	4b0a      	ldr	r3, [pc, #40]	; (402dc4 <prvCheckForValidListAndQueue+0x5c>)
  402d9c:	6018      	str	r0, [r3, #0]
  402d9e:	b118      	cbz	r0, 402da8 <prvCheckForValidListAndQueue+0x40>
  402da0:	4910      	ldr	r1, [pc, #64]	; (402de4 <prvCheckForValidListAndQueue+0x7c>)
  402da2:	4b11      	ldr	r3, [pc, #68]	; (402de8 <prvCheckForValidListAndQueue+0x80>)
  402da4:	4798      	blx	r3
  402da6:	e7e5      	b.n	402d74 <prvCheckForValidListAndQueue+0xc>
  402da8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dac:	b672      	cpsid	i
  402dae:	f383 8811 	msr	BASEPRI, r3
  402db2:	f3bf 8f6f 	isb	sy
  402db6:	f3bf 8f4f 	dsb	sy
  402dba:	b662      	cpsie	i
  402dbc:	e7fe      	b.n	402dbc <prvCheckForValidListAndQueue+0x54>
  402dbe:	bf00      	nop
  402dc0:	00401595 	.word	0x00401595
  402dc4:	20400b9c 	.word	0x20400b9c
  402dc8:	004015e1 	.word	0x004015e1
  402dcc:	20400b70 	.word	0x20400b70
  402dd0:	00401449 	.word	0x00401449
  402dd4:	20400b84 	.word	0x20400b84
  402dd8:	20400b68 	.word	0x20400b68
  402ddc:	20400b6c 	.word	0x20400b6c
  402de0:	00401ab5 	.word	0x00401ab5
  402de4:	00406860 	.word	0x00406860
  402de8:	004020c5 	.word	0x004020c5

00402dec <xTimerCreateTimerTask>:
  402dec:	b510      	push	{r4, lr}
  402dee:	b084      	sub	sp, #16
  402df0:	4b0f      	ldr	r3, [pc, #60]	; (402e30 <xTimerCreateTimerTask+0x44>)
  402df2:	4798      	blx	r3
  402df4:	4b0f      	ldr	r3, [pc, #60]	; (402e34 <xTimerCreateTimerTask+0x48>)
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	b173      	cbz	r3, 402e18 <xTimerCreateTimerTask+0x2c>
  402dfa:	2300      	movs	r3, #0
  402dfc:	9303      	str	r3, [sp, #12]
  402dfe:	9302      	str	r3, [sp, #8]
  402e00:	9301      	str	r3, [sp, #4]
  402e02:	2204      	movs	r2, #4
  402e04:	9200      	str	r2, [sp, #0]
  402e06:	f44f 7282 	mov.w	r2, #260	; 0x104
  402e0a:	490b      	ldr	r1, [pc, #44]	; (402e38 <xTimerCreateTimerTask+0x4c>)
  402e0c:	480b      	ldr	r0, [pc, #44]	; (402e3c <xTimerCreateTimerTask+0x50>)
  402e0e:	4c0c      	ldr	r4, [pc, #48]	; (402e40 <xTimerCreateTimerTask+0x54>)
  402e10:	47a0      	blx	r4
  402e12:	b108      	cbz	r0, 402e18 <xTimerCreateTimerTask+0x2c>
  402e14:	b004      	add	sp, #16
  402e16:	bd10      	pop	{r4, pc}
  402e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e1c:	b672      	cpsid	i
  402e1e:	f383 8811 	msr	BASEPRI, r3
  402e22:	f3bf 8f6f 	isb	sy
  402e26:	f3bf 8f4f 	dsb	sy
  402e2a:	b662      	cpsie	i
  402e2c:	e7fe      	b.n	402e2c <xTimerCreateTimerTask+0x40>
  402e2e:	bf00      	nop
  402e30:	00402d69 	.word	0x00402d69
  402e34:	20400b9c 	.word	0x20400b9c
  402e38:	00406868 	.word	0x00406868
  402e3c:	00402f6d 	.word	0x00402f6d
  402e40:	004021d5 	.word	0x004021d5

00402e44 <xTimerGenericCommand>:
  402e44:	b1d8      	cbz	r0, 402e7e <xTimerGenericCommand+0x3a>
  402e46:	b530      	push	{r4, r5, lr}
  402e48:	b085      	sub	sp, #20
  402e4a:	4615      	mov	r5, r2
  402e4c:	4604      	mov	r4, r0
  402e4e:	4a15      	ldr	r2, [pc, #84]	; (402ea4 <xTimerGenericCommand+0x60>)
  402e50:	6810      	ldr	r0, [r2, #0]
  402e52:	b320      	cbz	r0, 402e9e <xTimerGenericCommand+0x5a>
  402e54:	461a      	mov	r2, r3
  402e56:	9100      	str	r1, [sp, #0]
  402e58:	9501      	str	r5, [sp, #4]
  402e5a:	9402      	str	r4, [sp, #8]
  402e5c:	2905      	cmp	r1, #5
  402e5e:	dc19      	bgt.n	402e94 <xTimerGenericCommand+0x50>
  402e60:	4b11      	ldr	r3, [pc, #68]	; (402ea8 <xTimerGenericCommand+0x64>)
  402e62:	4798      	blx	r3
  402e64:	2802      	cmp	r0, #2
  402e66:	f04f 0300 	mov.w	r3, #0
  402e6a:	bf0c      	ite	eq
  402e6c:	9a08      	ldreq	r2, [sp, #32]
  402e6e:	461a      	movne	r2, r3
  402e70:	4669      	mov	r1, sp
  402e72:	480c      	ldr	r0, [pc, #48]	; (402ea4 <xTimerGenericCommand+0x60>)
  402e74:	6800      	ldr	r0, [r0, #0]
  402e76:	4c0d      	ldr	r4, [pc, #52]	; (402eac <xTimerGenericCommand+0x68>)
  402e78:	47a0      	blx	r4
  402e7a:	b005      	add	sp, #20
  402e7c:	bd30      	pop	{r4, r5, pc}
  402e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e82:	b672      	cpsid	i
  402e84:	f383 8811 	msr	BASEPRI, r3
  402e88:	f3bf 8f6f 	isb	sy
  402e8c:	f3bf 8f4f 	dsb	sy
  402e90:	b662      	cpsie	i
  402e92:	e7fe      	b.n	402e92 <xTimerGenericCommand+0x4e>
  402e94:	2300      	movs	r3, #0
  402e96:	4669      	mov	r1, sp
  402e98:	4c05      	ldr	r4, [pc, #20]	; (402eb0 <xTimerGenericCommand+0x6c>)
  402e9a:	47a0      	blx	r4
  402e9c:	e7ed      	b.n	402e7a <xTimerGenericCommand+0x36>
  402e9e:	2000      	movs	r0, #0
  402ea0:	e7eb      	b.n	402e7a <xTimerGenericCommand+0x36>
  402ea2:	bf00      	nop
  402ea4:	20400b9c 	.word	0x20400b9c
  402ea8:	00402b81 	.word	0x00402b81
  402eac:	00401b31 	.word	0x00401b31
  402eb0:	00401d15 	.word	0x00401d15

00402eb4 <prvSampleTimeNow>:
  402eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402eb8:	b082      	sub	sp, #8
  402eba:	4680      	mov	r8, r0
  402ebc:	4b24      	ldr	r3, [pc, #144]	; (402f50 <prvSampleTimeNow+0x9c>)
  402ebe:	4798      	blx	r3
  402ec0:	4607      	mov	r7, r0
  402ec2:	4b24      	ldr	r3, [pc, #144]	; (402f54 <prvSampleTimeNow+0xa0>)
  402ec4:	681b      	ldr	r3, [r3, #0]
  402ec6:	4298      	cmp	r0, r3
  402ec8:	d31b      	bcc.n	402f02 <prvSampleTimeNow+0x4e>
  402eca:	2300      	movs	r3, #0
  402ecc:	f8c8 3000 	str.w	r3, [r8]
  402ed0:	4b20      	ldr	r3, [pc, #128]	; (402f54 <prvSampleTimeNow+0xa0>)
  402ed2:	601f      	str	r7, [r3, #0]
  402ed4:	4638      	mov	r0, r7
  402ed6:	b002      	add	sp, #8
  402ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402edc:	2100      	movs	r1, #0
  402ede:	9100      	str	r1, [sp, #0]
  402ee0:	460b      	mov	r3, r1
  402ee2:	4652      	mov	r2, sl
  402ee4:	4620      	mov	r0, r4
  402ee6:	4c1c      	ldr	r4, [pc, #112]	; (402f58 <prvSampleTimeNow+0xa4>)
  402ee8:	47a0      	blx	r4
  402eea:	b960      	cbnz	r0, 402f06 <prvSampleTimeNow+0x52>
  402eec:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ef0:	b672      	cpsid	i
  402ef2:	f383 8811 	msr	BASEPRI, r3
  402ef6:	f3bf 8f6f 	isb	sy
  402efa:	f3bf 8f4f 	dsb	sy
  402efe:	b662      	cpsie	i
  402f00:	e7fe      	b.n	402f00 <prvSampleTimeNow+0x4c>
  402f02:	4d16      	ldr	r5, [pc, #88]	; (402f5c <prvSampleTimeNow+0xa8>)
  402f04:	4e16      	ldr	r6, [pc, #88]	; (402f60 <prvSampleTimeNow+0xac>)
  402f06:	682b      	ldr	r3, [r5, #0]
  402f08:	681a      	ldr	r2, [r3, #0]
  402f0a:	b1c2      	cbz	r2, 402f3e <prvSampleTimeNow+0x8a>
  402f0c:	68db      	ldr	r3, [r3, #12]
  402f0e:	f8d3 a000 	ldr.w	sl, [r3]
  402f12:	68dc      	ldr	r4, [r3, #12]
  402f14:	f104 0904 	add.w	r9, r4, #4
  402f18:	4648      	mov	r0, r9
  402f1a:	47b0      	blx	r6
  402f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f1e:	4620      	mov	r0, r4
  402f20:	4798      	blx	r3
  402f22:	69e3      	ldr	r3, [r4, #28]
  402f24:	2b01      	cmp	r3, #1
  402f26:	d1ee      	bne.n	402f06 <prvSampleTimeNow+0x52>
  402f28:	69a3      	ldr	r3, [r4, #24]
  402f2a:	4453      	add	r3, sl
  402f2c:	459a      	cmp	sl, r3
  402f2e:	d2d5      	bcs.n	402edc <prvSampleTimeNow+0x28>
  402f30:	6063      	str	r3, [r4, #4]
  402f32:	6124      	str	r4, [r4, #16]
  402f34:	4649      	mov	r1, r9
  402f36:	6828      	ldr	r0, [r5, #0]
  402f38:	4b0a      	ldr	r3, [pc, #40]	; (402f64 <prvSampleTimeNow+0xb0>)
  402f3a:	4798      	blx	r3
  402f3c:	e7e3      	b.n	402f06 <prvSampleTimeNow+0x52>
  402f3e:	4a0a      	ldr	r2, [pc, #40]	; (402f68 <prvSampleTimeNow+0xb4>)
  402f40:	6810      	ldr	r0, [r2, #0]
  402f42:	4906      	ldr	r1, [pc, #24]	; (402f5c <prvSampleTimeNow+0xa8>)
  402f44:	6008      	str	r0, [r1, #0]
  402f46:	6013      	str	r3, [r2, #0]
  402f48:	2301      	movs	r3, #1
  402f4a:	f8c8 3000 	str.w	r3, [r8]
  402f4e:	e7bf      	b.n	402ed0 <prvSampleTimeNow+0x1c>
  402f50:	004024a5 	.word	0x004024a5
  402f54:	20400b98 	.word	0x20400b98
  402f58:	00402e45 	.word	0x00402e45
  402f5c:	20400b68 	.word	0x20400b68
  402f60:	004014b1 	.word	0x004014b1
  402f64:	0040147d 	.word	0x0040147d
  402f68:	20400b6c 	.word	0x20400b6c

00402f6c <prvTimerTask>:
  402f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f70:	b088      	sub	sp, #32
  402f72:	4e75      	ldr	r6, [pc, #468]	; (403148 <prvTimerTask+0x1dc>)
  402f74:	4f75      	ldr	r7, [pc, #468]	; (40314c <prvTimerTask+0x1e0>)
  402f76:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403174 <prvTimerTask+0x208>
  402f7a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403178 <prvTimerTask+0x20c>
  402f7e:	6833      	ldr	r3, [r6, #0]
  402f80:	681a      	ldr	r2, [r3, #0]
  402f82:	2a00      	cmp	r2, #0
  402f84:	f000 80ce 	beq.w	403124 <prvTimerTask+0x1b8>
  402f88:	68db      	ldr	r3, [r3, #12]
  402f8a:	681c      	ldr	r4, [r3, #0]
  402f8c:	47b8      	blx	r7
  402f8e:	a804      	add	r0, sp, #16
  402f90:	4b6f      	ldr	r3, [pc, #444]	; (403150 <prvTimerTask+0x1e4>)
  402f92:	4798      	blx	r3
  402f94:	4605      	mov	r5, r0
  402f96:	9b04      	ldr	r3, [sp, #16]
  402f98:	2b00      	cmp	r3, #0
  402f9a:	d144      	bne.n	403026 <prvTimerTask+0xba>
  402f9c:	42a0      	cmp	r0, r4
  402f9e:	d212      	bcs.n	402fc6 <prvTimerTask+0x5a>
  402fa0:	2200      	movs	r2, #0
  402fa2:	1b61      	subs	r1, r4, r5
  402fa4:	4b6b      	ldr	r3, [pc, #428]	; (403154 <prvTimerTask+0x1e8>)
  402fa6:	6818      	ldr	r0, [r3, #0]
  402fa8:	4b6b      	ldr	r3, [pc, #428]	; (403158 <prvTimerTask+0x1ec>)
  402faa:	4798      	blx	r3
  402fac:	4b6b      	ldr	r3, [pc, #428]	; (40315c <prvTimerTask+0x1f0>)
  402fae:	4798      	blx	r3
  402fb0:	2800      	cmp	r0, #0
  402fb2:	d13a      	bne.n	40302a <prvTimerTask+0xbe>
  402fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402fb8:	f8c9 3000 	str.w	r3, [r9]
  402fbc:	f3bf 8f4f 	dsb	sy
  402fc0:	f3bf 8f6f 	isb	sy
  402fc4:	e031      	b.n	40302a <prvTimerTask+0xbe>
  402fc6:	4b65      	ldr	r3, [pc, #404]	; (40315c <prvTimerTask+0x1f0>)
  402fc8:	4798      	blx	r3
  402fca:	6833      	ldr	r3, [r6, #0]
  402fcc:	68db      	ldr	r3, [r3, #12]
  402fce:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  402fd2:	f10a 0004 	add.w	r0, sl, #4
  402fd6:	47c0      	blx	r8
  402fd8:	f8da 301c 	ldr.w	r3, [sl, #28]
  402fdc:	2b01      	cmp	r3, #1
  402fde:	d004      	beq.n	402fea <prvTimerTask+0x7e>
  402fe0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402fe4:	4650      	mov	r0, sl
  402fe6:	4798      	blx	r3
  402fe8:	e01f      	b.n	40302a <prvTimerTask+0xbe>
  402fea:	f8da 1018 	ldr.w	r1, [sl, #24]
  402fee:	4623      	mov	r3, r4
  402ff0:	462a      	mov	r2, r5
  402ff2:	4421      	add	r1, r4
  402ff4:	4650      	mov	r0, sl
  402ff6:	4d5a      	ldr	r5, [pc, #360]	; (403160 <prvTimerTask+0x1f4>)
  402ff8:	47a8      	blx	r5
  402ffa:	2801      	cmp	r0, #1
  402ffc:	d1f0      	bne.n	402fe0 <prvTimerTask+0x74>
  402ffe:	2100      	movs	r1, #0
  403000:	9100      	str	r1, [sp, #0]
  403002:	460b      	mov	r3, r1
  403004:	4622      	mov	r2, r4
  403006:	4650      	mov	r0, sl
  403008:	4c56      	ldr	r4, [pc, #344]	; (403164 <prvTimerTask+0x1f8>)
  40300a:	47a0      	blx	r4
  40300c:	2800      	cmp	r0, #0
  40300e:	d1e7      	bne.n	402fe0 <prvTimerTask+0x74>
  403010:	f04f 0380 	mov.w	r3, #128	; 0x80
  403014:	b672      	cpsid	i
  403016:	f383 8811 	msr	BASEPRI, r3
  40301a:	f3bf 8f6f 	isb	sy
  40301e:	f3bf 8f4f 	dsb	sy
  403022:	b662      	cpsie	i
  403024:	e7fe      	b.n	403024 <prvTimerTask+0xb8>
  403026:	4b4d      	ldr	r3, [pc, #308]	; (40315c <prvTimerTask+0x1f0>)
  403028:	4798      	blx	r3
  40302a:	4d4a      	ldr	r5, [pc, #296]	; (403154 <prvTimerTask+0x1e8>)
  40302c:	4c4e      	ldr	r4, [pc, #312]	; (403168 <prvTimerTask+0x1fc>)
  40302e:	e006      	b.n	40303e <prvTimerTask+0xd2>
  403030:	9907      	ldr	r1, [sp, #28]
  403032:	9806      	ldr	r0, [sp, #24]
  403034:	9b05      	ldr	r3, [sp, #20]
  403036:	4798      	blx	r3
  403038:	9b04      	ldr	r3, [sp, #16]
  40303a:	2b00      	cmp	r3, #0
  40303c:	da09      	bge.n	403052 <prvTimerTask+0xe6>
  40303e:	2300      	movs	r3, #0
  403040:	461a      	mov	r2, r3
  403042:	a904      	add	r1, sp, #16
  403044:	6828      	ldr	r0, [r5, #0]
  403046:	47a0      	blx	r4
  403048:	2800      	cmp	r0, #0
  40304a:	d098      	beq.n	402f7e <prvTimerTask+0x12>
  40304c:	9b04      	ldr	r3, [sp, #16]
  40304e:	2b00      	cmp	r3, #0
  403050:	dbee      	blt.n	403030 <prvTimerTask+0xc4>
  403052:	f8dd a018 	ldr.w	sl, [sp, #24]
  403056:	f8da 3014 	ldr.w	r3, [sl, #20]
  40305a:	b113      	cbz	r3, 403062 <prvTimerTask+0xf6>
  40305c:	f10a 0004 	add.w	r0, sl, #4
  403060:	47c0      	blx	r8
  403062:	a803      	add	r0, sp, #12
  403064:	4b3a      	ldr	r3, [pc, #232]	; (403150 <prvTimerTask+0x1e4>)
  403066:	4798      	blx	r3
  403068:	9b04      	ldr	r3, [sp, #16]
  40306a:	2b09      	cmp	r3, #9
  40306c:	d8e7      	bhi.n	40303e <prvTimerTask+0xd2>
  40306e:	a201      	add	r2, pc, #4	; (adr r2, 403074 <prvTimerTask+0x108>)
  403070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403074:	0040309d 	.word	0x0040309d
  403078:	0040309d 	.word	0x0040309d
  40307c:	0040309d 	.word	0x0040309d
  403080:	0040303f 	.word	0x0040303f
  403084:	004030f1 	.word	0x004030f1
  403088:	0040311d 	.word	0x0040311d
  40308c:	0040309d 	.word	0x0040309d
  403090:	0040309d 	.word	0x0040309d
  403094:	0040303f 	.word	0x0040303f
  403098:	004030f1 	.word	0x004030f1
  40309c:	9c05      	ldr	r4, [sp, #20]
  40309e:	f8da 1018 	ldr.w	r1, [sl, #24]
  4030a2:	4623      	mov	r3, r4
  4030a4:	4602      	mov	r2, r0
  4030a6:	4421      	add	r1, r4
  4030a8:	4650      	mov	r0, sl
  4030aa:	4c2d      	ldr	r4, [pc, #180]	; (403160 <prvTimerTask+0x1f4>)
  4030ac:	47a0      	blx	r4
  4030ae:	2801      	cmp	r0, #1
  4030b0:	d1bc      	bne.n	40302c <prvTimerTask+0xc0>
  4030b2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4030b6:	4650      	mov	r0, sl
  4030b8:	4798      	blx	r3
  4030ba:	f8da 301c 	ldr.w	r3, [sl, #28]
  4030be:	2b01      	cmp	r3, #1
  4030c0:	d1b4      	bne.n	40302c <prvTimerTask+0xc0>
  4030c2:	f8da 2018 	ldr.w	r2, [sl, #24]
  4030c6:	2100      	movs	r1, #0
  4030c8:	9100      	str	r1, [sp, #0]
  4030ca:	460b      	mov	r3, r1
  4030cc:	9805      	ldr	r0, [sp, #20]
  4030ce:	4402      	add	r2, r0
  4030d0:	4650      	mov	r0, sl
  4030d2:	4c24      	ldr	r4, [pc, #144]	; (403164 <prvTimerTask+0x1f8>)
  4030d4:	47a0      	blx	r4
  4030d6:	2800      	cmp	r0, #0
  4030d8:	d1a8      	bne.n	40302c <prvTimerTask+0xc0>
  4030da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030de:	b672      	cpsid	i
  4030e0:	f383 8811 	msr	BASEPRI, r3
  4030e4:	f3bf 8f6f 	isb	sy
  4030e8:	f3bf 8f4f 	dsb	sy
  4030ec:	b662      	cpsie	i
  4030ee:	e7fe      	b.n	4030ee <prvTimerTask+0x182>
  4030f0:	9905      	ldr	r1, [sp, #20]
  4030f2:	f8ca 1018 	str.w	r1, [sl, #24]
  4030f6:	b131      	cbz	r1, 403106 <prvTimerTask+0x19a>
  4030f8:	4603      	mov	r3, r0
  4030fa:	4602      	mov	r2, r0
  4030fc:	4401      	add	r1, r0
  4030fe:	4650      	mov	r0, sl
  403100:	4c17      	ldr	r4, [pc, #92]	; (403160 <prvTimerTask+0x1f4>)
  403102:	47a0      	blx	r4
  403104:	e792      	b.n	40302c <prvTimerTask+0xc0>
  403106:	f04f 0380 	mov.w	r3, #128	; 0x80
  40310a:	b672      	cpsid	i
  40310c:	f383 8811 	msr	BASEPRI, r3
  403110:	f3bf 8f6f 	isb	sy
  403114:	f3bf 8f4f 	dsb	sy
  403118:	b662      	cpsie	i
  40311a:	e7fe      	b.n	40311a <prvTimerTask+0x1ae>
  40311c:	4650      	mov	r0, sl
  40311e:	4b13      	ldr	r3, [pc, #76]	; (40316c <prvTimerTask+0x200>)
  403120:	4798      	blx	r3
  403122:	e783      	b.n	40302c <prvTimerTask+0xc0>
  403124:	47b8      	blx	r7
  403126:	a804      	add	r0, sp, #16
  403128:	4b09      	ldr	r3, [pc, #36]	; (403150 <prvTimerTask+0x1e4>)
  40312a:	4798      	blx	r3
  40312c:	4605      	mov	r5, r0
  40312e:	9b04      	ldr	r3, [sp, #16]
  403130:	2b00      	cmp	r3, #0
  403132:	f47f af78 	bne.w	403026 <prvTimerTask+0xba>
  403136:	4b0e      	ldr	r3, [pc, #56]	; (403170 <prvTimerTask+0x204>)
  403138:	681b      	ldr	r3, [r3, #0]
  40313a:	681a      	ldr	r2, [r3, #0]
  40313c:	fab2 f282 	clz	r2, r2
  403140:	0952      	lsrs	r2, r2, #5
  403142:	2400      	movs	r4, #0
  403144:	e72d      	b.n	402fa2 <prvTimerTask+0x36>
  403146:	bf00      	nop
  403148:	20400b68 	.word	0x20400b68
  40314c:	00402495 	.word	0x00402495
  403150:	00402eb5 	.word	0x00402eb5
  403154:	20400b9c 	.word	0x20400b9c
  403158:	004020f9 	.word	0x004020f9
  40315c:	004025fd 	.word	0x004025fd
  403160:	00402d1d 	.word	0x00402d1d
  403164:	00402e45 	.word	0x00402e45
  403168:	00401ef5 	.word	0x00401ef5
  40316c:	00401821 	.word	0x00401821
  403170:	20400b6c 	.word	0x20400b6c
  403174:	e000ed04 	.word	0xe000ed04
  403178:	004014b1 	.word	0x004014b1

0040317c <but_callback>:
		pio_clear(pio, mask);
	else
		pio_set(pio,mask);
}

void but_callback(void) {
  40317c:	b570      	push	{r4, r5, r6, lr}
	if(but_flag == 0) but_flag = 1;
  40317e:	4b0e      	ldr	r3, [pc, #56]	; (4031b8 <but_callback+0x3c>)
  403180:	781b      	ldrb	r3, [r3, #0]
  403182:	b913      	cbnz	r3, 40318a <but_callback+0xe>
  403184:	2201      	movs	r2, #1
  403186:	4b0c      	ldr	r3, [pc, #48]	; (4031b8 <but_callback+0x3c>)
  403188:	701a      	strb	r2, [r3, #0]
	pio_set(IN1_M1_A, IN1_M1_A_IDX_MASK);
  40318a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40318e:	480b      	ldr	r0, [pc, #44]	; (4031bc <but_callback+0x40>)
  403190:	4e0b      	ldr	r6, [pc, #44]	; (4031c0 <but_callback+0x44>)
  403192:	47b0      	blx	r6
	pio_clear(IN2_M1_B, IN2_M1_B_IDX_MASK);
  403194:	2101      	movs	r1, #1
  403196:	480b      	ldr	r0, [pc, #44]	; (4031c4 <but_callback+0x48>)
  403198:	4c0b      	ldr	r4, [pc, #44]	; (4031c8 <but_callback+0x4c>)
  40319a:	47a0      	blx	r4
	pio_set(IN3_VERD, IN3_VERD_IDX_MASK);
  40319c:	4d0b      	ldr	r5, [pc, #44]	; (4031cc <but_callback+0x50>)
  40319e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4031a2:	4628      	mov	r0, r5
  4031a4:	47b0      	blx	r6
	pio_clear(IN4_VERM, IN4_VERM_IDX_MASK);
  4031a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4031aa:	4628      	mov	r0, r5
  4031ac:	47a0      	blx	r4
	delay_ms(500);
  4031ae:	4808      	ldr	r0, [pc, #32]	; (4031d0 <but_callback+0x54>)
  4031b0:	4b08      	ldr	r3, [pc, #32]	; (4031d4 <but_callback+0x58>)
  4031b2:	4798      	blx	r3
  4031b4:	bd70      	pop	{r4, r5, r6, pc}
  4031b6:	bf00      	nop
  4031b8:	20400ba0 	.word	0x20400ba0
  4031bc:	400e1400 	.word	0x400e1400
  4031c0:	00400acf 	.word	0x00400acf
  4031c4:	400e0e00 	.word	0x400e0e00
  4031c8:	00400ad3 	.word	0x00400ad3
  4031cc:	400e1200 	.word	0x400e1200
  4031d0:	00c0ebdb 	.word	0x00c0ebdb
  4031d4:	20400001 	.word	0x20400001

004031d8 <task_adc>:
}
/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

void task_adc(void){        
  4031d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while(1){
		if( xSemaphoreTake(xSemaphore, 500 / portTICK_PERIOD_MS) == pdTRUE ){
  4031dc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 403270 <task_adc+0x98>
  4031e0:	f04f 0800 	mov.w	r8, #0
			printf("A");
  4031e4:	4d15      	ldr	r5, [pc, #84]	; (40323c <task_adc+0x64>)
  4031e6:	e00e      	b.n	403206 <task_adc+0x2e>
			taskENTER_CRITICAL();
			for(uint32_t i =0; i< SOUND_LEN; i++) {
				printf("%d\n", *(g_sdram + i));
			}
			taskEXIT_CRITICAL();
  4031e8:	4b15      	ldr	r3, [pc, #84]	; (403240 <task_adc+0x68>)
  4031ea:	4798      	blx	r3
			printf("X");
  4031ec:	4815      	ldr	r0, [pc, #84]	; (403244 <task_adc+0x6c>)
  4031ee:	47a8      	blx	r5
			vTaskDelay(500 / portTICK_PERIOD_MS);
  4031f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4031f4:	4b14      	ldr	r3, [pc, #80]	; (403248 <task_adc+0x70>)
  4031f6:	4798      	blx	r3
			but_flag = 0;
  4031f8:	4b14      	ldr	r3, [pc, #80]	; (40324c <task_adc+0x74>)
  4031fa:	f883 8000 	strb.w	r8, [r3]
			afec_enable_interrupt(AFEC_POT, AFEC_POT_CHANNEL);
  4031fe:	4641      	mov	r1, r8
  403200:	4813      	ldr	r0, [pc, #76]	; (403250 <task_adc+0x78>)
  403202:	4b14      	ldr	r3, [pc, #80]	; (403254 <task_adc+0x7c>)
  403204:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphore, 500 / portTICK_PERIOD_MS) == pdTRUE ){
  403206:	4c14      	ldr	r4, [pc, #80]	; (403258 <task_adc+0x80>)
  403208:	4643      	mov	r3, r8
  40320a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40320e:	4641      	mov	r1, r8
  403210:	f8d9 0000 	ldr.w	r0, [r9]
  403214:	47a0      	blx	r4
  403216:	2801      	cmp	r0, #1
  403218:	d1f6      	bne.n	403208 <task_adc+0x30>
			printf("A");
  40321a:	4810      	ldr	r0, [pc, #64]	; (40325c <task_adc+0x84>)
  40321c:	47a8      	blx	r5
			taskENTER_CRITICAL();
  40321e:	4b10      	ldr	r3, [pc, #64]	; (403260 <task_adc+0x88>)
  403220:	4798      	blx	r3
  403222:	2400      	movs	r4, #0
				printf("%d\n", *(g_sdram + i));
  403224:	4f0f      	ldr	r7, [pc, #60]	; (403264 <task_adc+0x8c>)
  403226:	4e10      	ldr	r6, [pc, #64]	; (403268 <task_adc+0x90>)
  403228:	683b      	ldr	r3, [r7, #0]
  40322a:	5919      	ldr	r1, [r3, r4]
  40322c:	4630      	mov	r0, r6
  40322e:	47a8      	blx	r5
  403230:	3404      	adds	r4, #4
			for(uint32_t i =0; i< SOUND_LEN; i++) {
  403232:	4b0e      	ldr	r3, [pc, #56]	; (40326c <task_adc+0x94>)
  403234:	429c      	cmp	r4, r3
  403236:	d1f7      	bne.n	403228 <task_adc+0x50>
  403238:	e7d6      	b.n	4031e8 <task_adc+0x10>
  40323a:	bf00      	nop
  40323c:	004038f9 	.word	0x004038f9
  403240:	004015e1 	.word	0x004015e1
  403244:	00406934 	.word	0x00406934
  403248:	0040271d 	.word	0x0040271d
  40324c:	20400ba0 	.word	0x20400ba0
  403250:	4003c000 	.word	0x4003c000
  403254:	00400391 	.word	0x00400391
  403258:	00401ef5 	.word	0x00401ef5
  40325c:	004068b8 	.word	0x004068b8
  403260:	00401595 	.word	0x00401595
  403264:	20400014 	.word	0x20400014
  403268:	004068bc 	.word	0x004068bc
  40326c:	000203a0 	.word	0x000203a0
  403270:	20400cb0 	.word	0x20400cb0

00403274 <AFEC_pot_Callback>:
	if(but_flag == 1) {
  403274:	4b13      	ldr	r3, [pc, #76]	; (4032c4 <AFEC_pot_Callback+0x50>)
  403276:	781b      	ldrb	r3, [r3, #0]
  403278:	b2db      	uxtb	r3, r3
  40327a:	2b01      	cmp	r3, #1
  40327c:	d000      	beq.n	403280 <AFEC_pot_Callback+0xc>
  40327e:	4770      	bx	lr
static void AFEC_pot_Callback(void){
  403280:	b510      	push	{r4, lr}
		if(g_sdram_cnt < SOUND_LEN){
  403282:	4b11      	ldr	r3, [pc, #68]	; (4032c8 <AFEC_pot_Callback+0x54>)
  403284:	681a      	ldr	r2, [r3, #0]
  403286:	f248 03e7 	movw	r3, #32999	; 0x80e7
  40328a:	429a      	cmp	r2, r3
  40328c:	d80d      	bhi.n	4032aa <AFEC_pot_Callback+0x36>
			*(g_sdram + g_sdram_cnt) = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  40328e:	4b0e      	ldr	r3, [pc, #56]	; (4032c8 <AFEC_pot_Callback+0x54>)
  403290:	6818      	ldr	r0, [r3, #0]
  403292:	4a0e      	ldr	r2, [pc, #56]	; (4032cc <AFEC_pot_Callback+0x58>)
  403294:	6811      	ldr	r1, [r2, #0]
	afec->AFEC_CSELR = afec_ch;
  403296:	4a0e      	ldr	r2, [pc, #56]	; (4032d0 <AFEC_pot_Callback+0x5c>)
  403298:	2400      	movs	r4, #0
  40329a:	6654      	str	r4, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  40329c:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40329e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
			g_sdram_cnt++;
  4032a2:	681a      	ldr	r2, [r3, #0]
  4032a4:	3201      	adds	r2, #1
  4032a6:	601a      	str	r2, [r3, #0]
  4032a8:	bd10      	pop	{r4, pc}
			afec_disable_interrupt(AFEC_POT, AFEC_POT_CHANNEL);
  4032aa:	2100      	movs	r1, #0
  4032ac:	4808      	ldr	r0, [pc, #32]	; (4032d0 <AFEC_pot_Callback+0x5c>)
  4032ae:	4b09      	ldr	r3, [pc, #36]	; (4032d4 <AFEC_pot_Callback+0x60>)
  4032b0:	4798      	blx	r3
			xSemaphoreGiveFromISR(xSemaphore, 0);
  4032b2:	2100      	movs	r1, #0
  4032b4:	4b08      	ldr	r3, [pc, #32]	; (4032d8 <AFEC_pot_Callback+0x64>)
  4032b6:	6818      	ldr	r0, [r3, #0]
  4032b8:	4b08      	ldr	r3, [pc, #32]	; (4032dc <AFEC_pot_Callback+0x68>)
  4032ba:	4798      	blx	r3
			g_sdram_cnt = 0;
  4032bc:	2200      	movs	r2, #0
  4032be:	4b02      	ldr	r3, [pc, #8]	; (4032c8 <AFEC_pot_Callback+0x54>)
  4032c0:	601a      	str	r2, [r3, #0]
  4032c2:	bd10      	pop	{r4, pc}
  4032c4:	20400ba0 	.word	0x20400ba0
  4032c8:	20400ba4 	.word	0x20400ba4
  4032cc:	20400014 	.word	0x20400014
  4032d0:	4003c000 	.word	0x4003c000
  4032d4:	00400421 	.word	0x00400421
  4032d8:	20400cb0 	.word	0x20400cb0
  4032dc:	00401e15 	.word	0x00401e15

004032e0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032e2:	b083      	sub	sp, #12
  4032e4:	4605      	mov	r5, r0
  4032e6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4032e8:	2300      	movs	r3, #0
  4032ea:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4032ec:	4b2a      	ldr	r3, [pc, #168]	; (403398 <usart_serial_getchar+0xb8>)
  4032ee:	4298      	cmp	r0, r3
  4032f0:	d013      	beq.n	40331a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4032f2:	4b2a      	ldr	r3, [pc, #168]	; (40339c <usart_serial_getchar+0xbc>)
  4032f4:	4298      	cmp	r0, r3
  4032f6:	d018      	beq.n	40332a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4032f8:	4b29      	ldr	r3, [pc, #164]	; (4033a0 <usart_serial_getchar+0xc0>)
  4032fa:	4298      	cmp	r0, r3
  4032fc:	d01d      	beq.n	40333a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4032fe:	4b29      	ldr	r3, [pc, #164]	; (4033a4 <usart_serial_getchar+0xc4>)
  403300:	429d      	cmp	r5, r3
  403302:	d022      	beq.n	40334a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403304:	4b28      	ldr	r3, [pc, #160]	; (4033a8 <usart_serial_getchar+0xc8>)
  403306:	429d      	cmp	r5, r3
  403308:	d027      	beq.n	40335a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40330a:	4b28      	ldr	r3, [pc, #160]	; (4033ac <usart_serial_getchar+0xcc>)
  40330c:	429d      	cmp	r5, r3
  40330e:	d02e      	beq.n	40336e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403310:	4b27      	ldr	r3, [pc, #156]	; (4033b0 <usart_serial_getchar+0xd0>)
  403312:	429d      	cmp	r5, r3
  403314:	d035      	beq.n	403382 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403316:	b003      	add	sp, #12
  403318:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40331a:	461f      	mov	r7, r3
  40331c:	4e25      	ldr	r6, [pc, #148]	; (4033b4 <usart_serial_getchar+0xd4>)
  40331e:	4621      	mov	r1, r4
  403320:	4638      	mov	r0, r7
  403322:	47b0      	blx	r6
  403324:	2800      	cmp	r0, #0
  403326:	d1fa      	bne.n	40331e <usart_serial_getchar+0x3e>
  403328:	e7e9      	b.n	4032fe <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40332a:	461f      	mov	r7, r3
  40332c:	4e21      	ldr	r6, [pc, #132]	; (4033b4 <usart_serial_getchar+0xd4>)
  40332e:	4621      	mov	r1, r4
  403330:	4638      	mov	r0, r7
  403332:	47b0      	blx	r6
  403334:	2800      	cmp	r0, #0
  403336:	d1fa      	bne.n	40332e <usart_serial_getchar+0x4e>
  403338:	e7e4      	b.n	403304 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40333a:	461f      	mov	r7, r3
  40333c:	4e1d      	ldr	r6, [pc, #116]	; (4033b4 <usart_serial_getchar+0xd4>)
  40333e:	4621      	mov	r1, r4
  403340:	4638      	mov	r0, r7
  403342:	47b0      	blx	r6
  403344:	2800      	cmp	r0, #0
  403346:	d1fa      	bne.n	40333e <usart_serial_getchar+0x5e>
  403348:	e7df      	b.n	40330a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40334a:	461f      	mov	r7, r3
  40334c:	4e19      	ldr	r6, [pc, #100]	; (4033b4 <usart_serial_getchar+0xd4>)
  40334e:	4621      	mov	r1, r4
  403350:	4638      	mov	r0, r7
  403352:	47b0      	blx	r6
  403354:	2800      	cmp	r0, #0
  403356:	d1fa      	bne.n	40334e <usart_serial_getchar+0x6e>
  403358:	e7da      	b.n	403310 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40335a:	461e      	mov	r6, r3
  40335c:	4d16      	ldr	r5, [pc, #88]	; (4033b8 <usart_serial_getchar+0xd8>)
  40335e:	a901      	add	r1, sp, #4
  403360:	4630      	mov	r0, r6
  403362:	47a8      	blx	r5
  403364:	2800      	cmp	r0, #0
  403366:	d1fa      	bne.n	40335e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403368:	9b01      	ldr	r3, [sp, #4]
  40336a:	7023      	strb	r3, [r4, #0]
  40336c:	e7d3      	b.n	403316 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40336e:	461e      	mov	r6, r3
  403370:	4d11      	ldr	r5, [pc, #68]	; (4033b8 <usart_serial_getchar+0xd8>)
  403372:	a901      	add	r1, sp, #4
  403374:	4630      	mov	r0, r6
  403376:	47a8      	blx	r5
  403378:	2800      	cmp	r0, #0
  40337a:	d1fa      	bne.n	403372 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40337c:	9b01      	ldr	r3, [sp, #4]
  40337e:	7023      	strb	r3, [r4, #0]
  403380:	e7c9      	b.n	403316 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403382:	461e      	mov	r6, r3
  403384:	4d0c      	ldr	r5, [pc, #48]	; (4033b8 <usart_serial_getchar+0xd8>)
  403386:	a901      	add	r1, sp, #4
  403388:	4630      	mov	r0, r6
  40338a:	47a8      	blx	r5
  40338c:	2800      	cmp	r0, #0
  40338e:	d1fa      	bne.n	403386 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403390:	9b01      	ldr	r3, [sp, #4]
  403392:	7023      	strb	r3, [r4, #0]
}
  403394:	e7bf      	b.n	403316 <usart_serial_getchar+0x36>
  403396:	bf00      	nop
  403398:	400e0800 	.word	0x400e0800
  40339c:	400e0a00 	.word	0x400e0a00
  4033a0:	400e1a00 	.word	0x400e1a00
  4033a4:	400e1c00 	.word	0x400e1c00
  4033a8:	40024000 	.word	0x40024000
  4033ac:	40028000 	.word	0x40028000
  4033b0:	4002c000 	.word	0x4002c000
  4033b4:	00401073 	.word	0x00401073
  4033b8:	0040117f 	.word	0x0040117f

004033bc <usart_serial_putchar>:
{
  4033bc:	b570      	push	{r4, r5, r6, lr}
  4033be:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4033c0:	4b2a      	ldr	r3, [pc, #168]	; (40346c <usart_serial_putchar+0xb0>)
  4033c2:	4298      	cmp	r0, r3
  4033c4:	d013      	beq.n	4033ee <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4033c6:	4b2a      	ldr	r3, [pc, #168]	; (403470 <usart_serial_putchar+0xb4>)
  4033c8:	4298      	cmp	r0, r3
  4033ca:	d019      	beq.n	403400 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4033cc:	4b29      	ldr	r3, [pc, #164]	; (403474 <usart_serial_putchar+0xb8>)
  4033ce:	4298      	cmp	r0, r3
  4033d0:	d01f      	beq.n	403412 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4033d2:	4b29      	ldr	r3, [pc, #164]	; (403478 <usart_serial_putchar+0xbc>)
  4033d4:	4298      	cmp	r0, r3
  4033d6:	d025      	beq.n	403424 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4033d8:	4b28      	ldr	r3, [pc, #160]	; (40347c <usart_serial_putchar+0xc0>)
  4033da:	4298      	cmp	r0, r3
  4033dc:	d02b      	beq.n	403436 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4033de:	4b28      	ldr	r3, [pc, #160]	; (403480 <usart_serial_putchar+0xc4>)
  4033e0:	4298      	cmp	r0, r3
  4033e2:	d031      	beq.n	403448 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4033e4:	4b27      	ldr	r3, [pc, #156]	; (403484 <usart_serial_putchar+0xc8>)
  4033e6:	4298      	cmp	r0, r3
  4033e8:	d037      	beq.n	40345a <usart_serial_putchar+0x9e>
	return 0;
  4033ea:	2000      	movs	r0, #0
}
  4033ec:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033ee:	461e      	mov	r6, r3
  4033f0:	4d25      	ldr	r5, [pc, #148]	; (403488 <usart_serial_putchar+0xcc>)
  4033f2:	4621      	mov	r1, r4
  4033f4:	4630      	mov	r0, r6
  4033f6:	47a8      	blx	r5
  4033f8:	2800      	cmp	r0, #0
  4033fa:	d1fa      	bne.n	4033f2 <usart_serial_putchar+0x36>
		return 1;
  4033fc:	2001      	movs	r0, #1
  4033fe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403400:	461e      	mov	r6, r3
  403402:	4d21      	ldr	r5, [pc, #132]	; (403488 <usart_serial_putchar+0xcc>)
  403404:	4621      	mov	r1, r4
  403406:	4630      	mov	r0, r6
  403408:	47a8      	blx	r5
  40340a:	2800      	cmp	r0, #0
  40340c:	d1fa      	bne.n	403404 <usart_serial_putchar+0x48>
		return 1;
  40340e:	2001      	movs	r0, #1
  403410:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403412:	461e      	mov	r6, r3
  403414:	4d1c      	ldr	r5, [pc, #112]	; (403488 <usart_serial_putchar+0xcc>)
  403416:	4621      	mov	r1, r4
  403418:	4630      	mov	r0, r6
  40341a:	47a8      	blx	r5
  40341c:	2800      	cmp	r0, #0
  40341e:	d1fa      	bne.n	403416 <usart_serial_putchar+0x5a>
		return 1;
  403420:	2001      	movs	r0, #1
  403422:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403424:	461e      	mov	r6, r3
  403426:	4d18      	ldr	r5, [pc, #96]	; (403488 <usart_serial_putchar+0xcc>)
  403428:	4621      	mov	r1, r4
  40342a:	4630      	mov	r0, r6
  40342c:	47a8      	blx	r5
  40342e:	2800      	cmp	r0, #0
  403430:	d1fa      	bne.n	403428 <usart_serial_putchar+0x6c>
		return 1;
  403432:	2001      	movs	r0, #1
  403434:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403436:	461e      	mov	r6, r3
  403438:	4d14      	ldr	r5, [pc, #80]	; (40348c <usart_serial_putchar+0xd0>)
  40343a:	4621      	mov	r1, r4
  40343c:	4630      	mov	r0, r6
  40343e:	47a8      	blx	r5
  403440:	2800      	cmp	r0, #0
  403442:	d1fa      	bne.n	40343a <usart_serial_putchar+0x7e>
		return 1;
  403444:	2001      	movs	r0, #1
  403446:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403448:	461e      	mov	r6, r3
  40344a:	4d10      	ldr	r5, [pc, #64]	; (40348c <usart_serial_putchar+0xd0>)
  40344c:	4621      	mov	r1, r4
  40344e:	4630      	mov	r0, r6
  403450:	47a8      	blx	r5
  403452:	2800      	cmp	r0, #0
  403454:	d1fa      	bne.n	40344c <usart_serial_putchar+0x90>
		return 1;
  403456:	2001      	movs	r0, #1
  403458:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40345a:	461e      	mov	r6, r3
  40345c:	4d0b      	ldr	r5, [pc, #44]	; (40348c <usart_serial_putchar+0xd0>)
  40345e:	4621      	mov	r1, r4
  403460:	4630      	mov	r0, r6
  403462:	47a8      	blx	r5
  403464:	2800      	cmp	r0, #0
  403466:	d1fa      	bne.n	40345e <usart_serial_putchar+0xa2>
		return 1;
  403468:	2001      	movs	r0, #1
  40346a:	bd70      	pop	{r4, r5, r6, pc}
  40346c:	400e0800 	.word	0x400e0800
  403470:	400e0a00 	.word	0x400e0a00
  403474:	400e1a00 	.word	0x400e1a00
  403478:	400e1c00 	.word	0x400e1c00
  40347c:	40024000 	.word	0x40024000
  403480:	40028000 	.word	0x40028000
  403484:	4002c000 	.word	0x4002c000
  403488:	00401061 	.word	0x00401061
  40348c:	00401169 	.word	0x00401169

00403490 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403490:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403492:	460a      	mov	r2, r1
  403494:	4601      	mov	r1, r0
  403496:	4802      	ldr	r0, [pc, #8]	; (4034a0 <vApplicationStackOverflowHook+0x10>)
  403498:	4b02      	ldr	r3, [pc, #8]	; (4034a4 <vApplicationStackOverflowHook+0x14>)
  40349a:	4798      	blx	r3
  40349c:	e7fe      	b.n	40349c <vApplicationStackOverflowHook+0xc>
  40349e:	bf00      	nop
  4034a0:	004068c0 	.word	0x004068c0
  4034a4:	004038f9 	.word	0x004038f9

004034a8 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4034a8:	4770      	bx	lr

004034aa <vApplicationMallocFailedHook>:
  4034aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034ae:	b672      	cpsid	i
  4034b0:	f383 8811 	msr	BASEPRI, r3
  4034b4:	f3bf 8f6f 	isb	sy
  4034b8:	f3bf 8f4f 	dsb	sy
  4034bc:	b662      	cpsie	i
  4034be:	e7fe      	b.n	4034be <vApplicationMallocFailedHook+0x14>

004034c0 <TC0_Handler>:
void TC0_Handler(void){    
  4034c0:	b500      	push	{lr}
  4034c2:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);
  4034c4:	2100      	movs	r1, #0
  4034c6:	4805      	ldr	r0, [pc, #20]	; (4034dc <TC0_Handler+0x1c>)
  4034c8:	4b05      	ldr	r3, [pc, #20]	; (4034e0 <TC0_Handler+0x20>)
  4034ca:	4798      	blx	r3
  4034cc:	9001      	str	r0, [sp, #4]
	printf("[Debug] TC0 IRQ \n");
  4034ce:	4805      	ldr	r0, [pc, #20]	; (4034e4 <TC0_Handler+0x24>)
  4034d0:	4b05      	ldr	r3, [pc, #20]	; (4034e8 <TC0_Handler+0x28>)
  4034d2:	4798      	blx	r3
	UNUSED(ul_dummy);
  4034d4:	9b01      	ldr	r3, [sp, #4]
}
  4034d6:	b003      	add	sp, #12
  4034d8:	f85d fb04 	ldr.w	pc, [sp], #4
  4034dc:	4000c000 	.word	0x4000c000
  4034e0:	00400677 	.word	0x00400677
  4034e4:	0040687c 	.word	0x0040687c
  4034e8:	004038f9 	.word	0x004038f9

004034ec <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4034ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034f0:	b084      	sub	sp, #16
  4034f2:	4605      	mov	r5, r0
  4034f4:	4616      	mov	r6, r2
  4034f6:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ID_TC);
  4034f8:	4608      	mov	r0, r1
  4034fa:	4b16      	ldr	r3, [pc, #88]	; (403554 <TC_init+0x68>)
  4034fc:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4034fe:	4c16      	ldr	r4, [pc, #88]	; (403558 <TC_init+0x6c>)
  403500:	9400      	str	r4, [sp, #0]
  403502:	ab02      	add	r3, sp, #8
  403504:	aa03      	add	r2, sp, #12
  403506:	4621      	mov	r1, r4
  403508:	4638      	mov	r0, r7
  40350a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403570 <TC_init+0x84>
  40350e:	47c0      	blx	r8
	ul_tcclks = 1;
  403510:	2301      	movs	r3, #1
  403512:	9302      	str	r3, [sp, #8]
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  403514:	4a11      	ldr	r2, [pc, #68]	; (40355c <TC_init+0x70>)
  403516:	4631      	mov	r1, r6
  403518:	4628      	mov	r0, r5
  40351a:	4b11      	ldr	r3, [pc, #68]	; (403560 <TC_init+0x74>)
  40351c:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  40351e:	9a03      	ldr	r2, [sp, #12]
  403520:	fbb4 f2f2 	udiv	r2, r4, r2
  403524:	fbb2 f2f7 	udiv	r2, r2, r7
  403528:	08d2      	lsrs	r2, r2, #3
  40352a:	4631      	mov	r1, r6
  40352c:	4628      	mov	r0, r5
  40352e:	4b0d      	ldr	r3, [pc, #52]	; (403564 <TC_init+0x78>)
  403530:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  403532:	9a03      	ldr	r2, [sp, #12]
  403534:	fbb4 f2f2 	udiv	r2, r4, r2
  403538:	fbb2 f2f7 	udiv	r2, r2, r7
  40353c:	0912      	lsrs	r2, r2, #4
  40353e:	4631      	mov	r1, r6
  403540:	4628      	mov	r0, r5
  403542:	4b09      	ldr	r3, [pc, #36]	; (403568 <TC_init+0x7c>)
  403544:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL);
  403546:	4631      	mov	r1, r6
  403548:	4628      	mov	r0, r5
  40354a:	4b08      	ldr	r3, [pc, #32]	; (40356c <TC_init+0x80>)
  40354c:	4798      	blx	r3
}
  40354e:	b004      	add	sp, #16
  403550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403554:	0040100d 	.word	0x0040100d
  403558:	08f0d180 	.word	0x08f0d180
  40355c:	0009c001 	.word	0x0009c001
  403560:	00400645 	.word	0x00400645
  403564:	0040066f 	.word	0x0040066f
  403568:	00400667 	.word	0x00400667
  40356c:	0040065f 	.word	0x0040065f
  403570:	0040067f 	.word	0x0040067f

00403574 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  403574:	b580      	push	{r7, lr}
  403576:	b08e      	sub	sp, #56	; 0x38
	sysclk_init();
  403578:	4b97      	ldr	r3, [pc, #604]	; (4037d8 <main+0x264>)
  40357a:	4798      	blx	r3
	board_init();
  40357c:	4b97      	ldr	r3, [pc, #604]	; (4037dc <main+0x268>)
  40357e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403580:	4d97      	ldr	r5, [pc, #604]	; (4037e0 <main+0x26c>)
  403582:	4b98      	ldr	r3, [pc, #608]	; (4037e4 <main+0x270>)
  403584:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403586:	4a98      	ldr	r2, [pc, #608]	; (4037e8 <main+0x274>)
  403588:	4b98      	ldr	r3, [pc, #608]	; (4037ec <main+0x278>)
  40358a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40358c:	4a98      	ldr	r2, [pc, #608]	; (4037f0 <main+0x27c>)
  40358e:	4b99      	ldr	r3, [pc, #612]	; (4037f4 <main+0x280>)
  403590:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403592:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403596:	9308      	str	r3, [sp, #32]
	usart_settings.char_length = opt->charlength;
  403598:	23c0      	movs	r3, #192	; 0xc0
  40359a:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.parity_type = opt->paritytype;
  40359c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  4035a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	usart_settings.stop_bits= opt->stopbits;
  4035a4:	2400      	movs	r4, #0
  4035a6:	940b      	str	r4, [sp, #44]	; 0x2c
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4035a8:	940c      	str	r4, [sp, #48]	; 0x30
  4035aa:	200e      	movs	r0, #14
  4035ac:	4f92      	ldr	r7, [pc, #584]	; (4037f8 <main+0x284>)
  4035ae:	47b8      	blx	r7
		usart_init_rs232(p_usart, &usart_settings,
  4035b0:	4a92      	ldr	r2, [pc, #584]	; (4037fc <main+0x288>)
  4035b2:	a908      	add	r1, sp, #32
  4035b4:	4628      	mov	r0, r5
  4035b6:	4b92      	ldr	r3, [pc, #584]	; (403800 <main+0x28c>)
  4035b8:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4035ba:	4628      	mov	r0, r5
  4035bc:	4b91      	ldr	r3, [pc, #580]	; (403804 <main+0x290>)
  4035be:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4035c0:	4628      	mov	r0, r5
  4035c2:	4b91      	ldr	r3, [pc, #580]	; (403808 <main+0x294>)
  4035c4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4035c6:	4e91      	ldr	r6, [pc, #580]	; (40380c <main+0x298>)
  4035c8:	6833      	ldr	r3, [r6, #0]
  4035ca:	4621      	mov	r1, r4
  4035cc:	6898      	ldr	r0, [r3, #8]
  4035ce:	4d90      	ldr	r5, [pc, #576]	; (403810 <main+0x29c>)
  4035d0:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4035d2:	6833      	ldr	r3, [r6, #0]
  4035d4:	4621      	mov	r1, r4
  4035d6:	6858      	ldr	r0, [r3, #4]
  4035d8:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4035da:	6833      	ldr	r3, [r6, #0]
  4035dc:	4621      	mov	r1, r4
  4035de:	6898      	ldr	r0, [r3, #8]
  4035e0:	47a8      	blx	r5
	afec_enable(afec);
  4035e2:	4d8c      	ldr	r5, [pc, #560]	; (403814 <main+0x2a0>)
  4035e4:	4628      	mov	r0, r5
  4035e6:	4b8c      	ldr	r3, [pc, #560]	; (403818 <main+0x2a4>)
  4035e8:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4035ea:	a808      	add	r0, sp, #32
  4035ec:	4b8b      	ldr	r3, [pc, #556]	; (40381c <main+0x2a8>)
  4035ee:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  4035f0:	a908      	add	r1, sp, #32
  4035f2:	4628      	mov	r0, r5
  4035f4:	4b8a      	ldr	r3, [pc, #552]	; (403820 <main+0x2ac>)
  4035f6:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4035f8:	686b      	ldr	r3, [r5, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4035fa:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  4035fe:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  403602:	606b      	str	r3, [r5, #4]
	AFEC0->AFEC_MR |= 3;
  403604:	686b      	ldr	r3, [r5, #4]
  403606:	f043 0303 	orr.w	r3, r3, #3
  40360a:	606b      	str	r3, [r5, #4]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40360c:	a805      	add	r0, sp, #20
  40360e:	4b85      	ldr	r3, [pc, #532]	; (403824 <main+0x2b0>)
  403610:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  403612:	f88d 4015 	strb.w	r4, [sp, #21]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  403616:	aa05      	add	r2, sp, #20
  403618:	4621      	mov	r1, r4
  40361a:	4628      	mov	r0, r5
  40361c:	4b82      	ldr	r3, [pc, #520]	; (403828 <main+0x2b4>)
  40361e:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  403620:	666c      	str	r4, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  403622:	f44f 7300 	mov.w	r3, #512	; 0x200
  403626:	66eb      	str	r3, [r5, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403628:	a806      	add	r0, sp, #24
  40362a:	4b80      	ldr	r3, [pc, #512]	; (40382c <main+0x2b8>)
  40362c:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40362e:	a906      	add	r1, sp, #24
  403630:	4628      	mov	r0, r5
  403632:	4b7f      	ldr	r3, [pc, #508]	; (403830 <main+0x2bc>)
  403634:	4798      	blx	r3
	afec_set_callback(afec, afec_channel,	callback, 1);
  403636:	2301      	movs	r3, #1
  403638:	4a7e      	ldr	r2, [pc, #504]	; (403834 <main+0x2c0>)
  40363a:	4621      	mov	r1, r4
  40363c:	4628      	mov	r0, r5
  40363e:	4e7e      	ldr	r6, [pc, #504]	; (403838 <main+0x2c4>)
  403640:	47b0      	blx	r6
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403642:	f8df 9248 	ldr.w	r9, [pc, #584]	; 40388c <main+0x318>
  403646:	f04f 0a80 	mov.w	sl, #128	; 0x80
  40364a:	f889 a31d 	strb.w	sl, [r9, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40364e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  403652:	f8c9 3000 	str.w	r3, [r9]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403656:	2601      	movs	r6, #1
  403658:	616e      	str	r6, [r5, #20]
	TC_init(TC0, ID_TC0, 0, TS);
  40365a:	f642 23f8 	movw	r3, #11000	; 0x2af8
  40365e:	4622      	mov	r2, r4
  403660:	2117      	movs	r1, #23
  403662:	4876      	ldr	r0, [pc, #472]	; (40383c <main+0x2c8>)
  403664:	4d76      	ldr	r5, [pc, #472]	; (403840 <main+0x2cc>)
  403666:	47a8      	blx	r5
  403668:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40366c:	f8c9 3000 	str.w	r3, [r9]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403670:	f889 a30a 	strb.w	sl, [r9, #778]	; 0x30a
	pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_DEFAULT);
  403674:	4d73      	ldr	r5, [pc, #460]	; (403844 <main+0x2d0>)
  403676:	4623      	mov	r3, r4
  403678:	4642      	mov	r2, r8
  40367a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40367e:	4628      	mov	r0, r5
  403680:	f8df 920c 	ldr.w	r9, [pc, #524]	; 403890 <main+0x31c>
  403684:	47c8      	blx	r9
	pio_set_debounce_filter(BUT_PIO, BUT_PIO_PIN_MASK, 60);
  403686:	223c      	movs	r2, #60	; 0x3c
  403688:	4641      	mov	r1, r8
  40368a:	4628      	mov	r0, r5
  40368c:	4b6e      	ldr	r3, [pc, #440]	; (403848 <main+0x2d4>)
  40368e:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  403690:	4641      	mov	r1, r8
  403692:	4628      	mov	r0, r5
  403694:	4b6d      	ldr	r3, [pc, #436]	; (40384c <main+0x2d8>)
  403696:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but_callback);
  403698:	4b6d      	ldr	r3, [pc, #436]	; (403850 <main+0x2dc>)
  40369a:	9300      	str	r3, [sp, #0]
  40369c:	2350      	movs	r3, #80	; 0x50
  40369e:	4642      	mov	r2, r8
  4036a0:	210a      	movs	r1, #10
  4036a2:	4628      	mov	r0, r5
  4036a4:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 403894 <main+0x320>
  4036a8:	47d0      	blx	sl
	pmc_enable_periph_clk(LED_ID);
  4036aa:	2010      	movs	r0, #16
  4036ac:	47b8      	blx	r7
	pio_configure(LED, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  4036ae:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 403898 <main+0x324>
  4036b2:	4623      	mov	r3, r4
  4036b4:	4642      	mov	r2, r8
  4036b6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4036ba:	4650      	mov	r0, sl
  4036bc:	47c8      	blx	r9
	pmc_enable_periph_clk(IN1_M1_A_ID);
  4036be:	2010      	movs	r0, #16
  4036c0:	47b8      	blx	r7
	pio_set_output(IN1_M1_A, IN1_M1_A_IDX_MASK, 1, 0, 0);
  4036c2:	9400      	str	r4, [sp, #0]
  4036c4:	4623      	mov	r3, r4
  4036c6:	4632      	mov	r2, r6
  4036c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4036cc:	4650      	mov	r0, sl
  4036ce:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 40389c <main+0x328>
  4036d2:	47c8      	blx	r9
	pmc_enable_periph_clk(IN2_M1_B_ID);
  4036d4:	200a      	movs	r0, #10
  4036d6:	47b8      	blx	r7
	pio_set_output(IN2_M1_B, IN2_M1_B_IDX_MASK, 1, 0, 0);
  4036d8:	9400      	str	r4, [sp, #0]
  4036da:	4623      	mov	r3, r4
  4036dc:	4632      	mov	r2, r6
  4036de:	4631      	mov	r1, r6
  4036e0:	4628      	mov	r0, r5
  4036e2:	47c8      	blx	r9
	pmc_enable_periph_clk(IN3_VERD_ID);
  4036e4:	200c      	movs	r0, #12
  4036e6:	47b8      	blx	r7
	pio_set_output(IN3_VERD, IN3_VERD_IDX_MASK, 1, 0, 0);
  4036e8:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4038a0 <main+0x32c>
  4036ec:	9400      	str	r4, [sp, #0]
  4036ee:	4623      	mov	r3, r4
  4036f0:	4632      	mov	r2, r6
  4036f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4036f6:	4640      	mov	r0, r8
  4036f8:	47c8      	blx	r9
	pmc_enable_periph_clk(IN4_VERM_ID);
  4036fa:	200c      	movs	r0, #12
  4036fc:	47b8      	blx	r7
	pio_set_output(IN4_VERM, IN4_VERM_IDX_MASK, 1, 0, 0);
  4036fe:	9400      	str	r4, [sp, #0]
  403700:	4623      	mov	r3, r4
  403702:	4632      	mov	r2, r6
  403704:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403708:	4640      	mov	r0, r8
  40370a:	47c8      	blx	r9
	pio_clear(IN1_M1_A, IN1_M1_A_IDX_MASK); //Desaciona Motor M1_A
  40370c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403710:	4650      	mov	r0, sl
  403712:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4038a4 <main+0x330>
  403716:	47c8      	blx	r9
	pio_clear(IN2_M1_B, IN2_M1_B_IDX_MASK); //Desaciona Motor M1_B
  403718:	4631      	mov	r1, r6
  40371a:	4628      	mov	r0, r5
  40371c:	47c8      	blx	r9
	pio_set(IN3_VERD, IN3_VERD_IDX_MASK); //Desaciona a cor VERDE da fita
  40371e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  403722:	4640      	mov	r0, r8
  403724:	4d4b      	ldr	r5, [pc, #300]	; (403854 <main+0x2e0>)
  403726:	47a8      	blx	r5
	pio_set(IN4_VERM, IN4_VERM_IDX_MASK); //Desaciona a cor VERMELHA da fita
  403728:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40372c:	4640      	mov	r0, r8
  40372e:	47a8      	blx	r5
	xSemaphore = xSemaphoreCreateBinary();
  403730:	2203      	movs	r2, #3
  403732:	4621      	mov	r1, r4
  403734:	4630      	mov	r0, r6
  403736:	4b48      	ldr	r3, [pc, #288]	; (403858 <main+0x2e4>)
  403738:	4798      	blx	r3
  40373a:	4b48      	ldr	r3, [pc, #288]	; (40385c <main+0x2e8>)
  40373c:	6018      	str	r0, [r3, #0]
	pmc_enable_periph_clk(ID_SDRAMC);
  40373e:	203e      	movs	r0, #62	; 0x3e
  403740:	47b8      	blx	r7
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ISSI_IS42S16100E,	sysclk_get_cpu_hz());
  403742:	4947      	ldr	r1, [pc, #284]	; (403860 <main+0x2ec>)
  403744:	4847      	ldr	r0, [pc, #284]	; (403864 <main+0x2f0>)
  403746:	4b48      	ldr	r3, [pc, #288]	; (403868 <main+0x2f4>)
  403748:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  40374a:	4a48      	ldr	r2, [pc, #288]	; (40386c <main+0x2f8>)
  40374c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403752:	6293      	str	r3, [r2, #40]	; 0x28
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403754:	4b46      	ldr	r3, [pc, #280]	; (403870 <main+0x2fc>)
  403756:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40375a:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40375e:	f006 0007 	and.w	r0, r6, #7
  403762:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403764:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403768:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40376c:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  403770:	f3bf 8f4f 	dsb	sy
  403774:	f04f 34ff 	mov.w	r4, #4294967295
  403778:	fa04 fc00 	lsl.w	ip, r4, r0
  40377c:	fa0e f000 	lsl.w	r0, lr, r0
  403780:	409c      	lsls	r4, r3
  403782:	fa06 f703 	lsl.w	r7, r6, r3

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  403786:	4d3a      	ldr	r5, [pc, #232]	; (403870 <main+0x2fc>)
         int32_t tmpways = ways;
  403788:	4632      	mov	r2, r6
  40378a:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40378c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  403790:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403794:	3a01      	subs	r2, #1
  403796:	4423      	add	r3, r4
  403798:	f1b2 3fff 	cmp.w	r2, #4294967295
  40379c:	d1f6      	bne.n	40378c <main+0x218>
        } while(sets--);
  40379e:	f10e 3eff 	add.w	lr, lr, #4294967295
  4037a2:	4460      	add	r0, ip
  4037a4:	f1be 3fff 	cmp.w	lr, #4294967295
  4037a8:	d1ee      	bne.n	403788 <main+0x214>
  4037aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037ae:	f3bf 8f6f 	isb	sy
	
	/* Initialize the SAM system */
	init();
	
	if (xTaskCreate(task_adc, "adc", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  4037b2:	2300      	movs	r3, #0
  4037b4:	9303      	str	r3, [sp, #12]
  4037b6:	9302      	str	r3, [sp, #8]
  4037b8:	9301      	str	r3, [sp, #4]
  4037ba:	9300      	str	r3, [sp, #0]
  4037bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4037c0:	492c      	ldr	r1, [pc, #176]	; (403874 <main+0x300>)
  4037c2:	482d      	ldr	r0, [pc, #180]	; (403878 <main+0x304>)
  4037c4:	4c2d      	ldr	r4, [pc, #180]	; (40387c <main+0x308>)
  4037c6:	47a0      	blx	r4
  4037c8:	2801      	cmp	r0, #1
  4037ca:	d002      	beq.n	4037d2 <main+0x25e>
		printf("Failed to create test adc task\r\n");
  4037cc:	482c      	ldr	r0, [pc, #176]	; (403880 <main+0x30c>)
  4037ce:	4b2d      	ldr	r3, [pc, #180]	; (403884 <main+0x310>)
  4037d0:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  4037d2:	4b2d      	ldr	r3, [pc, #180]	; (403888 <main+0x314>)
  4037d4:	4798      	blx	r3
  4037d6:	e7fe      	b.n	4037d6 <main+0x262>
  4037d8:	004006f1 	.word	0x004006f1
  4037dc:	004007f1 	.word	0x004007f1
  4037e0:	40028000 	.word	0x40028000
  4037e4:	20400c6c 	.word	0x20400c6c
  4037e8:	004033bd 	.word	0x004033bd
  4037ec:	20400c68 	.word	0x20400c68
  4037f0:	004032e1 	.word	0x004032e1
  4037f4:	20400c64 	.word	0x20400c64
  4037f8:	0040100d 	.word	0x0040100d
  4037fc:	047868c0 	.word	0x047868c0
  403800:	00401109 	.word	0x00401109
  403804:	0040115d 	.word	0x0040115d
  403808:	00401163 	.word	0x00401163
  40380c:	20400018 	.word	0x20400018
  403810:	004040ad 	.word	0x004040ad
  403814:	4003c000 	.word	0x4003c000
  403818:	00400481 	.word	0x00400481
  40381c:	00400279 	.word	0x00400279
  403820:	004002c9 	.word	0x004002c9
  403824:	004002a9 	.word	0x004002a9
  403828:	00400235 	.word	0x00400235
  40382c:	004002b3 	.word	0x004002b3
  403830:	00400265 	.word	0x00400265
  403834:	00403275 	.word	0x00403275
  403838:	004003c9 	.word	0x004003c9
  40383c:	4000c000 	.word	0x4000c000
  403840:	004034ed 	.word	0x004034ed
  403844:	400e0e00 	.word	0x400e0e00
  403848:	00400ab5 	.word	0x00400ab5
  40384c:	00400c8b 	.word	0x00400c8b
  403850:	0040317d 	.word	0x0040317d
  403854:	00400acf 	.word	0x00400acf
  403858:	00401ab5 	.word	0x00401ab5
  40385c:	20400cb0 	.word	0x20400cb0
  403860:	08f0d180 	.word	0x08f0d180
  403864:	00406870 	.word	0x00406870
  403868:	004004e5 	.word	0x004004e5
  40386c:	40084000 	.word	0x40084000
  403870:	e000ed00 	.word	0xe000ed00
  403874:	00406890 	.word	0x00406890
  403878:	004031d9 	.word	0x004031d9
  40387c:	004021d5 	.word	0x004021d5
  403880:	00406894 	.word	0x00406894
  403884:	004038f9 	.word	0x004038f9
  403888:	00402409 	.word	0x00402409
  40388c:	e000e100 	.word	0xe000e100
  403890:	00400bc9 	.word	0x00400bc9
  403894:	00400e19 	.word	0x00400e19
  403898:	400e1400 	.word	0x400e1400
  40389c:	00400b9f 	.word	0x00400b9f
  4038a0:	400e1200 	.word	0x400e1200
  4038a4:	00400ad3 	.word	0x00400ad3

004038a8 <__libc_init_array>:
  4038a8:	b570      	push	{r4, r5, r6, lr}
  4038aa:	4e0f      	ldr	r6, [pc, #60]	; (4038e8 <__libc_init_array+0x40>)
  4038ac:	4d0f      	ldr	r5, [pc, #60]	; (4038ec <__libc_init_array+0x44>)
  4038ae:	1b76      	subs	r6, r6, r5
  4038b0:	10b6      	asrs	r6, r6, #2
  4038b2:	bf18      	it	ne
  4038b4:	2400      	movne	r4, #0
  4038b6:	d005      	beq.n	4038c4 <__libc_init_array+0x1c>
  4038b8:	3401      	adds	r4, #1
  4038ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4038be:	4798      	blx	r3
  4038c0:	42a6      	cmp	r6, r4
  4038c2:	d1f9      	bne.n	4038b8 <__libc_init_array+0x10>
  4038c4:	4e0a      	ldr	r6, [pc, #40]	; (4038f0 <__libc_init_array+0x48>)
  4038c6:	4d0b      	ldr	r5, [pc, #44]	; (4038f4 <__libc_init_array+0x4c>)
  4038c8:	1b76      	subs	r6, r6, r5
  4038ca:	f003 f8b9 	bl	406a40 <_init>
  4038ce:	10b6      	asrs	r6, r6, #2
  4038d0:	bf18      	it	ne
  4038d2:	2400      	movne	r4, #0
  4038d4:	d006      	beq.n	4038e4 <__libc_init_array+0x3c>
  4038d6:	3401      	adds	r4, #1
  4038d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4038dc:	4798      	blx	r3
  4038de:	42a6      	cmp	r6, r4
  4038e0:	d1f9      	bne.n	4038d6 <__libc_init_array+0x2e>
  4038e2:	bd70      	pop	{r4, r5, r6, pc}
  4038e4:	bd70      	pop	{r4, r5, r6, pc}
  4038e6:	bf00      	nop
  4038e8:	00406a4c 	.word	0x00406a4c
  4038ec:	00406a4c 	.word	0x00406a4c
  4038f0:	00406a54 	.word	0x00406a54
  4038f4:	00406a4c 	.word	0x00406a4c

004038f8 <iprintf>:
  4038f8:	b40f      	push	{r0, r1, r2, r3}
  4038fa:	b500      	push	{lr}
  4038fc:	4907      	ldr	r1, [pc, #28]	; (40391c <iprintf+0x24>)
  4038fe:	b083      	sub	sp, #12
  403900:	ab04      	add	r3, sp, #16
  403902:	6808      	ldr	r0, [r1, #0]
  403904:	f853 2b04 	ldr.w	r2, [r3], #4
  403908:	6881      	ldr	r1, [r0, #8]
  40390a:	9301      	str	r3, [sp, #4]
  40390c:	f000 fd66 	bl	4043dc <_vfiprintf_r>
  403910:	b003      	add	sp, #12
  403912:	f85d eb04 	ldr.w	lr, [sp], #4
  403916:	b004      	add	sp, #16
  403918:	4770      	bx	lr
  40391a:	bf00      	nop
  40391c:	20400018 	.word	0x20400018

00403920 <malloc>:
  403920:	4b02      	ldr	r3, [pc, #8]	; (40392c <malloc+0xc>)
  403922:	4601      	mov	r1, r0
  403924:	6818      	ldr	r0, [r3, #0]
  403926:	f000 b80b 	b.w	403940 <_malloc_r>
  40392a:	bf00      	nop
  40392c:	20400018 	.word	0x20400018

00403930 <free>:
  403930:	4b02      	ldr	r3, [pc, #8]	; (40393c <free+0xc>)
  403932:	4601      	mov	r1, r0
  403934:	6818      	ldr	r0, [r3, #0]
  403936:	f001 be6d 	b.w	405614 <_free_r>
  40393a:	bf00      	nop
  40393c:	20400018 	.word	0x20400018

00403940 <_malloc_r>:
  403940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403944:	f101 060b 	add.w	r6, r1, #11
  403948:	2e16      	cmp	r6, #22
  40394a:	b083      	sub	sp, #12
  40394c:	4605      	mov	r5, r0
  40394e:	f240 809e 	bls.w	403a8e <_malloc_r+0x14e>
  403952:	f036 0607 	bics.w	r6, r6, #7
  403956:	f100 80bd 	bmi.w	403ad4 <_malloc_r+0x194>
  40395a:	42b1      	cmp	r1, r6
  40395c:	f200 80ba 	bhi.w	403ad4 <_malloc_r+0x194>
  403960:	f000 fb86 	bl	404070 <__malloc_lock>
  403964:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403968:	f0c0 8293 	bcc.w	403e92 <_malloc_r+0x552>
  40396c:	0a73      	lsrs	r3, r6, #9
  40396e:	f000 80b8 	beq.w	403ae2 <_malloc_r+0x1a2>
  403972:	2b04      	cmp	r3, #4
  403974:	f200 8179 	bhi.w	403c6a <_malloc_r+0x32a>
  403978:	09b3      	lsrs	r3, r6, #6
  40397a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40397e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403982:	00c3      	lsls	r3, r0, #3
  403984:	4fbf      	ldr	r7, [pc, #764]	; (403c84 <_malloc_r+0x344>)
  403986:	443b      	add	r3, r7
  403988:	f1a3 0108 	sub.w	r1, r3, #8
  40398c:	685c      	ldr	r4, [r3, #4]
  40398e:	42a1      	cmp	r1, r4
  403990:	d106      	bne.n	4039a0 <_malloc_r+0x60>
  403992:	e00c      	b.n	4039ae <_malloc_r+0x6e>
  403994:	2a00      	cmp	r2, #0
  403996:	f280 80aa 	bge.w	403aee <_malloc_r+0x1ae>
  40399a:	68e4      	ldr	r4, [r4, #12]
  40399c:	42a1      	cmp	r1, r4
  40399e:	d006      	beq.n	4039ae <_malloc_r+0x6e>
  4039a0:	6863      	ldr	r3, [r4, #4]
  4039a2:	f023 0303 	bic.w	r3, r3, #3
  4039a6:	1b9a      	subs	r2, r3, r6
  4039a8:	2a0f      	cmp	r2, #15
  4039aa:	ddf3      	ble.n	403994 <_malloc_r+0x54>
  4039ac:	4670      	mov	r0, lr
  4039ae:	693c      	ldr	r4, [r7, #16]
  4039b0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403c98 <_malloc_r+0x358>
  4039b4:	4574      	cmp	r4, lr
  4039b6:	f000 81ab 	beq.w	403d10 <_malloc_r+0x3d0>
  4039ba:	6863      	ldr	r3, [r4, #4]
  4039bc:	f023 0303 	bic.w	r3, r3, #3
  4039c0:	1b9a      	subs	r2, r3, r6
  4039c2:	2a0f      	cmp	r2, #15
  4039c4:	f300 8190 	bgt.w	403ce8 <_malloc_r+0x3a8>
  4039c8:	2a00      	cmp	r2, #0
  4039ca:	f8c7 e014 	str.w	lr, [r7, #20]
  4039ce:	f8c7 e010 	str.w	lr, [r7, #16]
  4039d2:	f280 809d 	bge.w	403b10 <_malloc_r+0x1d0>
  4039d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4039da:	f080 8161 	bcs.w	403ca0 <_malloc_r+0x360>
  4039de:	08db      	lsrs	r3, r3, #3
  4039e0:	f103 0c01 	add.w	ip, r3, #1
  4039e4:	1099      	asrs	r1, r3, #2
  4039e6:	687a      	ldr	r2, [r7, #4]
  4039e8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4039ec:	f8c4 8008 	str.w	r8, [r4, #8]
  4039f0:	2301      	movs	r3, #1
  4039f2:	408b      	lsls	r3, r1
  4039f4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4039f8:	4313      	orrs	r3, r2
  4039fa:	3908      	subs	r1, #8
  4039fc:	60e1      	str	r1, [r4, #12]
  4039fe:	607b      	str	r3, [r7, #4]
  403a00:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403a04:	f8c8 400c 	str.w	r4, [r8, #12]
  403a08:	1082      	asrs	r2, r0, #2
  403a0a:	2401      	movs	r4, #1
  403a0c:	4094      	lsls	r4, r2
  403a0e:	429c      	cmp	r4, r3
  403a10:	f200 808b 	bhi.w	403b2a <_malloc_r+0x1ea>
  403a14:	421c      	tst	r4, r3
  403a16:	d106      	bne.n	403a26 <_malloc_r+0xe6>
  403a18:	f020 0003 	bic.w	r0, r0, #3
  403a1c:	0064      	lsls	r4, r4, #1
  403a1e:	421c      	tst	r4, r3
  403a20:	f100 0004 	add.w	r0, r0, #4
  403a24:	d0fa      	beq.n	403a1c <_malloc_r+0xdc>
  403a26:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403a2a:	46cc      	mov	ip, r9
  403a2c:	4680      	mov	r8, r0
  403a2e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403a32:	459c      	cmp	ip, r3
  403a34:	d107      	bne.n	403a46 <_malloc_r+0x106>
  403a36:	e16d      	b.n	403d14 <_malloc_r+0x3d4>
  403a38:	2a00      	cmp	r2, #0
  403a3a:	f280 817b 	bge.w	403d34 <_malloc_r+0x3f4>
  403a3e:	68db      	ldr	r3, [r3, #12]
  403a40:	459c      	cmp	ip, r3
  403a42:	f000 8167 	beq.w	403d14 <_malloc_r+0x3d4>
  403a46:	6859      	ldr	r1, [r3, #4]
  403a48:	f021 0103 	bic.w	r1, r1, #3
  403a4c:	1b8a      	subs	r2, r1, r6
  403a4e:	2a0f      	cmp	r2, #15
  403a50:	ddf2      	ble.n	403a38 <_malloc_r+0xf8>
  403a52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403a56:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403a5a:	9300      	str	r3, [sp, #0]
  403a5c:	199c      	adds	r4, r3, r6
  403a5e:	4628      	mov	r0, r5
  403a60:	f046 0601 	orr.w	r6, r6, #1
  403a64:	f042 0501 	orr.w	r5, r2, #1
  403a68:	605e      	str	r6, [r3, #4]
  403a6a:	f8c8 c00c 	str.w	ip, [r8, #12]
  403a6e:	f8cc 8008 	str.w	r8, [ip, #8]
  403a72:	617c      	str	r4, [r7, #20]
  403a74:	613c      	str	r4, [r7, #16]
  403a76:	f8c4 e00c 	str.w	lr, [r4, #12]
  403a7a:	f8c4 e008 	str.w	lr, [r4, #8]
  403a7e:	6065      	str	r5, [r4, #4]
  403a80:	505a      	str	r2, [r3, r1]
  403a82:	f000 fafb 	bl	40407c <__malloc_unlock>
  403a86:	9b00      	ldr	r3, [sp, #0]
  403a88:	f103 0408 	add.w	r4, r3, #8
  403a8c:	e01e      	b.n	403acc <_malloc_r+0x18c>
  403a8e:	2910      	cmp	r1, #16
  403a90:	d820      	bhi.n	403ad4 <_malloc_r+0x194>
  403a92:	f000 faed 	bl	404070 <__malloc_lock>
  403a96:	2610      	movs	r6, #16
  403a98:	2318      	movs	r3, #24
  403a9a:	2002      	movs	r0, #2
  403a9c:	4f79      	ldr	r7, [pc, #484]	; (403c84 <_malloc_r+0x344>)
  403a9e:	443b      	add	r3, r7
  403aa0:	f1a3 0208 	sub.w	r2, r3, #8
  403aa4:	685c      	ldr	r4, [r3, #4]
  403aa6:	4294      	cmp	r4, r2
  403aa8:	f000 813d 	beq.w	403d26 <_malloc_r+0x3e6>
  403aac:	6863      	ldr	r3, [r4, #4]
  403aae:	68e1      	ldr	r1, [r4, #12]
  403ab0:	68a6      	ldr	r6, [r4, #8]
  403ab2:	f023 0303 	bic.w	r3, r3, #3
  403ab6:	4423      	add	r3, r4
  403ab8:	4628      	mov	r0, r5
  403aba:	685a      	ldr	r2, [r3, #4]
  403abc:	60f1      	str	r1, [r6, #12]
  403abe:	f042 0201 	orr.w	r2, r2, #1
  403ac2:	608e      	str	r6, [r1, #8]
  403ac4:	605a      	str	r2, [r3, #4]
  403ac6:	f000 fad9 	bl	40407c <__malloc_unlock>
  403aca:	3408      	adds	r4, #8
  403acc:	4620      	mov	r0, r4
  403ace:	b003      	add	sp, #12
  403ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ad4:	2400      	movs	r4, #0
  403ad6:	230c      	movs	r3, #12
  403ad8:	4620      	mov	r0, r4
  403ada:	602b      	str	r3, [r5, #0]
  403adc:	b003      	add	sp, #12
  403ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ae2:	2040      	movs	r0, #64	; 0x40
  403ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
  403ae8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403aec:	e74a      	b.n	403984 <_malloc_r+0x44>
  403aee:	4423      	add	r3, r4
  403af0:	68e1      	ldr	r1, [r4, #12]
  403af2:	685a      	ldr	r2, [r3, #4]
  403af4:	68a6      	ldr	r6, [r4, #8]
  403af6:	f042 0201 	orr.w	r2, r2, #1
  403afa:	60f1      	str	r1, [r6, #12]
  403afc:	4628      	mov	r0, r5
  403afe:	608e      	str	r6, [r1, #8]
  403b00:	605a      	str	r2, [r3, #4]
  403b02:	f000 fabb 	bl	40407c <__malloc_unlock>
  403b06:	3408      	adds	r4, #8
  403b08:	4620      	mov	r0, r4
  403b0a:	b003      	add	sp, #12
  403b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b10:	4423      	add	r3, r4
  403b12:	4628      	mov	r0, r5
  403b14:	685a      	ldr	r2, [r3, #4]
  403b16:	f042 0201 	orr.w	r2, r2, #1
  403b1a:	605a      	str	r2, [r3, #4]
  403b1c:	f000 faae 	bl	40407c <__malloc_unlock>
  403b20:	3408      	adds	r4, #8
  403b22:	4620      	mov	r0, r4
  403b24:	b003      	add	sp, #12
  403b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b2a:	68bc      	ldr	r4, [r7, #8]
  403b2c:	6863      	ldr	r3, [r4, #4]
  403b2e:	f023 0803 	bic.w	r8, r3, #3
  403b32:	45b0      	cmp	r8, r6
  403b34:	d304      	bcc.n	403b40 <_malloc_r+0x200>
  403b36:	eba8 0306 	sub.w	r3, r8, r6
  403b3a:	2b0f      	cmp	r3, #15
  403b3c:	f300 8085 	bgt.w	403c4a <_malloc_r+0x30a>
  403b40:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403c9c <_malloc_r+0x35c>
  403b44:	4b50      	ldr	r3, [pc, #320]	; (403c88 <_malloc_r+0x348>)
  403b46:	f8d9 2000 	ldr.w	r2, [r9]
  403b4a:	681b      	ldr	r3, [r3, #0]
  403b4c:	3201      	adds	r2, #1
  403b4e:	4433      	add	r3, r6
  403b50:	eb04 0a08 	add.w	sl, r4, r8
  403b54:	f000 8155 	beq.w	403e02 <_malloc_r+0x4c2>
  403b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403b5c:	330f      	adds	r3, #15
  403b5e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403b62:	f02b 0b0f 	bic.w	fp, fp, #15
  403b66:	4659      	mov	r1, fp
  403b68:	4628      	mov	r0, r5
  403b6a:	f000 fa8d 	bl	404088 <_sbrk_r>
  403b6e:	1c41      	adds	r1, r0, #1
  403b70:	4602      	mov	r2, r0
  403b72:	f000 80fc 	beq.w	403d6e <_malloc_r+0x42e>
  403b76:	4582      	cmp	sl, r0
  403b78:	f200 80f7 	bhi.w	403d6a <_malloc_r+0x42a>
  403b7c:	4b43      	ldr	r3, [pc, #268]	; (403c8c <_malloc_r+0x34c>)
  403b7e:	6819      	ldr	r1, [r3, #0]
  403b80:	4459      	add	r1, fp
  403b82:	6019      	str	r1, [r3, #0]
  403b84:	f000 814d 	beq.w	403e22 <_malloc_r+0x4e2>
  403b88:	f8d9 0000 	ldr.w	r0, [r9]
  403b8c:	3001      	adds	r0, #1
  403b8e:	bf1b      	ittet	ne
  403b90:	eba2 0a0a 	subne.w	sl, r2, sl
  403b94:	4451      	addne	r1, sl
  403b96:	f8c9 2000 	streq.w	r2, [r9]
  403b9a:	6019      	strne	r1, [r3, #0]
  403b9c:	f012 0107 	ands.w	r1, r2, #7
  403ba0:	f000 8115 	beq.w	403dce <_malloc_r+0x48e>
  403ba4:	f1c1 0008 	rsb	r0, r1, #8
  403ba8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403bac:	4402      	add	r2, r0
  403bae:	3108      	adds	r1, #8
  403bb0:	eb02 090b 	add.w	r9, r2, fp
  403bb4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403bb8:	eba1 0909 	sub.w	r9, r1, r9
  403bbc:	4649      	mov	r1, r9
  403bbe:	4628      	mov	r0, r5
  403bc0:	9301      	str	r3, [sp, #4]
  403bc2:	9200      	str	r2, [sp, #0]
  403bc4:	f000 fa60 	bl	404088 <_sbrk_r>
  403bc8:	1c43      	adds	r3, r0, #1
  403bca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403bce:	f000 8143 	beq.w	403e58 <_malloc_r+0x518>
  403bd2:	1a80      	subs	r0, r0, r2
  403bd4:	4448      	add	r0, r9
  403bd6:	f040 0001 	orr.w	r0, r0, #1
  403bda:	6819      	ldr	r1, [r3, #0]
  403bdc:	60ba      	str	r2, [r7, #8]
  403bde:	4449      	add	r1, r9
  403be0:	42bc      	cmp	r4, r7
  403be2:	6050      	str	r0, [r2, #4]
  403be4:	6019      	str	r1, [r3, #0]
  403be6:	d017      	beq.n	403c18 <_malloc_r+0x2d8>
  403be8:	f1b8 0f0f 	cmp.w	r8, #15
  403bec:	f240 80fb 	bls.w	403de6 <_malloc_r+0x4a6>
  403bf0:	6860      	ldr	r0, [r4, #4]
  403bf2:	f1a8 020c 	sub.w	r2, r8, #12
  403bf6:	f022 0207 	bic.w	r2, r2, #7
  403bfa:	eb04 0e02 	add.w	lr, r4, r2
  403bfe:	f000 0001 	and.w	r0, r0, #1
  403c02:	f04f 0c05 	mov.w	ip, #5
  403c06:	4310      	orrs	r0, r2
  403c08:	2a0f      	cmp	r2, #15
  403c0a:	6060      	str	r0, [r4, #4]
  403c0c:	f8ce c004 	str.w	ip, [lr, #4]
  403c10:	f8ce c008 	str.w	ip, [lr, #8]
  403c14:	f200 8117 	bhi.w	403e46 <_malloc_r+0x506>
  403c18:	4b1d      	ldr	r3, [pc, #116]	; (403c90 <_malloc_r+0x350>)
  403c1a:	68bc      	ldr	r4, [r7, #8]
  403c1c:	681a      	ldr	r2, [r3, #0]
  403c1e:	4291      	cmp	r1, r2
  403c20:	bf88      	it	hi
  403c22:	6019      	strhi	r1, [r3, #0]
  403c24:	4b1b      	ldr	r3, [pc, #108]	; (403c94 <_malloc_r+0x354>)
  403c26:	681a      	ldr	r2, [r3, #0]
  403c28:	4291      	cmp	r1, r2
  403c2a:	6862      	ldr	r2, [r4, #4]
  403c2c:	bf88      	it	hi
  403c2e:	6019      	strhi	r1, [r3, #0]
  403c30:	f022 0203 	bic.w	r2, r2, #3
  403c34:	4296      	cmp	r6, r2
  403c36:	eba2 0306 	sub.w	r3, r2, r6
  403c3a:	d801      	bhi.n	403c40 <_malloc_r+0x300>
  403c3c:	2b0f      	cmp	r3, #15
  403c3e:	dc04      	bgt.n	403c4a <_malloc_r+0x30a>
  403c40:	4628      	mov	r0, r5
  403c42:	f000 fa1b 	bl	40407c <__malloc_unlock>
  403c46:	2400      	movs	r4, #0
  403c48:	e740      	b.n	403acc <_malloc_r+0x18c>
  403c4a:	19a2      	adds	r2, r4, r6
  403c4c:	f043 0301 	orr.w	r3, r3, #1
  403c50:	f046 0601 	orr.w	r6, r6, #1
  403c54:	6066      	str	r6, [r4, #4]
  403c56:	4628      	mov	r0, r5
  403c58:	60ba      	str	r2, [r7, #8]
  403c5a:	6053      	str	r3, [r2, #4]
  403c5c:	f000 fa0e 	bl	40407c <__malloc_unlock>
  403c60:	3408      	adds	r4, #8
  403c62:	4620      	mov	r0, r4
  403c64:	b003      	add	sp, #12
  403c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6a:	2b14      	cmp	r3, #20
  403c6c:	d971      	bls.n	403d52 <_malloc_r+0x412>
  403c6e:	2b54      	cmp	r3, #84	; 0x54
  403c70:	f200 80a3 	bhi.w	403dba <_malloc_r+0x47a>
  403c74:	0b33      	lsrs	r3, r6, #12
  403c76:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403c7a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403c7e:	00c3      	lsls	r3, r0, #3
  403c80:	e680      	b.n	403984 <_malloc_r+0x44>
  403c82:	bf00      	nop
  403c84:	20400448 	.word	0x20400448
  403c88:	20400bd8 	.word	0x20400bd8
  403c8c:	20400ba8 	.word	0x20400ba8
  403c90:	20400bd0 	.word	0x20400bd0
  403c94:	20400bd4 	.word	0x20400bd4
  403c98:	20400450 	.word	0x20400450
  403c9c:	20400850 	.word	0x20400850
  403ca0:	0a5a      	lsrs	r2, r3, #9
  403ca2:	2a04      	cmp	r2, #4
  403ca4:	d95b      	bls.n	403d5e <_malloc_r+0x41e>
  403ca6:	2a14      	cmp	r2, #20
  403ca8:	f200 80ae 	bhi.w	403e08 <_malloc_r+0x4c8>
  403cac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403cb0:	00c9      	lsls	r1, r1, #3
  403cb2:	325b      	adds	r2, #91	; 0x5b
  403cb4:	eb07 0c01 	add.w	ip, r7, r1
  403cb8:	5879      	ldr	r1, [r7, r1]
  403cba:	f1ac 0c08 	sub.w	ip, ip, #8
  403cbe:	458c      	cmp	ip, r1
  403cc0:	f000 8088 	beq.w	403dd4 <_malloc_r+0x494>
  403cc4:	684a      	ldr	r2, [r1, #4]
  403cc6:	f022 0203 	bic.w	r2, r2, #3
  403cca:	4293      	cmp	r3, r2
  403ccc:	d273      	bcs.n	403db6 <_malloc_r+0x476>
  403cce:	6889      	ldr	r1, [r1, #8]
  403cd0:	458c      	cmp	ip, r1
  403cd2:	d1f7      	bne.n	403cc4 <_malloc_r+0x384>
  403cd4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403cd8:	687b      	ldr	r3, [r7, #4]
  403cda:	60e2      	str	r2, [r4, #12]
  403cdc:	f8c4 c008 	str.w	ip, [r4, #8]
  403ce0:	6094      	str	r4, [r2, #8]
  403ce2:	f8cc 400c 	str.w	r4, [ip, #12]
  403ce6:	e68f      	b.n	403a08 <_malloc_r+0xc8>
  403ce8:	19a1      	adds	r1, r4, r6
  403cea:	f046 0c01 	orr.w	ip, r6, #1
  403cee:	f042 0601 	orr.w	r6, r2, #1
  403cf2:	f8c4 c004 	str.w	ip, [r4, #4]
  403cf6:	4628      	mov	r0, r5
  403cf8:	6179      	str	r1, [r7, #20]
  403cfa:	6139      	str	r1, [r7, #16]
  403cfc:	f8c1 e00c 	str.w	lr, [r1, #12]
  403d00:	f8c1 e008 	str.w	lr, [r1, #8]
  403d04:	604e      	str	r6, [r1, #4]
  403d06:	50e2      	str	r2, [r4, r3]
  403d08:	f000 f9b8 	bl	40407c <__malloc_unlock>
  403d0c:	3408      	adds	r4, #8
  403d0e:	e6dd      	b.n	403acc <_malloc_r+0x18c>
  403d10:	687b      	ldr	r3, [r7, #4]
  403d12:	e679      	b.n	403a08 <_malloc_r+0xc8>
  403d14:	f108 0801 	add.w	r8, r8, #1
  403d18:	f018 0f03 	tst.w	r8, #3
  403d1c:	f10c 0c08 	add.w	ip, ip, #8
  403d20:	f47f ae85 	bne.w	403a2e <_malloc_r+0xee>
  403d24:	e02d      	b.n	403d82 <_malloc_r+0x442>
  403d26:	68dc      	ldr	r4, [r3, #12]
  403d28:	42a3      	cmp	r3, r4
  403d2a:	bf08      	it	eq
  403d2c:	3002      	addeq	r0, #2
  403d2e:	f43f ae3e 	beq.w	4039ae <_malloc_r+0x6e>
  403d32:	e6bb      	b.n	403aac <_malloc_r+0x16c>
  403d34:	4419      	add	r1, r3
  403d36:	461c      	mov	r4, r3
  403d38:	684a      	ldr	r2, [r1, #4]
  403d3a:	68db      	ldr	r3, [r3, #12]
  403d3c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403d40:	f042 0201 	orr.w	r2, r2, #1
  403d44:	604a      	str	r2, [r1, #4]
  403d46:	4628      	mov	r0, r5
  403d48:	60f3      	str	r3, [r6, #12]
  403d4a:	609e      	str	r6, [r3, #8]
  403d4c:	f000 f996 	bl	40407c <__malloc_unlock>
  403d50:	e6bc      	b.n	403acc <_malloc_r+0x18c>
  403d52:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403d56:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403d5a:	00c3      	lsls	r3, r0, #3
  403d5c:	e612      	b.n	403984 <_malloc_r+0x44>
  403d5e:	099a      	lsrs	r2, r3, #6
  403d60:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403d64:	00c9      	lsls	r1, r1, #3
  403d66:	3238      	adds	r2, #56	; 0x38
  403d68:	e7a4      	b.n	403cb4 <_malloc_r+0x374>
  403d6a:	42bc      	cmp	r4, r7
  403d6c:	d054      	beq.n	403e18 <_malloc_r+0x4d8>
  403d6e:	68bc      	ldr	r4, [r7, #8]
  403d70:	6862      	ldr	r2, [r4, #4]
  403d72:	f022 0203 	bic.w	r2, r2, #3
  403d76:	e75d      	b.n	403c34 <_malloc_r+0x2f4>
  403d78:	f859 3908 	ldr.w	r3, [r9], #-8
  403d7c:	4599      	cmp	r9, r3
  403d7e:	f040 8086 	bne.w	403e8e <_malloc_r+0x54e>
  403d82:	f010 0f03 	tst.w	r0, #3
  403d86:	f100 30ff 	add.w	r0, r0, #4294967295
  403d8a:	d1f5      	bne.n	403d78 <_malloc_r+0x438>
  403d8c:	687b      	ldr	r3, [r7, #4]
  403d8e:	ea23 0304 	bic.w	r3, r3, r4
  403d92:	607b      	str	r3, [r7, #4]
  403d94:	0064      	lsls	r4, r4, #1
  403d96:	429c      	cmp	r4, r3
  403d98:	f63f aec7 	bhi.w	403b2a <_malloc_r+0x1ea>
  403d9c:	2c00      	cmp	r4, #0
  403d9e:	f43f aec4 	beq.w	403b2a <_malloc_r+0x1ea>
  403da2:	421c      	tst	r4, r3
  403da4:	4640      	mov	r0, r8
  403da6:	f47f ae3e 	bne.w	403a26 <_malloc_r+0xe6>
  403daa:	0064      	lsls	r4, r4, #1
  403dac:	421c      	tst	r4, r3
  403dae:	f100 0004 	add.w	r0, r0, #4
  403db2:	d0fa      	beq.n	403daa <_malloc_r+0x46a>
  403db4:	e637      	b.n	403a26 <_malloc_r+0xe6>
  403db6:	468c      	mov	ip, r1
  403db8:	e78c      	b.n	403cd4 <_malloc_r+0x394>
  403dba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403dbe:	d815      	bhi.n	403dec <_malloc_r+0x4ac>
  403dc0:	0bf3      	lsrs	r3, r6, #15
  403dc2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403dc6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403dca:	00c3      	lsls	r3, r0, #3
  403dcc:	e5da      	b.n	403984 <_malloc_r+0x44>
  403dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403dd2:	e6ed      	b.n	403bb0 <_malloc_r+0x270>
  403dd4:	687b      	ldr	r3, [r7, #4]
  403dd6:	1092      	asrs	r2, r2, #2
  403dd8:	2101      	movs	r1, #1
  403dda:	fa01 f202 	lsl.w	r2, r1, r2
  403dde:	4313      	orrs	r3, r2
  403de0:	607b      	str	r3, [r7, #4]
  403de2:	4662      	mov	r2, ip
  403de4:	e779      	b.n	403cda <_malloc_r+0x39a>
  403de6:	2301      	movs	r3, #1
  403de8:	6053      	str	r3, [r2, #4]
  403dea:	e729      	b.n	403c40 <_malloc_r+0x300>
  403dec:	f240 5254 	movw	r2, #1364	; 0x554
  403df0:	4293      	cmp	r3, r2
  403df2:	d822      	bhi.n	403e3a <_malloc_r+0x4fa>
  403df4:	0cb3      	lsrs	r3, r6, #18
  403df6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403dfa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403dfe:	00c3      	lsls	r3, r0, #3
  403e00:	e5c0      	b.n	403984 <_malloc_r+0x44>
  403e02:	f103 0b10 	add.w	fp, r3, #16
  403e06:	e6ae      	b.n	403b66 <_malloc_r+0x226>
  403e08:	2a54      	cmp	r2, #84	; 0x54
  403e0a:	d829      	bhi.n	403e60 <_malloc_r+0x520>
  403e0c:	0b1a      	lsrs	r2, r3, #12
  403e0e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403e12:	00c9      	lsls	r1, r1, #3
  403e14:	326e      	adds	r2, #110	; 0x6e
  403e16:	e74d      	b.n	403cb4 <_malloc_r+0x374>
  403e18:	4b20      	ldr	r3, [pc, #128]	; (403e9c <_malloc_r+0x55c>)
  403e1a:	6819      	ldr	r1, [r3, #0]
  403e1c:	4459      	add	r1, fp
  403e1e:	6019      	str	r1, [r3, #0]
  403e20:	e6b2      	b.n	403b88 <_malloc_r+0x248>
  403e22:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403e26:	2800      	cmp	r0, #0
  403e28:	f47f aeae 	bne.w	403b88 <_malloc_r+0x248>
  403e2c:	eb08 030b 	add.w	r3, r8, fp
  403e30:	68ba      	ldr	r2, [r7, #8]
  403e32:	f043 0301 	orr.w	r3, r3, #1
  403e36:	6053      	str	r3, [r2, #4]
  403e38:	e6ee      	b.n	403c18 <_malloc_r+0x2d8>
  403e3a:	207f      	movs	r0, #127	; 0x7f
  403e3c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403e40:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403e44:	e59e      	b.n	403984 <_malloc_r+0x44>
  403e46:	f104 0108 	add.w	r1, r4, #8
  403e4a:	4628      	mov	r0, r5
  403e4c:	9300      	str	r3, [sp, #0]
  403e4e:	f001 fbe1 	bl	405614 <_free_r>
  403e52:	9b00      	ldr	r3, [sp, #0]
  403e54:	6819      	ldr	r1, [r3, #0]
  403e56:	e6df      	b.n	403c18 <_malloc_r+0x2d8>
  403e58:	2001      	movs	r0, #1
  403e5a:	f04f 0900 	mov.w	r9, #0
  403e5e:	e6bc      	b.n	403bda <_malloc_r+0x29a>
  403e60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e64:	d805      	bhi.n	403e72 <_malloc_r+0x532>
  403e66:	0bda      	lsrs	r2, r3, #15
  403e68:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403e6c:	00c9      	lsls	r1, r1, #3
  403e6e:	3277      	adds	r2, #119	; 0x77
  403e70:	e720      	b.n	403cb4 <_malloc_r+0x374>
  403e72:	f240 5154 	movw	r1, #1364	; 0x554
  403e76:	428a      	cmp	r2, r1
  403e78:	d805      	bhi.n	403e86 <_malloc_r+0x546>
  403e7a:	0c9a      	lsrs	r2, r3, #18
  403e7c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403e80:	00c9      	lsls	r1, r1, #3
  403e82:	327c      	adds	r2, #124	; 0x7c
  403e84:	e716      	b.n	403cb4 <_malloc_r+0x374>
  403e86:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403e8a:	227e      	movs	r2, #126	; 0x7e
  403e8c:	e712      	b.n	403cb4 <_malloc_r+0x374>
  403e8e:	687b      	ldr	r3, [r7, #4]
  403e90:	e780      	b.n	403d94 <_malloc_r+0x454>
  403e92:	08f0      	lsrs	r0, r6, #3
  403e94:	f106 0308 	add.w	r3, r6, #8
  403e98:	e600      	b.n	403a9c <_malloc_r+0x15c>
  403e9a:	bf00      	nop
  403e9c:	20400ba8 	.word	0x20400ba8

00403ea0 <memcpy>:
  403ea0:	4684      	mov	ip, r0
  403ea2:	ea41 0300 	orr.w	r3, r1, r0
  403ea6:	f013 0303 	ands.w	r3, r3, #3
  403eaa:	d16d      	bne.n	403f88 <memcpy+0xe8>
  403eac:	3a40      	subs	r2, #64	; 0x40
  403eae:	d341      	bcc.n	403f34 <memcpy+0x94>
  403eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  403eb4:	f840 3b04 	str.w	r3, [r0], #4
  403eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ebc:	f840 3b04 	str.w	r3, [r0], #4
  403ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ec4:	f840 3b04 	str.w	r3, [r0], #4
  403ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ecc:	f840 3b04 	str.w	r3, [r0], #4
  403ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed4:	f840 3b04 	str.w	r3, [r0], #4
  403ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  403edc:	f840 3b04 	str.w	r3, [r0], #4
  403ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee4:	f840 3b04 	str.w	r3, [r0], #4
  403ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  403eec:	f840 3b04 	str.w	r3, [r0], #4
  403ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef4:	f840 3b04 	str.w	r3, [r0], #4
  403ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  403efc:	f840 3b04 	str.w	r3, [r0], #4
  403f00:	f851 3b04 	ldr.w	r3, [r1], #4
  403f04:	f840 3b04 	str.w	r3, [r0], #4
  403f08:	f851 3b04 	ldr.w	r3, [r1], #4
  403f0c:	f840 3b04 	str.w	r3, [r0], #4
  403f10:	f851 3b04 	ldr.w	r3, [r1], #4
  403f14:	f840 3b04 	str.w	r3, [r0], #4
  403f18:	f851 3b04 	ldr.w	r3, [r1], #4
  403f1c:	f840 3b04 	str.w	r3, [r0], #4
  403f20:	f851 3b04 	ldr.w	r3, [r1], #4
  403f24:	f840 3b04 	str.w	r3, [r0], #4
  403f28:	f851 3b04 	ldr.w	r3, [r1], #4
  403f2c:	f840 3b04 	str.w	r3, [r0], #4
  403f30:	3a40      	subs	r2, #64	; 0x40
  403f32:	d2bd      	bcs.n	403eb0 <memcpy+0x10>
  403f34:	3230      	adds	r2, #48	; 0x30
  403f36:	d311      	bcc.n	403f5c <memcpy+0xbc>
  403f38:	f851 3b04 	ldr.w	r3, [r1], #4
  403f3c:	f840 3b04 	str.w	r3, [r0], #4
  403f40:	f851 3b04 	ldr.w	r3, [r1], #4
  403f44:	f840 3b04 	str.w	r3, [r0], #4
  403f48:	f851 3b04 	ldr.w	r3, [r1], #4
  403f4c:	f840 3b04 	str.w	r3, [r0], #4
  403f50:	f851 3b04 	ldr.w	r3, [r1], #4
  403f54:	f840 3b04 	str.w	r3, [r0], #4
  403f58:	3a10      	subs	r2, #16
  403f5a:	d2ed      	bcs.n	403f38 <memcpy+0x98>
  403f5c:	320c      	adds	r2, #12
  403f5e:	d305      	bcc.n	403f6c <memcpy+0xcc>
  403f60:	f851 3b04 	ldr.w	r3, [r1], #4
  403f64:	f840 3b04 	str.w	r3, [r0], #4
  403f68:	3a04      	subs	r2, #4
  403f6a:	d2f9      	bcs.n	403f60 <memcpy+0xc0>
  403f6c:	3204      	adds	r2, #4
  403f6e:	d008      	beq.n	403f82 <memcpy+0xe2>
  403f70:	07d2      	lsls	r2, r2, #31
  403f72:	bf1c      	itt	ne
  403f74:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f78:	f800 3b01 	strbne.w	r3, [r0], #1
  403f7c:	d301      	bcc.n	403f82 <memcpy+0xe2>
  403f7e:	880b      	ldrh	r3, [r1, #0]
  403f80:	8003      	strh	r3, [r0, #0]
  403f82:	4660      	mov	r0, ip
  403f84:	4770      	bx	lr
  403f86:	bf00      	nop
  403f88:	2a08      	cmp	r2, #8
  403f8a:	d313      	bcc.n	403fb4 <memcpy+0x114>
  403f8c:	078b      	lsls	r3, r1, #30
  403f8e:	d08d      	beq.n	403eac <memcpy+0xc>
  403f90:	f010 0303 	ands.w	r3, r0, #3
  403f94:	d08a      	beq.n	403eac <memcpy+0xc>
  403f96:	f1c3 0304 	rsb	r3, r3, #4
  403f9a:	1ad2      	subs	r2, r2, r3
  403f9c:	07db      	lsls	r3, r3, #31
  403f9e:	bf1c      	itt	ne
  403fa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403fa4:	f800 3b01 	strbne.w	r3, [r0], #1
  403fa8:	d380      	bcc.n	403eac <memcpy+0xc>
  403faa:	f831 3b02 	ldrh.w	r3, [r1], #2
  403fae:	f820 3b02 	strh.w	r3, [r0], #2
  403fb2:	e77b      	b.n	403eac <memcpy+0xc>
  403fb4:	3a04      	subs	r2, #4
  403fb6:	d3d9      	bcc.n	403f6c <memcpy+0xcc>
  403fb8:	3a01      	subs	r2, #1
  403fba:	f811 3b01 	ldrb.w	r3, [r1], #1
  403fbe:	f800 3b01 	strb.w	r3, [r0], #1
  403fc2:	d2f9      	bcs.n	403fb8 <memcpy+0x118>
  403fc4:	780b      	ldrb	r3, [r1, #0]
  403fc6:	7003      	strb	r3, [r0, #0]
  403fc8:	784b      	ldrb	r3, [r1, #1]
  403fca:	7043      	strb	r3, [r0, #1]
  403fcc:	788b      	ldrb	r3, [r1, #2]
  403fce:	7083      	strb	r3, [r0, #2]
  403fd0:	4660      	mov	r0, ip
  403fd2:	4770      	bx	lr

00403fd4 <memset>:
  403fd4:	b470      	push	{r4, r5, r6}
  403fd6:	0786      	lsls	r6, r0, #30
  403fd8:	d046      	beq.n	404068 <memset+0x94>
  403fda:	1e54      	subs	r4, r2, #1
  403fdc:	2a00      	cmp	r2, #0
  403fde:	d041      	beq.n	404064 <memset+0x90>
  403fe0:	b2ca      	uxtb	r2, r1
  403fe2:	4603      	mov	r3, r0
  403fe4:	e002      	b.n	403fec <memset+0x18>
  403fe6:	f114 34ff 	adds.w	r4, r4, #4294967295
  403fea:	d33b      	bcc.n	404064 <memset+0x90>
  403fec:	f803 2b01 	strb.w	r2, [r3], #1
  403ff0:	079d      	lsls	r5, r3, #30
  403ff2:	d1f8      	bne.n	403fe6 <memset+0x12>
  403ff4:	2c03      	cmp	r4, #3
  403ff6:	d92e      	bls.n	404056 <memset+0x82>
  403ff8:	b2cd      	uxtb	r5, r1
  403ffa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403ffe:	2c0f      	cmp	r4, #15
  404000:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404004:	d919      	bls.n	40403a <memset+0x66>
  404006:	f103 0210 	add.w	r2, r3, #16
  40400a:	4626      	mov	r6, r4
  40400c:	3e10      	subs	r6, #16
  40400e:	2e0f      	cmp	r6, #15
  404010:	f842 5c10 	str.w	r5, [r2, #-16]
  404014:	f842 5c0c 	str.w	r5, [r2, #-12]
  404018:	f842 5c08 	str.w	r5, [r2, #-8]
  40401c:	f842 5c04 	str.w	r5, [r2, #-4]
  404020:	f102 0210 	add.w	r2, r2, #16
  404024:	d8f2      	bhi.n	40400c <memset+0x38>
  404026:	f1a4 0210 	sub.w	r2, r4, #16
  40402a:	f022 020f 	bic.w	r2, r2, #15
  40402e:	f004 040f 	and.w	r4, r4, #15
  404032:	3210      	adds	r2, #16
  404034:	2c03      	cmp	r4, #3
  404036:	4413      	add	r3, r2
  404038:	d90d      	bls.n	404056 <memset+0x82>
  40403a:	461e      	mov	r6, r3
  40403c:	4622      	mov	r2, r4
  40403e:	3a04      	subs	r2, #4
  404040:	2a03      	cmp	r2, #3
  404042:	f846 5b04 	str.w	r5, [r6], #4
  404046:	d8fa      	bhi.n	40403e <memset+0x6a>
  404048:	1f22      	subs	r2, r4, #4
  40404a:	f022 0203 	bic.w	r2, r2, #3
  40404e:	3204      	adds	r2, #4
  404050:	4413      	add	r3, r2
  404052:	f004 0403 	and.w	r4, r4, #3
  404056:	b12c      	cbz	r4, 404064 <memset+0x90>
  404058:	b2c9      	uxtb	r1, r1
  40405a:	441c      	add	r4, r3
  40405c:	f803 1b01 	strb.w	r1, [r3], #1
  404060:	429c      	cmp	r4, r3
  404062:	d1fb      	bne.n	40405c <memset+0x88>
  404064:	bc70      	pop	{r4, r5, r6}
  404066:	4770      	bx	lr
  404068:	4614      	mov	r4, r2
  40406a:	4603      	mov	r3, r0
  40406c:	e7c2      	b.n	403ff4 <memset+0x20>
  40406e:	bf00      	nop

00404070 <__malloc_lock>:
  404070:	4801      	ldr	r0, [pc, #4]	; (404078 <__malloc_lock+0x8>)
  404072:	f001 bd69 	b.w	405b48 <__retarget_lock_acquire_recursive>
  404076:	bf00      	nop
  404078:	20400cc4 	.word	0x20400cc4

0040407c <__malloc_unlock>:
  40407c:	4801      	ldr	r0, [pc, #4]	; (404084 <__malloc_unlock+0x8>)
  40407e:	f001 bd65 	b.w	405b4c <__retarget_lock_release_recursive>
  404082:	bf00      	nop
  404084:	20400cc4 	.word	0x20400cc4

00404088 <_sbrk_r>:
  404088:	b538      	push	{r3, r4, r5, lr}
  40408a:	4c07      	ldr	r4, [pc, #28]	; (4040a8 <_sbrk_r+0x20>)
  40408c:	2300      	movs	r3, #0
  40408e:	4605      	mov	r5, r0
  404090:	4608      	mov	r0, r1
  404092:	6023      	str	r3, [r4, #0]
  404094:	f7fd f9b0 	bl	4013f8 <_sbrk>
  404098:	1c43      	adds	r3, r0, #1
  40409a:	d000      	beq.n	40409e <_sbrk_r+0x16>
  40409c:	bd38      	pop	{r3, r4, r5, pc}
  40409e:	6823      	ldr	r3, [r4, #0]
  4040a0:	2b00      	cmp	r3, #0
  4040a2:	d0fb      	beq.n	40409c <_sbrk_r+0x14>
  4040a4:	602b      	str	r3, [r5, #0]
  4040a6:	bd38      	pop	{r3, r4, r5, pc}
  4040a8:	20400cd8 	.word	0x20400cd8

004040ac <setbuf>:
  4040ac:	2900      	cmp	r1, #0
  4040ae:	bf0c      	ite	eq
  4040b0:	2202      	moveq	r2, #2
  4040b2:	2200      	movne	r2, #0
  4040b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4040b8:	f000 b800 	b.w	4040bc <setvbuf>

004040bc <setvbuf>:
  4040bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4040c0:	4c61      	ldr	r4, [pc, #388]	; (404248 <setvbuf+0x18c>)
  4040c2:	6825      	ldr	r5, [r4, #0]
  4040c4:	b083      	sub	sp, #12
  4040c6:	4604      	mov	r4, r0
  4040c8:	460f      	mov	r7, r1
  4040ca:	4690      	mov	r8, r2
  4040cc:	461e      	mov	r6, r3
  4040ce:	b115      	cbz	r5, 4040d6 <setvbuf+0x1a>
  4040d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	d064      	beq.n	4041a0 <setvbuf+0xe4>
  4040d6:	f1b8 0f02 	cmp.w	r8, #2
  4040da:	d006      	beq.n	4040ea <setvbuf+0x2e>
  4040dc:	f1b8 0f01 	cmp.w	r8, #1
  4040e0:	f200 809f 	bhi.w	404222 <setvbuf+0x166>
  4040e4:	2e00      	cmp	r6, #0
  4040e6:	f2c0 809c 	blt.w	404222 <setvbuf+0x166>
  4040ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4040ec:	07d8      	lsls	r0, r3, #31
  4040ee:	d534      	bpl.n	40415a <setvbuf+0x9e>
  4040f0:	4621      	mov	r1, r4
  4040f2:	4628      	mov	r0, r5
  4040f4:	f001 f910 	bl	405318 <_fflush_r>
  4040f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4040fa:	b141      	cbz	r1, 40410e <setvbuf+0x52>
  4040fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404100:	4299      	cmp	r1, r3
  404102:	d002      	beq.n	40410a <setvbuf+0x4e>
  404104:	4628      	mov	r0, r5
  404106:	f001 fa85 	bl	405614 <_free_r>
  40410a:	2300      	movs	r3, #0
  40410c:	6323      	str	r3, [r4, #48]	; 0x30
  40410e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404112:	2200      	movs	r2, #0
  404114:	61a2      	str	r2, [r4, #24]
  404116:	6062      	str	r2, [r4, #4]
  404118:	061a      	lsls	r2, r3, #24
  40411a:	d43a      	bmi.n	404192 <setvbuf+0xd6>
  40411c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404120:	f023 0303 	bic.w	r3, r3, #3
  404124:	f1b8 0f02 	cmp.w	r8, #2
  404128:	81a3      	strh	r3, [r4, #12]
  40412a:	d01d      	beq.n	404168 <setvbuf+0xac>
  40412c:	ab01      	add	r3, sp, #4
  40412e:	466a      	mov	r2, sp
  404130:	4621      	mov	r1, r4
  404132:	4628      	mov	r0, r5
  404134:	f001 fd0c 	bl	405b50 <__swhatbuf_r>
  404138:	89a3      	ldrh	r3, [r4, #12]
  40413a:	4318      	orrs	r0, r3
  40413c:	81a0      	strh	r0, [r4, #12]
  40413e:	2e00      	cmp	r6, #0
  404140:	d132      	bne.n	4041a8 <setvbuf+0xec>
  404142:	9e00      	ldr	r6, [sp, #0]
  404144:	4630      	mov	r0, r6
  404146:	f7ff fbeb 	bl	403920 <malloc>
  40414a:	4607      	mov	r7, r0
  40414c:	2800      	cmp	r0, #0
  40414e:	d06b      	beq.n	404228 <setvbuf+0x16c>
  404150:	89a3      	ldrh	r3, [r4, #12]
  404152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404156:	81a3      	strh	r3, [r4, #12]
  404158:	e028      	b.n	4041ac <setvbuf+0xf0>
  40415a:	89a3      	ldrh	r3, [r4, #12]
  40415c:	0599      	lsls	r1, r3, #22
  40415e:	d4c7      	bmi.n	4040f0 <setvbuf+0x34>
  404160:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404162:	f001 fcf1 	bl	405b48 <__retarget_lock_acquire_recursive>
  404166:	e7c3      	b.n	4040f0 <setvbuf+0x34>
  404168:	2500      	movs	r5, #0
  40416a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40416c:	2600      	movs	r6, #0
  40416e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404172:	f043 0302 	orr.w	r3, r3, #2
  404176:	2001      	movs	r0, #1
  404178:	60a6      	str	r6, [r4, #8]
  40417a:	07ce      	lsls	r6, r1, #31
  40417c:	81a3      	strh	r3, [r4, #12]
  40417e:	6022      	str	r2, [r4, #0]
  404180:	6122      	str	r2, [r4, #16]
  404182:	6160      	str	r0, [r4, #20]
  404184:	d401      	bmi.n	40418a <setvbuf+0xce>
  404186:	0598      	lsls	r0, r3, #22
  404188:	d53e      	bpl.n	404208 <setvbuf+0x14c>
  40418a:	4628      	mov	r0, r5
  40418c:	b003      	add	sp, #12
  40418e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404192:	6921      	ldr	r1, [r4, #16]
  404194:	4628      	mov	r0, r5
  404196:	f001 fa3d 	bl	405614 <_free_r>
  40419a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40419e:	e7bd      	b.n	40411c <setvbuf+0x60>
  4041a0:	4628      	mov	r0, r5
  4041a2:	f001 f911 	bl	4053c8 <__sinit>
  4041a6:	e796      	b.n	4040d6 <setvbuf+0x1a>
  4041a8:	2f00      	cmp	r7, #0
  4041aa:	d0cb      	beq.n	404144 <setvbuf+0x88>
  4041ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041ae:	2b00      	cmp	r3, #0
  4041b0:	d033      	beq.n	40421a <setvbuf+0x15e>
  4041b2:	9b00      	ldr	r3, [sp, #0]
  4041b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041b8:	6027      	str	r7, [r4, #0]
  4041ba:	429e      	cmp	r6, r3
  4041bc:	bf1c      	itt	ne
  4041be:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4041c2:	81a2      	strhne	r2, [r4, #12]
  4041c4:	f1b8 0f01 	cmp.w	r8, #1
  4041c8:	bf04      	itt	eq
  4041ca:	f042 0201 	orreq.w	r2, r2, #1
  4041ce:	81a2      	strheq	r2, [r4, #12]
  4041d0:	b292      	uxth	r2, r2
  4041d2:	f012 0308 	ands.w	r3, r2, #8
  4041d6:	6127      	str	r7, [r4, #16]
  4041d8:	6166      	str	r6, [r4, #20]
  4041da:	d00e      	beq.n	4041fa <setvbuf+0x13e>
  4041dc:	07d1      	lsls	r1, r2, #31
  4041de:	d51a      	bpl.n	404216 <setvbuf+0x15a>
  4041e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4041e2:	4276      	negs	r6, r6
  4041e4:	2300      	movs	r3, #0
  4041e6:	f015 0501 	ands.w	r5, r5, #1
  4041ea:	61a6      	str	r6, [r4, #24]
  4041ec:	60a3      	str	r3, [r4, #8]
  4041ee:	d009      	beq.n	404204 <setvbuf+0x148>
  4041f0:	2500      	movs	r5, #0
  4041f2:	4628      	mov	r0, r5
  4041f4:	b003      	add	sp, #12
  4041f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4041fa:	60a3      	str	r3, [r4, #8]
  4041fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4041fe:	f015 0501 	ands.w	r5, r5, #1
  404202:	d1f5      	bne.n	4041f0 <setvbuf+0x134>
  404204:	0593      	lsls	r3, r2, #22
  404206:	d4c0      	bmi.n	40418a <setvbuf+0xce>
  404208:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40420a:	f001 fc9f 	bl	405b4c <__retarget_lock_release_recursive>
  40420e:	4628      	mov	r0, r5
  404210:	b003      	add	sp, #12
  404212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404216:	60a6      	str	r6, [r4, #8]
  404218:	e7f0      	b.n	4041fc <setvbuf+0x140>
  40421a:	4628      	mov	r0, r5
  40421c:	f001 f8d4 	bl	4053c8 <__sinit>
  404220:	e7c7      	b.n	4041b2 <setvbuf+0xf6>
  404222:	f04f 35ff 	mov.w	r5, #4294967295
  404226:	e7b0      	b.n	40418a <setvbuf+0xce>
  404228:	f8dd 9000 	ldr.w	r9, [sp]
  40422c:	45b1      	cmp	r9, r6
  40422e:	d004      	beq.n	40423a <setvbuf+0x17e>
  404230:	4648      	mov	r0, r9
  404232:	f7ff fb75 	bl	403920 <malloc>
  404236:	4607      	mov	r7, r0
  404238:	b920      	cbnz	r0, 404244 <setvbuf+0x188>
  40423a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40423e:	f04f 35ff 	mov.w	r5, #4294967295
  404242:	e792      	b.n	40416a <setvbuf+0xae>
  404244:	464e      	mov	r6, r9
  404246:	e783      	b.n	404150 <setvbuf+0x94>
  404248:	20400018 	.word	0x20400018
	...

00404280 <strlen>:
  404280:	f890 f000 	pld	[r0]
  404284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404288:	f020 0107 	bic.w	r1, r0, #7
  40428c:	f06f 0c00 	mvn.w	ip, #0
  404290:	f010 0407 	ands.w	r4, r0, #7
  404294:	f891 f020 	pld	[r1, #32]
  404298:	f040 8049 	bne.w	40432e <strlen+0xae>
  40429c:	f04f 0400 	mov.w	r4, #0
  4042a0:	f06f 0007 	mvn.w	r0, #7
  4042a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4042ac:	f100 0008 	add.w	r0, r0, #8
  4042b0:	fa82 f24c 	uadd8	r2, r2, ip
  4042b4:	faa4 f28c 	sel	r2, r4, ip
  4042b8:	fa83 f34c 	uadd8	r3, r3, ip
  4042bc:	faa2 f38c 	sel	r3, r2, ip
  4042c0:	bb4b      	cbnz	r3, 404316 <strlen+0x96>
  4042c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4042c6:	fa82 f24c 	uadd8	r2, r2, ip
  4042ca:	f100 0008 	add.w	r0, r0, #8
  4042ce:	faa4 f28c 	sel	r2, r4, ip
  4042d2:	fa83 f34c 	uadd8	r3, r3, ip
  4042d6:	faa2 f38c 	sel	r3, r2, ip
  4042da:	b9e3      	cbnz	r3, 404316 <strlen+0x96>
  4042dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4042e0:	fa82 f24c 	uadd8	r2, r2, ip
  4042e4:	f100 0008 	add.w	r0, r0, #8
  4042e8:	faa4 f28c 	sel	r2, r4, ip
  4042ec:	fa83 f34c 	uadd8	r3, r3, ip
  4042f0:	faa2 f38c 	sel	r3, r2, ip
  4042f4:	b97b      	cbnz	r3, 404316 <strlen+0x96>
  4042f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4042fa:	f101 0120 	add.w	r1, r1, #32
  4042fe:	fa82 f24c 	uadd8	r2, r2, ip
  404302:	f100 0008 	add.w	r0, r0, #8
  404306:	faa4 f28c 	sel	r2, r4, ip
  40430a:	fa83 f34c 	uadd8	r3, r3, ip
  40430e:	faa2 f38c 	sel	r3, r2, ip
  404312:	2b00      	cmp	r3, #0
  404314:	d0c6      	beq.n	4042a4 <strlen+0x24>
  404316:	2a00      	cmp	r2, #0
  404318:	bf04      	itt	eq
  40431a:	3004      	addeq	r0, #4
  40431c:	461a      	moveq	r2, r3
  40431e:	ba12      	rev	r2, r2
  404320:	fab2 f282 	clz	r2, r2
  404324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40432c:	4770      	bx	lr
  40432e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404332:	f004 0503 	and.w	r5, r4, #3
  404336:	f1c4 0000 	rsb	r0, r4, #0
  40433a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40433e:	f014 0f04 	tst.w	r4, #4
  404342:	f891 f040 	pld	[r1, #64]	; 0x40
  404346:	fa0c f505 	lsl.w	r5, ip, r5
  40434a:	ea62 0205 	orn	r2, r2, r5
  40434e:	bf1c      	itt	ne
  404350:	ea63 0305 	ornne	r3, r3, r5
  404354:	4662      	movne	r2, ip
  404356:	f04f 0400 	mov.w	r4, #0
  40435a:	e7a9      	b.n	4042b0 <strlen+0x30>

0040435c <__sprint_r.part.0>:
  40435c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404360:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404362:	049c      	lsls	r4, r3, #18
  404364:	4693      	mov	fp, r2
  404366:	d52f      	bpl.n	4043c8 <__sprint_r.part.0+0x6c>
  404368:	6893      	ldr	r3, [r2, #8]
  40436a:	6812      	ldr	r2, [r2, #0]
  40436c:	b353      	cbz	r3, 4043c4 <__sprint_r.part.0+0x68>
  40436e:	460e      	mov	r6, r1
  404370:	4607      	mov	r7, r0
  404372:	f102 0908 	add.w	r9, r2, #8
  404376:	e919 0420 	ldmdb	r9, {r5, sl}
  40437a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40437e:	d017      	beq.n	4043b0 <__sprint_r.part.0+0x54>
  404380:	3d04      	subs	r5, #4
  404382:	2400      	movs	r4, #0
  404384:	e001      	b.n	40438a <__sprint_r.part.0+0x2e>
  404386:	45a0      	cmp	r8, r4
  404388:	d010      	beq.n	4043ac <__sprint_r.part.0+0x50>
  40438a:	4632      	mov	r2, r6
  40438c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404390:	4638      	mov	r0, r7
  404392:	f001 f8bb 	bl	40550c <_fputwc_r>
  404396:	1c43      	adds	r3, r0, #1
  404398:	f104 0401 	add.w	r4, r4, #1
  40439c:	d1f3      	bne.n	404386 <__sprint_r.part.0+0x2a>
  40439e:	2300      	movs	r3, #0
  4043a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4043a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4043a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4043b0:	f02a 0a03 	bic.w	sl, sl, #3
  4043b4:	eba3 030a 	sub.w	r3, r3, sl
  4043b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4043bc:	f109 0908 	add.w	r9, r9, #8
  4043c0:	2b00      	cmp	r3, #0
  4043c2:	d1d8      	bne.n	404376 <__sprint_r.part.0+0x1a>
  4043c4:	2000      	movs	r0, #0
  4043c6:	e7ea      	b.n	40439e <__sprint_r.part.0+0x42>
  4043c8:	f001 fa0a 	bl	4057e0 <__sfvwrite_r>
  4043cc:	2300      	movs	r3, #0
  4043ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4043d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4043d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043da:	bf00      	nop

004043dc <_vfiprintf_r>:
  4043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043e0:	b0ad      	sub	sp, #180	; 0xb4
  4043e2:	461d      	mov	r5, r3
  4043e4:	468b      	mov	fp, r1
  4043e6:	4690      	mov	r8, r2
  4043e8:	9307      	str	r3, [sp, #28]
  4043ea:	9006      	str	r0, [sp, #24]
  4043ec:	b118      	cbz	r0, 4043f6 <_vfiprintf_r+0x1a>
  4043ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4043f0:	2b00      	cmp	r3, #0
  4043f2:	f000 80f3 	beq.w	4045dc <_vfiprintf_r+0x200>
  4043f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4043fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4043fe:	07df      	lsls	r7, r3, #31
  404400:	b281      	uxth	r1, r0
  404402:	d402      	bmi.n	40440a <_vfiprintf_r+0x2e>
  404404:	058e      	lsls	r6, r1, #22
  404406:	f140 80fc 	bpl.w	404602 <_vfiprintf_r+0x226>
  40440a:	048c      	lsls	r4, r1, #18
  40440c:	d40a      	bmi.n	404424 <_vfiprintf_r+0x48>
  40440e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404412:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40441a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40441e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404422:	b289      	uxth	r1, r1
  404424:	0708      	lsls	r0, r1, #28
  404426:	f140 80b3 	bpl.w	404590 <_vfiprintf_r+0x1b4>
  40442a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40442e:	2b00      	cmp	r3, #0
  404430:	f000 80ae 	beq.w	404590 <_vfiprintf_r+0x1b4>
  404434:	f001 031a 	and.w	r3, r1, #26
  404438:	2b0a      	cmp	r3, #10
  40443a:	f000 80b5 	beq.w	4045a8 <_vfiprintf_r+0x1cc>
  40443e:	2300      	movs	r3, #0
  404440:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404444:	930b      	str	r3, [sp, #44]	; 0x2c
  404446:	9311      	str	r3, [sp, #68]	; 0x44
  404448:	9310      	str	r3, [sp, #64]	; 0x40
  40444a:	9303      	str	r3, [sp, #12]
  40444c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404450:	46ca      	mov	sl, r9
  404452:	f8cd b010 	str.w	fp, [sp, #16]
  404456:	f898 3000 	ldrb.w	r3, [r8]
  40445a:	4644      	mov	r4, r8
  40445c:	b1fb      	cbz	r3, 40449e <_vfiprintf_r+0xc2>
  40445e:	2b25      	cmp	r3, #37	; 0x25
  404460:	d102      	bne.n	404468 <_vfiprintf_r+0x8c>
  404462:	e01c      	b.n	40449e <_vfiprintf_r+0xc2>
  404464:	2b25      	cmp	r3, #37	; 0x25
  404466:	d003      	beq.n	404470 <_vfiprintf_r+0x94>
  404468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40446c:	2b00      	cmp	r3, #0
  40446e:	d1f9      	bne.n	404464 <_vfiprintf_r+0x88>
  404470:	eba4 0508 	sub.w	r5, r4, r8
  404474:	b19d      	cbz	r5, 40449e <_vfiprintf_r+0xc2>
  404476:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404478:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40447a:	f8ca 8000 	str.w	r8, [sl]
  40447e:	3301      	adds	r3, #1
  404480:	442a      	add	r2, r5
  404482:	2b07      	cmp	r3, #7
  404484:	f8ca 5004 	str.w	r5, [sl, #4]
  404488:	9211      	str	r2, [sp, #68]	; 0x44
  40448a:	9310      	str	r3, [sp, #64]	; 0x40
  40448c:	dd7a      	ble.n	404584 <_vfiprintf_r+0x1a8>
  40448e:	2a00      	cmp	r2, #0
  404490:	f040 84b0 	bne.w	404df4 <_vfiprintf_r+0xa18>
  404494:	9b03      	ldr	r3, [sp, #12]
  404496:	9210      	str	r2, [sp, #64]	; 0x40
  404498:	442b      	add	r3, r5
  40449a:	46ca      	mov	sl, r9
  40449c:	9303      	str	r3, [sp, #12]
  40449e:	7823      	ldrb	r3, [r4, #0]
  4044a0:	2b00      	cmp	r3, #0
  4044a2:	f000 83e0 	beq.w	404c66 <_vfiprintf_r+0x88a>
  4044a6:	2000      	movs	r0, #0
  4044a8:	f04f 0300 	mov.w	r3, #0
  4044ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4044b0:	f104 0801 	add.w	r8, r4, #1
  4044b4:	7862      	ldrb	r2, [r4, #1]
  4044b6:	4605      	mov	r5, r0
  4044b8:	4606      	mov	r6, r0
  4044ba:	4603      	mov	r3, r0
  4044bc:	f04f 34ff 	mov.w	r4, #4294967295
  4044c0:	f108 0801 	add.w	r8, r8, #1
  4044c4:	f1a2 0120 	sub.w	r1, r2, #32
  4044c8:	2958      	cmp	r1, #88	; 0x58
  4044ca:	f200 82de 	bhi.w	404a8a <_vfiprintf_r+0x6ae>
  4044ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4044d2:	0221      	.short	0x0221
  4044d4:	02dc02dc 	.word	0x02dc02dc
  4044d8:	02dc0229 	.word	0x02dc0229
  4044dc:	02dc02dc 	.word	0x02dc02dc
  4044e0:	02dc02dc 	.word	0x02dc02dc
  4044e4:	028902dc 	.word	0x028902dc
  4044e8:	02dc0295 	.word	0x02dc0295
  4044ec:	02bd00a2 	.word	0x02bd00a2
  4044f0:	019f02dc 	.word	0x019f02dc
  4044f4:	01a401a4 	.word	0x01a401a4
  4044f8:	01a401a4 	.word	0x01a401a4
  4044fc:	01a401a4 	.word	0x01a401a4
  404500:	01a401a4 	.word	0x01a401a4
  404504:	02dc01a4 	.word	0x02dc01a4
  404508:	02dc02dc 	.word	0x02dc02dc
  40450c:	02dc02dc 	.word	0x02dc02dc
  404510:	02dc02dc 	.word	0x02dc02dc
  404514:	02dc02dc 	.word	0x02dc02dc
  404518:	01b202dc 	.word	0x01b202dc
  40451c:	02dc02dc 	.word	0x02dc02dc
  404520:	02dc02dc 	.word	0x02dc02dc
  404524:	02dc02dc 	.word	0x02dc02dc
  404528:	02dc02dc 	.word	0x02dc02dc
  40452c:	02dc02dc 	.word	0x02dc02dc
  404530:	02dc0197 	.word	0x02dc0197
  404534:	02dc02dc 	.word	0x02dc02dc
  404538:	02dc02dc 	.word	0x02dc02dc
  40453c:	02dc019b 	.word	0x02dc019b
  404540:	025302dc 	.word	0x025302dc
  404544:	02dc02dc 	.word	0x02dc02dc
  404548:	02dc02dc 	.word	0x02dc02dc
  40454c:	02dc02dc 	.word	0x02dc02dc
  404550:	02dc02dc 	.word	0x02dc02dc
  404554:	02dc02dc 	.word	0x02dc02dc
  404558:	021b025a 	.word	0x021b025a
  40455c:	02dc02dc 	.word	0x02dc02dc
  404560:	026e02dc 	.word	0x026e02dc
  404564:	02dc021b 	.word	0x02dc021b
  404568:	027302dc 	.word	0x027302dc
  40456c:	01f502dc 	.word	0x01f502dc
  404570:	02090182 	.word	0x02090182
  404574:	02dc02d7 	.word	0x02dc02d7
  404578:	02dc029a 	.word	0x02dc029a
  40457c:	02dc00a7 	.word	0x02dc00a7
  404580:	022e02dc 	.word	0x022e02dc
  404584:	f10a 0a08 	add.w	sl, sl, #8
  404588:	9b03      	ldr	r3, [sp, #12]
  40458a:	442b      	add	r3, r5
  40458c:	9303      	str	r3, [sp, #12]
  40458e:	e786      	b.n	40449e <_vfiprintf_r+0xc2>
  404590:	4659      	mov	r1, fp
  404592:	9806      	ldr	r0, [sp, #24]
  404594:	f000 fdac 	bl	4050f0 <__swsetup_r>
  404598:	bb18      	cbnz	r0, 4045e2 <_vfiprintf_r+0x206>
  40459a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40459e:	f001 031a 	and.w	r3, r1, #26
  4045a2:	2b0a      	cmp	r3, #10
  4045a4:	f47f af4b 	bne.w	40443e <_vfiprintf_r+0x62>
  4045a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4045ac:	2b00      	cmp	r3, #0
  4045ae:	f6ff af46 	blt.w	40443e <_vfiprintf_r+0x62>
  4045b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045b6:	07db      	lsls	r3, r3, #31
  4045b8:	d405      	bmi.n	4045c6 <_vfiprintf_r+0x1ea>
  4045ba:	058f      	lsls	r7, r1, #22
  4045bc:	d403      	bmi.n	4045c6 <_vfiprintf_r+0x1ea>
  4045be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4045c2:	f001 fac3 	bl	405b4c <__retarget_lock_release_recursive>
  4045c6:	462b      	mov	r3, r5
  4045c8:	4642      	mov	r2, r8
  4045ca:	4659      	mov	r1, fp
  4045cc:	9806      	ldr	r0, [sp, #24]
  4045ce:	f000 fd4d 	bl	40506c <__sbprintf>
  4045d2:	9003      	str	r0, [sp, #12]
  4045d4:	9803      	ldr	r0, [sp, #12]
  4045d6:	b02d      	add	sp, #180	; 0xb4
  4045d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045dc:	f000 fef4 	bl	4053c8 <__sinit>
  4045e0:	e709      	b.n	4043f6 <_vfiprintf_r+0x1a>
  4045e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045e6:	07d9      	lsls	r1, r3, #31
  4045e8:	d404      	bmi.n	4045f4 <_vfiprintf_r+0x218>
  4045ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4045ee:	059a      	lsls	r2, r3, #22
  4045f0:	f140 84aa 	bpl.w	404f48 <_vfiprintf_r+0xb6c>
  4045f4:	f04f 33ff 	mov.w	r3, #4294967295
  4045f8:	9303      	str	r3, [sp, #12]
  4045fa:	9803      	ldr	r0, [sp, #12]
  4045fc:	b02d      	add	sp, #180	; 0xb4
  4045fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404602:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404606:	f001 fa9f 	bl	405b48 <__retarget_lock_acquire_recursive>
  40460a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40460e:	b281      	uxth	r1, r0
  404610:	e6fb      	b.n	40440a <_vfiprintf_r+0x2e>
  404612:	4276      	negs	r6, r6
  404614:	9207      	str	r2, [sp, #28]
  404616:	f043 0304 	orr.w	r3, r3, #4
  40461a:	f898 2000 	ldrb.w	r2, [r8]
  40461e:	e74f      	b.n	4044c0 <_vfiprintf_r+0xe4>
  404620:	9608      	str	r6, [sp, #32]
  404622:	069e      	lsls	r6, r3, #26
  404624:	f100 8450 	bmi.w	404ec8 <_vfiprintf_r+0xaec>
  404628:	9907      	ldr	r1, [sp, #28]
  40462a:	06dd      	lsls	r5, r3, #27
  40462c:	460a      	mov	r2, r1
  40462e:	f100 83ef 	bmi.w	404e10 <_vfiprintf_r+0xa34>
  404632:	0658      	lsls	r0, r3, #25
  404634:	f140 83ec 	bpl.w	404e10 <_vfiprintf_r+0xa34>
  404638:	880e      	ldrh	r6, [r1, #0]
  40463a:	3104      	adds	r1, #4
  40463c:	2700      	movs	r7, #0
  40463e:	2201      	movs	r2, #1
  404640:	9107      	str	r1, [sp, #28]
  404642:	f04f 0100 	mov.w	r1, #0
  404646:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40464a:	2500      	movs	r5, #0
  40464c:	1c61      	adds	r1, r4, #1
  40464e:	f000 8116 	beq.w	40487e <_vfiprintf_r+0x4a2>
  404652:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404656:	9102      	str	r1, [sp, #8]
  404658:	ea56 0107 	orrs.w	r1, r6, r7
  40465c:	f040 8114 	bne.w	404888 <_vfiprintf_r+0x4ac>
  404660:	2c00      	cmp	r4, #0
  404662:	f040 835c 	bne.w	404d1e <_vfiprintf_r+0x942>
  404666:	2a00      	cmp	r2, #0
  404668:	f040 83b7 	bne.w	404dda <_vfiprintf_r+0x9fe>
  40466c:	f013 0301 	ands.w	r3, r3, #1
  404670:	9305      	str	r3, [sp, #20]
  404672:	f000 8457 	beq.w	404f24 <_vfiprintf_r+0xb48>
  404676:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40467a:	2330      	movs	r3, #48	; 0x30
  40467c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404680:	9b05      	ldr	r3, [sp, #20]
  404682:	42a3      	cmp	r3, r4
  404684:	bfb8      	it	lt
  404686:	4623      	movlt	r3, r4
  404688:	9301      	str	r3, [sp, #4]
  40468a:	b10d      	cbz	r5, 404690 <_vfiprintf_r+0x2b4>
  40468c:	3301      	adds	r3, #1
  40468e:	9301      	str	r3, [sp, #4]
  404690:	9b02      	ldr	r3, [sp, #8]
  404692:	f013 0302 	ands.w	r3, r3, #2
  404696:	9309      	str	r3, [sp, #36]	; 0x24
  404698:	d002      	beq.n	4046a0 <_vfiprintf_r+0x2c4>
  40469a:	9b01      	ldr	r3, [sp, #4]
  40469c:	3302      	adds	r3, #2
  40469e:	9301      	str	r3, [sp, #4]
  4046a0:	9b02      	ldr	r3, [sp, #8]
  4046a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4046a6:	930a      	str	r3, [sp, #40]	; 0x28
  4046a8:	f040 8217 	bne.w	404ada <_vfiprintf_r+0x6fe>
  4046ac:	9b08      	ldr	r3, [sp, #32]
  4046ae:	9a01      	ldr	r2, [sp, #4]
  4046b0:	1a9d      	subs	r5, r3, r2
  4046b2:	2d00      	cmp	r5, #0
  4046b4:	f340 8211 	ble.w	404ada <_vfiprintf_r+0x6fe>
  4046b8:	2d10      	cmp	r5, #16
  4046ba:	f340 8490 	ble.w	404fde <_vfiprintf_r+0xc02>
  4046be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4046c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046c2:	4ec4      	ldr	r6, [pc, #784]	; (4049d4 <_vfiprintf_r+0x5f8>)
  4046c4:	46d6      	mov	lr, sl
  4046c6:	2710      	movs	r7, #16
  4046c8:	46a2      	mov	sl, r4
  4046ca:	4619      	mov	r1, r3
  4046cc:	9c06      	ldr	r4, [sp, #24]
  4046ce:	e007      	b.n	4046e0 <_vfiprintf_r+0x304>
  4046d0:	f101 0c02 	add.w	ip, r1, #2
  4046d4:	f10e 0e08 	add.w	lr, lr, #8
  4046d8:	4601      	mov	r1, r0
  4046da:	3d10      	subs	r5, #16
  4046dc:	2d10      	cmp	r5, #16
  4046de:	dd11      	ble.n	404704 <_vfiprintf_r+0x328>
  4046e0:	1c48      	adds	r0, r1, #1
  4046e2:	3210      	adds	r2, #16
  4046e4:	2807      	cmp	r0, #7
  4046e6:	9211      	str	r2, [sp, #68]	; 0x44
  4046e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4046ec:	9010      	str	r0, [sp, #64]	; 0x40
  4046ee:	ddef      	ble.n	4046d0 <_vfiprintf_r+0x2f4>
  4046f0:	2a00      	cmp	r2, #0
  4046f2:	f040 81e4 	bne.w	404abe <_vfiprintf_r+0x6e2>
  4046f6:	3d10      	subs	r5, #16
  4046f8:	2d10      	cmp	r5, #16
  4046fa:	4611      	mov	r1, r2
  4046fc:	f04f 0c01 	mov.w	ip, #1
  404700:	46ce      	mov	lr, r9
  404702:	dced      	bgt.n	4046e0 <_vfiprintf_r+0x304>
  404704:	4654      	mov	r4, sl
  404706:	4661      	mov	r1, ip
  404708:	46f2      	mov	sl, lr
  40470a:	442a      	add	r2, r5
  40470c:	2907      	cmp	r1, #7
  40470e:	9211      	str	r2, [sp, #68]	; 0x44
  404710:	f8ca 6000 	str.w	r6, [sl]
  404714:	f8ca 5004 	str.w	r5, [sl, #4]
  404718:	9110      	str	r1, [sp, #64]	; 0x40
  40471a:	f300 82ec 	bgt.w	404cf6 <_vfiprintf_r+0x91a>
  40471e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404722:	f10a 0a08 	add.w	sl, sl, #8
  404726:	1c48      	adds	r0, r1, #1
  404728:	2d00      	cmp	r5, #0
  40472a:	f040 81de 	bne.w	404aea <_vfiprintf_r+0x70e>
  40472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404730:	2b00      	cmp	r3, #0
  404732:	f000 81f8 	beq.w	404b26 <_vfiprintf_r+0x74a>
  404736:	3202      	adds	r2, #2
  404738:	a90e      	add	r1, sp, #56	; 0x38
  40473a:	2302      	movs	r3, #2
  40473c:	2807      	cmp	r0, #7
  40473e:	9211      	str	r2, [sp, #68]	; 0x44
  404740:	9010      	str	r0, [sp, #64]	; 0x40
  404742:	e88a 000a 	stmia.w	sl, {r1, r3}
  404746:	f340 81ea 	ble.w	404b1e <_vfiprintf_r+0x742>
  40474a:	2a00      	cmp	r2, #0
  40474c:	f040 838c 	bne.w	404e68 <_vfiprintf_r+0xa8c>
  404750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404752:	2b80      	cmp	r3, #128	; 0x80
  404754:	f04f 0001 	mov.w	r0, #1
  404758:	4611      	mov	r1, r2
  40475a:	46ca      	mov	sl, r9
  40475c:	f040 81e7 	bne.w	404b2e <_vfiprintf_r+0x752>
  404760:	9b08      	ldr	r3, [sp, #32]
  404762:	9d01      	ldr	r5, [sp, #4]
  404764:	1b5e      	subs	r6, r3, r5
  404766:	2e00      	cmp	r6, #0
  404768:	f340 81e1 	ble.w	404b2e <_vfiprintf_r+0x752>
  40476c:	2e10      	cmp	r6, #16
  40476e:	4d9a      	ldr	r5, [pc, #616]	; (4049d8 <_vfiprintf_r+0x5fc>)
  404770:	f340 8450 	ble.w	405014 <_vfiprintf_r+0xc38>
  404774:	46d4      	mov	ip, sl
  404776:	2710      	movs	r7, #16
  404778:	46a2      	mov	sl, r4
  40477a:	9c06      	ldr	r4, [sp, #24]
  40477c:	e007      	b.n	40478e <_vfiprintf_r+0x3b2>
  40477e:	f101 0e02 	add.w	lr, r1, #2
  404782:	f10c 0c08 	add.w	ip, ip, #8
  404786:	4601      	mov	r1, r0
  404788:	3e10      	subs	r6, #16
  40478a:	2e10      	cmp	r6, #16
  40478c:	dd11      	ble.n	4047b2 <_vfiprintf_r+0x3d6>
  40478e:	1c48      	adds	r0, r1, #1
  404790:	3210      	adds	r2, #16
  404792:	2807      	cmp	r0, #7
  404794:	9211      	str	r2, [sp, #68]	; 0x44
  404796:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40479a:	9010      	str	r0, [sp, #64]	; 0x40
  40479c:	ddef      	ble.n	40477e <_vfiprintf_r+0x3a2>
  40479e:	2a00      	cmp	r2, #0
  4047a0:	f040 829d 	bne.w	404cde <_vfiprintf_r+0x902>
  4047a4:	3e10      	subs	r6, #16
  4047a6:	2e10      	cmp	r6, #16
  4047a8:	f04f 0e01 	mov.w	lr, #1
  4047ac:	4611      	mov	r1, r2
  4047ae:	46cc      	mov	ip, r9
  4047b0:	dced      	bgt.n	40478e <_vfiprintf_r+0x3b2>
  4047b2:	4654      	mov	r4, sl
  4047b4:	46e2      	mov	sl, ip
  4047b6:	4432      	add	r2, r6
  4047b8:	f1be 0f07 	cmp.w	lr, #7
  4047bc:	9211      	str	r2, [sp, #68]	; 0x44
  4047be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4047c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4047c6:	f300 8369 	bgt.w	404e9c <_vfiprintf_r+0xac0>
  4047ca:	f10a 0a08 	add.w	sl, sl, #8
  4047ce:	f10e 0001 	add.w	r0, lr, #1
  4047d2:	4671      	mov	r1, lr
  4047d4:	e1ab      	b.n	404b2e <_vfiprintf_r+0x752>
  4047d6:	9608      	str	r6, [sp, #32]
  4047d8:	f013 0220 	ands.w	r2, r3, #32
  4047dc:	f040 838c 	bne.w	404ef8 <_vfiprintf_r+0xb1c>
  4047e0:	f013 0110 	ands.w	r1, r3, #16
  4047e4:	f040 831a 	bne.w	404e1c <_vfiprintf_r+0xa40>
  4047e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4047ec:	f000 8316 	beq.w	404e1c <_vfiprintf_r+0xa40>
  4047f0:	9807      	ldr	r0, [sp, #28]
  4047f2:	460a      	mov	r2, r1
  4047f4:	4601      	mov	r1, r0
  4047f6:	3104      	adds	r1, #4
  4047f8:	8806      	ldrh	r6, [r0, #0]
  4047fa:	9107      	str	r1, [sp, #28]
  4047fc:	2700      	movs	r7, #0
  4047fe:	e720      	b.n	404642 <_vfiprintf_r+0x266>
  404800:	9608      	str	r6, [sp, #32]
  404802:	f043 0310 	orr.w	r3, r3, #16
  404806:	e7e7      	b.n	4047d8 <_vfiprintf_r+0x3fc>
  404808:	9608      	str	r6, [sp, #32]
  40480a:	f043 0310 	orr.w	r3, r3, #16
  40480e:	e708      	b.n	404622 <_vfiprintf_r+0x246>
  404810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404814:	f898 2000 	ldrb.w	r2, [r8]
  404818:	e652      	b.n	4044c0 <_vfiprintf_r+0xe4>
  40481a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40481e:	2600      	movs	r6, #0
  404820:	f818 2b01 	ldrb.w	r2, [r8], #1
  404824:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404828:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40482c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404830:	2909      	cmp	r1, #9
  404832:	d9f5      	bls.n	404820 <_vfiprintf_r+0x444>
  404834:	e646      	b.n	4044c4 <_vfiprintf_r+0xe8>
  404836:	9608      	str	r6, [sp, #32]
  404838:	2800      	cmp	r0, #0
  40483a:	f040 8408 	bne.w	40504e <_vfiprintf_r+0xc72>
  40483e:	f043 0310 	orr.w	r3, r3, #16
  404842:	069e      	lsls	r6, r3, #26
  404844:	f100 834c 	bmi.w	404ee0 <_vfiprintf_r+0xb04>
  404848:	06dd      	lsls	r5, r3, #27
  40484a:	f100 82f3 	bmi.w	404e34 <_vfiprintf_r+0xa58>
  40484e:	0658      	lsls	r0, r3, #25
  404850:	f140 82f0 	bpl.w	404e34 <_vfiprintf_r+0xa58>
  404854:	9d07      	ldr	r5, [sp, #28]
  404856:	f9b5 6000 	ldrsh.w	r6, [r5]
  40485a:	462a      	mov	r2, r5
  40485c:	17f7      	asrs	r7, r6, #31
  40485e:	3204      	adds	r2, #4
  404860:	4630      	mov	r0, r6
  404862:	4639      	mov	r1, r7
  404864:	9207      	str	r2, [sp, #28]
  404866:	2800      	cmp	r0, #0
  404868:	f171 0200 	sbcs.w	r2, r1, #0
  40486c:	f2c0 835d 	blt.w	404f2a <_vfiprintf_r+0xb4e>
  404870:	1c61      	adds	r1, r4, #1
  404872:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404876:	f04f 0201 	mov.w	r2, #1
  40487a:	f47f aeea 	bne.w	404652 <_vfiprintf_r+0x276>
  40487e:	ea56 0107 	orrs.w	r1, r6, r7
  404882:	f000 824d 	beq.w	404d20 <_vfiprintf_r+0x944>
  404886:	9302      	str	r3, [sp, #8]
  404888:	2a01      	cmp	r2, #1
  40488a:	f000 828c 	beq.w	404da6 <_vfiprintf_r+0x9ca>
  40488e:	2a02      	cmp	r2, #2
  404890:	f040 825c 	bne.w	404d4c <_vfiprintf_r+0x970>
  404894:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404896:	46cb      	mov	fp, r9
  404898:	0933      	lsrs	r3, r6, #4
  40489a:	f006 010f 	and.w	r1, r6, #15
  40489e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4048a2:	093a      	lsrs	r2, r7, #4
  4048a4:	461e      	mov	r6, r3
  4048a6:	4617      	mov	r7, r2
  4048a8:	5c43      	ldrb	r3, [r0, r1]
  4048aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4048ae:	ea56 0307 	orrs.w	r3, r6, r7
  4048b2:	d1f1      	bne.n	404898 <_vfiprintf_r+0x4bc>
  4048b4:	eba9 030b 	sub.w	r3, r9, fp
  4048b8:	9305      	str	r3, [sp, #20]
  4048ba:	e6e1      	b.n	404680 <_vfiprintf_r+0x2a4>
  4048bc:	2800      	cmp	r0, #0
  4048be:	f040 83c0 	bne.w	405042 <_vfiprintf_r+0xc66>
  4048c2:	0699      	lsls	r1, r3, #26
  4048c4:	f100 8367 	bmi.w	404f96 <_vfiprintf_r+0xbba>
  4048c8:	06da      	lsls	r2, r3, #27
  4048ca:	f100 80f1 	bmi.w	404ab0 <_vfiprintf_r+0x6d4>
  4048ce:	065b      	lsls	r3, r3, #25
  4048d0:	f140 80ee 	bpl.w	404ab0 <_vfiprintf_r+0x6d4>
  4048d4:	9a07      	ldr	r2, [sp, #28]
  4048d6:	6813      	ldr	r3, [r2, #0]
  4048d8:	3204      	adds	r2, #4
  4048da:	9207      	str	r2, [sp, #28]
  4048dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4048e0:	801a      	strh	r2, [r3, #0]
  4048e2:	e5b8      	b.n	404456 <_vfiprintf_r+0x7a>
  4048e4:	9807      	ldr	r0, [sp, #28]
  4048e6:	4a3d      	ldr	r2, [pc, #244]	; (4049dc <_vfiprintf_r+0x600>)
  4048e8:	9608      	str	r6, [sp, #32]
  4048ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4048ec:	6806      	ldr	r6, [r0, #0]
  4048ee:	2278      	movs	r2, #120	; 0x78
  4048f0:	2130      	movs	r1, #48	; 0x30
  4048f2:	3004      	adds	r0, #4
  4048f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4048f8:	f043 0302 	orr.w	r3, r3, #2
  4048fc:	9007      	str	r0, [sp, #28]
  4048fe:	2700      	movs	r7, #0
  404900:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404904:	2202      	movs	r2, #2
  404906:	e69c      	b.n	404642 <_vfiprintf_r+0x266>
  404908:	9608      	str	r6, [sp, #32]
  40490a:	2800      	cmp	r0, #0
  40490c:	d099      	beq.n	404842 <_vfiprintf_r+0x466>
  40490e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404912:	e796      	b.n	404842 <_vfiprintf_r+0x466>
  404914:	f898 2000 	ldrb.w	r2, [r8]
  404918:	2d00      	cmp	r5, #0
  40491a:	f47f add1 	bne.w	4044c0 <_vfiprintf_r+0xe4>
  40491e:	2001      	movs	r0, #1
  404920:	2520      	movs	r5, #32
  404922:	e5cd      	b.n	4044c0 <_vfiprintf_r+0xe4>
  404924:	f043 0301 	orr.w	r3, r3, #1
  404928:	f898 2000 	ldrb.w	r2, [r8]
  40492c:	e5c8      	b.n	4044c0 <_vfiprintf_r+0xe4>
  40492e:	9608      	str	r6, [sp, #32]
  404930:	2800      	cmp	r0, #0
  404932:	f040 8393 	bne.w	40505c <_vfiprintf_r+0xc80>
  404936:	4929      	ldr	r1, [pc, #164]	; (4049dc <_vfiprintf_r+0x600>)
  404938:	910b      	str	r1, [sp, #44]	; 0x2c
  40493a:	069f      	lsls	r7, r3, #26
  40493c:	f100 82e8 	bmi.w	404f10 <_vfiprintf_r+0xb34>
  404940:	9807      	ldr	r0, [sp, #28]
  404942:	06de      	lsls	r6, r3, #27
  404944:	4601      	mov	r1, r0
  404946:	f100 8270 	bmi.w	404e2a <_vfiprintf_r+0xa4e>
  40494a:	065d      	lsls	r5, r3, #25
  40494c:	f140 826d 	bpl.w	404e2a <_vfiprintf_r+0xa4e>
  404950:	3104      	adds	r1, #4
  404952:	8806      	ldrh	r6, [r0, #0]
  404954:	9107      	str	r1, [sp, #28]
  404956:	2700      	movs	r7, #0
  404958:	07d8      	lsls	r0, r3, #31
  40495a:	f140 8222 	bpl.w	404da2 <_vfiprintf_r+0x9c6>
  40495e:	ea56 0107 	orrs.w	r1, r6, r7
  404962:	f000 821e 	beq.w	404da2 <_vfiprintf_r+0x9c6>
  404966:	2130      	movs	r1, #48	; 0x30
  404968:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40496c:	f043 0302 	orr.w	r3, r3, #2
  404970:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404974:	2202      	movs	r2, #2
  404976:	e664      	b.n	404642 <_vfiprintf_r+0x266>
  404978:	9608      	str	r6, [sp, #32]
  40497a:	2800      	cmp	r0, #0
  40497c:	f040 836b 	bne.w	405056 <_vfiprintf_r+0xc7a>
  404980:	4917      	ldr	r1, [pc, #92]	; (4049e0 <_vfiprintf_r+0x604>)
  404982:	910b      	str	r1, [sp, #44]	; 0x2c
  404984:	e7d9      	b.n	40493a <_vfiprintf_r+0x55e>
  404986:	9907      	ldr	r1, [sp, #28]
  404988:	9608      	str	r6, [sp, #32]
  40498a:	680a      	ldr	r2, [r1, #0]
  40498c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404990:	f04f 0000 	mov.w	r0, #0
  404994:	460a      	mov	r2, r1
  404996:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40499a:	3204      	adds	r2, #4
  40499c:	2001      	movs	r0, #1
  40499e:	9001      	str	r0, [sp, #4]
  4049a0:	9207      	str	r2, [sp, #28]
  4049a2:	9005      	str	r0, [sp, #20]
  4049a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4049a8:	9302      	str	r3, [sp, #8]
  4049aa:	2400      	movs	r4, #0
  4049ac:	e670      	b.n	404690 <_vfiprintf_r+0x2b4>
  4049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4049b2:	f898 2000 	ldrb.w	r2, [r8]
  4049b6:	e583      	b.n	4044c0 <_vfiprintf_r+0xe4>
  4049b8:	f898 2000 	ldrb.w	r2, [r8]
  4049bc:	2a6c      	cmp	r2, #108	; 0x6c
  4049be:	bf03      	ittte	eq
  4049c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4049c4:	f043 0320 	orreq.w	r3, r3, #32
  4049c8:	f108 0801 	addeq.w	r8, r8, #1
  4049cc:	f043 0310 	orrne.w	r3, r3, #16
  4049d0:	e576      	b.n	4044c0 <_vfiprintf_r+0xe4>
  4049d2:	bf00      	nop
  4049d4:	0040690c 	.word	0x0040690c
  4049d8:	0040691c 	.word	0x0040691c
  4049dc:	004068f0 	.word	0x004068f0
  4049e0:	004068dc 	.word	0x004068dc
  4049e4:	9907      	ldr	r1, [sp, #28]
  4049e6:	680e      	ldr	r6, [r1, #0]
  4049e8:	460a      	mov	r2, r1
  4049ea:	2e00      	cmp	r6, #0
  4049ec:	f102 0204 	add.w	r2, r2, #4
  4049f0:	f6ff ae0f 	blt.w	404612 <_vfiprintf_r+0x236>
  4049f4:	9207      	str	r2, [sp, #28]
  4049f6:	f898 2000 	ldrb.w	r2, [r8]
  4049fa:	e561      	b.n	4044c0 <_vfiprintf_r+0xe4>
  4049fc:	f898 2000 	ldrb.w	r2, [r8]
  404a00:	2001      	movs	r0, #1
  404a02:	252b      	movs	r5, #43	; 0x2b
  404a04:	e55c      	b.n	4044c0 <_vfiprintf_r+0xe4>
  404a06:	9907      	ldr	r1, [sp, #28]
  404a08:	9608      	str	r6, [sp, #32]
  404a0a:	f8d1 b000 	ldr.w	fp, [r1]
  404a0e:	f04f 0200 	mov.w	r2, #0
  404a12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404a16:	1d0e      	adds	r6, r1, #4
  404a18:	f1bb 0f00 	cmp.w	fp, #0
  404a1c:	f000 82e5 	beq.w	404fea <_vfiprintf_r+0xc0e>
  404a20:	1c67      	adds	r7, r4, #1
  404a22:	f000 82c4 	beq.w	404fae <_vfiprintf_r+0xbd2>
  404a26:	4622      	mov	r2, r4
  404a28:	2100      	movs	r1, #0
  404a2a:	4658      	mov	r0, fp
  404a2c:	9301      	str	r3, [sp, #4]
  404a2e:	f001 f91f 	bl	405c70 <memchr>
  404a32:	9b01      	ldr	r3, [sp, #4]
  404a34:	2800      	cmp	r0, #0
  404a36:	f000 82e5 	beq.w	405004 <_vfiprintf_r+0xc28>
  404a3a:	eba0 020b 	sub.w	r2, r0, fp
  404a3e:	9205      	str	r2, [sp, #20]
  404a40:	9607      	str	r6, [sp, #28]
  404a42:	9302      	str	r3, [sp, #8]
  404a44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a48:	2400      	movs	r4, #0
  404a4a:	e619      	b.n	404680 <_vfiprintf_r+0x2a4>
  404a4c:	f898 2000 	ldrb.w	r2, [r8]
  404a50:	2a2a      	cmp	r2, #42	; 0x2a
  404a52:	f108 0701 	add.w	r7, r8, #1
  404a56:	f000 82e9 	beq.w	40502c <_vfiprintf_r+0xc50>
  404a5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a5e:	2909      	cmp	r1, #9
  404a60:	46b8      	mov	r8, r7
  404a62:	f04f 0400 	mov.w	r4, #0
  404a66:	f63f ad2d 	bhi.w	4044c4 <_vfiprintf_r+0xe8>
  404a6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404a6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404a72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404a76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a7a:	2909      	cmp	r1, #9
  404a7c:	d9f5      	bls.n	404a6a <_vfiprintf_r+0x68e>
  404a7e:	e521      	b.n	4044c4 <_vfiprintf_r+0xe8>
  404a80:	f043 0320 	orr.w	r3, r3, #32
  404a84:	f898 2000 	ldrb.w	r2, [r8]
  404a88:	e51a      	b.n	4044c0 <_vfiprintf_r+0xe4>
  404a8a:	9608      	str	r6, [sp, #32]
  404a8c:	2800      	cmp	r0, #0
  404a8e:	f040 82db 	bne.w	405048 <_vfiprintf_r+0xc6c>
  404a92:	2a00      	cmp	r2, #0
  404a94:	f000 80e7 	beq.w	404c66 <_vfiprintf_r+0x88a>
  404a98:	2101      	movs	r1, #1
  404a9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a9e:	f04f 0200 	mov.w	r2, #0
  404aa2:	9101      	str	r1, [sp, #4]
  404aa4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404aa8:	9105      	str	r1, [sp, #20]
  404aaa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404aae:	e77b      	b.n	4049a8 <_vfiprintf_r+0x5cc>
  404ab0:	9a07      	ldr	r2, [sp, #28]
  404ab2:	6813      	ldr	r3, [r2, #0]
  404ab4:	3204      	adds	r2, #4
  404ab6:	9207      	str	r2, [sp, #28]
  404ab8:	9a03      	ldr	r2, [sp, #12]
  404aba:	601a      	str	r2, [r3, #0]
  404abc:	e4cb      	b.n	404456 <_vfiprintf_r+0x7a>
  404abe:	aa0f      	add	r2, sp, #60	; 0x3c
  404ac0:	9904      	ldr	r1, [sp, #16]
  404ac2:	4620      	mov	r0, r4
  404ac4:	f7ff fc4a 	bl	40435c <__sprint_r.part.0>
  404ac8:	2800      	cmp	r0, #0
  404aca:	f040 8139 	bne.w	404d40 <_vfiprintf_r+0x964>
  404ace:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ad2:	f101 0c01 	add.w	ip, r1, #1
  404ad6:	46ce      	mov	lr, r9
  404ad8:	e5ff      	b.n	4046da <_vfiprintf_r+0x2fe>
  404ada:	9910      	ldr	r1, [sp, #64]	; 0x40
  404adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ade:	1c48      	adds	r0, r1, #1
  404ae0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ae4:	2d00      	cmp	r5, #0
  404ae6:	f43f ae22 	beq.w	40472e <_vfiprintf_r+0x352>
  404aea:	3201      	adds	r2, #1
  404aec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404af0:	2101      	movs	r1, #1
  404af2:	2807      	cmp	r0, #7
  404af4:	9211      	str	r2, [sp, #68]	; 0x44
  404af6:	9010      	str	r0, [sp, #64]	; 0x40
  404af8:	f8ca 5000 	str.w	r5, [sl]
  404afc:	f8ca 1004 	str.w	r1, [sl, #4]
  404b00:	f340 8108 	ble.w	404d14 <_vfiprintf_r+0x938>
  404b04:	2a00      	cmp	r2, #0
  404b06:	f040 81bc 	bne.w	404e82 <_vfiprintf_r+0xaa6>
  404b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b0c:	2b00      	cmp	r3, #0
  404b0e:	f43f ae1f 	beq.w	404750 <_vfiprintf_r+0x374>
  404b12:	ab0e      	add	r3, sp, #56	; 0x38
  404b14:	2202      	movs	r2, #2
  404b16:	4608      	mov	r0, r1
  404b18:	931c      	str	r3, [sp, #112]	; 0x70
  404b1a:	921d      	str	r2, [sp, #116]	; 0x74
  404b1c:	46ca      	mov	sl, r9
  404b1e:	4601      	mov	r1, r0
  404b20:	f10a 0a08 	add.w	sl, sl, #8
  404b24:	3001      	adds	r0, #1
  404b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b28:	2b80      	cmp	r3, #128	; 0x80
  404b2a:	f43f ae19 	beq.w	404760 <_vfiprintf_r+0x384>
  404b2e:	9b05      	ldr	r3, [sp, #20]
  404b30:	1ae4      	subs	r4, r4, r3
  404b32:	2c00      	cmp	r4, #0
  404b34:	dd2e      	ble.n	404b94 <_vfiprintf_r+0x7b8>
  404b36:	2c10      	cmp	r4, #16
  404b38:	4db3      	ldr	r5, [pc, #716]	; (404e08 <_vfiprintf_r+0xa2c>)
  404b3a:	dd1e      	ble.n	404b7a <_vfiprintf_r+0x79e>
  404b3c:	46d6      	mov	lr, sl
  404b3e:	2610      	movs	r6, #16
  404b40:	9f06      	ldr	r7, [sp, #24]
  404b42:	f8dd a010 	ldr.w	sl, [sp, #16]
  404b46:	e006      	b.n	404b56 <_vfiprintf_r+0x77a>
  404b48:	1c88      	adds	r0, r1, #2
  404b4a:	f10e 0e08 	add.w	lr, lr, #8
  404b4e:	4619      	mov	r1, r3
  404b50:	3c10      	subs	r4, #16
  404b52:	2c10      	cmp	r4, #16
  404b54:	dd10      	ble.n	404b78 <_vfiprintf_r+0x79c>
  404b56:	1c4b      	adds	r3, r1, #1
  404b58:	3210      	adds	r2, #16
  404b5a:	2b07      	cmp	r3, #7
  404b5c:	9211      	str	r2, [sp, #68]	; 0x44
  404b5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404b62:	9310      	str	r3, [sp, #64]	; 0x40
  404b64:	ddf0      	ble.n	404b48 <_vfiprintf_r+0x76c>
  404b66:	2a00      	cmp	r2, #0
  404b68:	d165      	bne.n	404c36 <_vfiprintf_r+0x85a>
  404b6a:	3c10      	subs	r4, #16
  404b6c:	2c10      	cmp	r4, #16
  404b6e:	f04f 0001 	mov.w	r0, #1
  404b72:	4611      	mov	r1, r2
  404b74:	46ce      	mov	lr, r9
  404b76:	dcee      	bgt.n	404b56 <_vfiprintf_r+0x77a>
  404b78:	46f2      	mov	sl, lr
  404b7a:	4422      	add	r2, r4
  404b7c:	2807      	cmp	r0, #7
  404b7e:	9211      	str	r2, [sp, #68]	; 0x44
  404b80:	f8ca 5000 	str.w	r5, [sl]
  404b84:	f8ca 4004 	str.w	r4, [sl, #4]
  404b88:	9010      	str	r0, [sp, #64]	; 0x40
  404b8a:	f300 8085 	bgt.w	404c98 <_vfiprintf_r+0x8bc>
  404b8e:	f10a 0a08 	add.w	sl, sl, #8
  404b92:	3001      	adds	r0, #1
  404b94:	9905      	ldr	r1, [sp, #20]
  404b96:	f8ca b000 	str.w	fp, [sl]
  404b9a:	440a      	add	r2, r1
  404b9c:	2807      	cmp	r0, #7
  404b9e:	9211      	str	r2, [sp, #68]	; 0x44
  404ba0:	f8ca 1004 	str.w	r1, [sl, #4]
  404ba4:	9010      	str	r0, [sp, #64]	; 0x40
  404ba6:	f340 8082 	ble.w	404cae <_vfiprintf_r+0x8d2>
  404baa:	2a00      	cmp	r2, #0
  404bac:	f040 8118 	bne.w	404de0 <_vfiprintf_r+0xa04>
  404bb0:	9b02      	ldr	r3, [sp, #8]
  404bb2:	9210      	str	r2, [sp, #64]	; 0x40
  404bb4:	0758      	lsls	r0, r3, #29
  404bb6:	d535      	bpl.n	404c24 <_vfiprintf_r+0x848>
  404bb8:	9b08      	ldr	r3, [sp, #32]
  404bba:	9901      	ldr	r1, [sp, #4]
  404bbc:	1a5c      	subs	r4, r3, r1
  404bbe:	2c00      	cmp	r4, #0
  404bc0:	f340 80e7 	ble.w	404d92 <_vfiprintf_r+0x9b6>
  404bc4:	46ca      	mov	sl, r9
  404bc6:	2c10      	cmp	r4, #16
  404bc8:	f340 8218 	ble.w	404ffc <_vfiprintf_r+0xc20>
  404bcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bce:	4e8f      	ldr	r6, [pc, #572]	; (404e0c <_vfiprintf_r+0xa30>)
  404bd0:	9f06      	ldr	r7, [sp, #24]
  404bd2:	f8dd b010 	ldr.w	fp, [sp, #16]
  404bd6:	2510      	movs	r5, #16
  404bd8:	e006      	b.n	404be8 <_vfiprintf_r+0x80c>
  404bda:	1c88      	adds	r0, r1, #2
  404bdc:	f10a 0a08 	add.w	sl, sl, #8
  404be0:	4619      	mov	r1, r3
  404be2:	3c10      	subs	r4, #16
  404be4:	2c10      	cmp	r4, #16
  404be6:	dd11      	ble.n	404c0c <_vfiprintf_r+0x830>
  404be8:	1c4b      	adds	r3, r1, #1
  404bea:	3210      	adds	r2, #16
  404bec:	2b07      	cmp	r3, #7
  404bee:	9211      	str	r2, [sp, #68]	; 0x44
  404bf0:	f8ca 6000 	str.w	r6, [sl]
  404bf4:	f8ca 5004 	str.w	r5, [sl, #4]
  404bf8:	9310      	str	r3, [sp, #64]	; 0x40
  404bfa:	ddee      	ble.n	404bda <_vfiprintf_r+0x7fe>
  404bfc:	bb42      	cbnz	r2, 404c50 <_vfiprintf_r+0x874>
  404bfe:	3c10      	subs	r4, #16
  404c00:	2c10      	cmp	r4, #16
  404c02:	f04f 0001 	mov.w	r0, #1
  404c06:	4611      	mov	r1, r2
  404c08:	46ca      	mov	sl, r9
  404c0a:	dced      	bgt.n	404be8 <_vfiprintf_r+0x80c>
  404c0c:	4422      	add	r2, r4
  404c0e:	2807      	cmp	r0, #7
  404c10:	9211      	str	r2, [sp, #68]	; 0x44
  404c12:	f8ca 6000 	str.w	r6, [sl]
  404c16:	f8ca 4004 	str.w	r4, [sl, #4]
  404c1a:	9010      	str	r0, [sp, #64]	; 0x40
  404c1c:	dd51      	ble.n	404cc2 <_vfiprintf_r+0x8e6>
  404c1e:	2a00      	cmp	r2, #0
  404c20:	f040 819b 	bne.w	404f5a <_vfiprintf_r+0xb7e>
  404c24:	9b03      	ldr	r3, [sp, #12]
  404c26:	9a08      	ldr	r2, [sp, #32]
  404c28:	9901      	ldr	r1, [sp, #4]
  404c2a:	428a      	cmp	r2, r1
  404c2c:	bfac      	ite	ge
  404c2e:	189b      	addge	r3, r3, r2
  404c30:	185b      	addlt	r3, r3, r1
  404c32:	9303      	str	r3, [sp, #12]
  404c34:	e04e      	b.n	404cd4 <_vfiprintf_r+0x8f8>
  404c36:	aa0f      	add	r2, sp, #60	; 0x3c
  404c38:	4651      	mov	r1, sl
  404c3a:	4638      	mov	r0, r7
  404c3c:	f7ff fb8e 	bl	40435c <__sprint_r.part.0>
  404c40:	2800      	cmp	r0, #0
  404c42:	f040 813f 	bne.w	404ec4 <_vfiprintf_r+0xae8>
  404c46:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c4a:	1c48      	adds	r0, r1, #1
  404c4c:	46ce      	mov	lr, r9
  404c4e:	e77f      	b.n	404b50 <_vfiprintf_r+0x774>
  404c50:	aa0f      	add	r2, sp, #60	; 0x3c
  404c52:	4659      	mov	r1, fp
  404c54:	4638      	mov	r0, r7
  404c56:	f7ff fb81 	bl	40435c <__sprint_r.part.0>
  404c5a:	b960      	cbnz	r0, 404c76 <_vfiprintf_r+0x89a>
  404c5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c60:	1c48      	adds	r0, r1, #1
  404c62:	46ca      	mov	sl, r9
  404c64:	e7bd      	b.n	404be2 <_vfiprintf_r+0x806>
  404c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c68:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c6c:	2b00      	cmp	r3, #0
  404c6e:	f040 81d4 	bne.w	40501a <_vfiprintf_r+0xc3e>
  404c72:	2300      	movs	r3, #0
  404c74:	9310      	str	r3, [sp, #64]	; 0x40
  404c76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c7a:	f013 0f01 	tst.w	r3, #1
  404c7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404c82:	d102      	bne.n	404c8a <_vfiprintf_r+0x8ae>
  404c84:	059a      	lsls	r2, r3, #22
  404c86:	f140 80de 	bpl.w	404e46 <_vfiprintf_r+0xa6a>
  404c8a:	065b      	lsls	r3, r3, #25
  404c8c:	f53f acb2 	bmi.w	4045f4 <_vfiprintf_r+0x218>
  404c90:	9803      	ldr	r0, [sp, #12]
  404c92:	b02d      	add	sp, #180	; 0xb4
  404c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c98:	2a00      	cmp	r2, #0
  404c9a:	f040 8106 	bne.w	404eaa <_vfiprintf_r+0xace>
  404c9e:	9a05      	ldr	r2, [sp, #20]
  404ca0:	921d      	str	r2, [sp, #116]	; 0x74
  404ca2:	2301      	movs	r3, #1
  404ca4:	9211      	str	r2, [sp, #68]	; 0x44
  404ca6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404caa:	9310      	str	r3, [sp, #64]	; 0x40
  404cac:	46ca      	mov	sl, r9
  404cae:	f10a 0a08 	add.w	sl, sl, #8
  404cb2:	9b02      	ldr	r3, [sp, #8]
  404cb4:	0759      	lsls	r1, r3, #29
  404cb6:	d504      	bpl.n	404cc2 <_vfiprintf_r+0x8e6>
  404cb8:	9b08      	ldr	r3, [sp, #32]
  404cba:	9901      	ldr	r1, [sp, #4]
  404cbc:	1a5c      	subs	r4, r3, r1
  404cbe:	2c00      	cmp	r4, #0
  404cc0:	dc81      	bgt.n	404bc6 <_vfiprintf_r+0x7ea>
  404cc2:	9b03      	ldr	r3, [sp, #12]
  404cc4:	9908      	ldr	r1, [sp, #32]
  404cc6:	9801      	ldr	r0, [sp, #4]
  404cc8:	4281      	cmp	r1, r0
  404cca:	bfac      	ite	ge
  404ccc:	185b      	addge	r3, r3, r1
  404cce:	181b      	addlt	r3, r3, r0
  404cd0:	9303      	str	r3, [sp, #12]
  404cd2:	bb72      	cbnz	r2, 404d32 <_vfiprintf_r+0x956>
  404cd4:	2300      	movs	r3, #0
  404cd6:	9310      	str	r3, [sp, #64]	; 0x40
  404cd8:	46ca      	mov	sl, r9
  404cda:	f7ff bbbc 	b.w	404456 <_vfiprintf_r+0x7a>
  404cde:	aa0f      	add	r2, sp, #60	; 0x3c
  404ce0:	9904      	ldr	r1, [sp, #16]
  404ce2:	4620      	mov	r0, r4
  404ce4:	f7ff fb3a 	bl	40435c <__sprint_r.part.0>
  404ce8:	bb50      	cbnz	r0, 404d40 <_vfiprintf_r+0x964>
  404cea:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cee:	f101 0e01 	add.w	lr, r1, #1
  404cf2:	46cc      	mov	ip, r9
  404cf4:	e548      	b.n	404788 <_vfiprintf_r+0x3ac>
  404cf6:	2a00      	cmp	r2, #0
  404cf8:	f040 8140 	bne.w	404f7c <_vfiprintf_r+0xba0>
  404cfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404d00:	2900      	cmp	r1, #0
  404d02:	f000 811b 	beq.w	404f3c <_vfiprintf_r+0xb60>
  404d06:	2201      	movs	r2, #1
  404d08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404d0c:	4610      	mov	r0, r2
  404d0e:	921d      	str	r2, [sp, #116]	; 0x74
  404d10:	911c      	str	r1, [sp, #112]	; 0x70
  404d12:	46ca      	mov	sl, r9
  404d14:	4601      	mov	r1, r0
  404d16:	f10a 0a08 	add.w	sl, sl, #8
  404d1a:	3001      	adds	r0, #1
  404d1c:	e507      	b.n	40472e <_vfiprintf_r+0x352>
  404d1e:	9b02      	ldr	r3, [sp, #8]
  404d20:	2a01      	cmp	r2, #1
  404d22:	f000 8098 	beq.w	404e56 <_vfiprintf_r+0xa7a>
  404d26:	2a02      	cmp	r2, #2
  404d28:	d10d      	bne.n	404d46 <_vfiprintf_r+0x96a>
  404d2a:	9302      	str	r3, [sp, #8]
  404d2c:	2600      	movs	r6, #0
  404d2e:	2700      	movs	r7, #0
  404d30:	e5b0      	b.n	404894 <_vfiprintf_r+0x4b8>
  404d32:	aa0f      	add	r2, sp, #60	; 0x3c
  404d34:	9904      	ldr	r1, [sp, #16]
  404d36:	9806      	ldr	r0, [sp, #24]
  404d38:	f7ff fb10 	bl	40435c <__sprint_r.part.0>
  404d3c:	2800      	cmp	r0, #0
  404d3e:	d0c9      	beq.n	404cd4 <_vfiprintf_r+0x8f8>
  404d40:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d44:	e797      	b.n	404c76 <_vfiprintf_r+0x89a>
  404d46:	9302      	str	r3, [sp, #8]
  404d48:	2600      	movs	r6, #0
  404d4a:	2700      	movs	r7, #0
  404d4c:	4649      	mov	r1, r9
  404d4e:	e000      	b.n	404d52 <_vfiprintf_r+0x976>
  404d50:	4659      	mov	r1, fp
  404d52:	08f2      	lsrs	r2, r6, #3
  404d54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404d58:	08f8      	lsrs	r0, r7, #3
  404d5a:	f006 0307 	and.w	r3, r6, #7
  404d5e:	4607      	mov	r7, r0
  404d60:	4616      	mov	r6, r2
  404d62:	3330      	adds	r3, #48	; 0x30
  404d64:	ea56 0207 	orrs.w	r2, r6, r7
  404d68:	f801 3c01 	strb.w	r3, [r1, #-1]
  404d6c:	f101 3bff 	add.w	fp, r1, #4294967295
  404d70:	d1ee      	bne.n	404d50 <_vfiprintf_r+0x974>
  404d72:	9a02      	ldr	r2, [sp, #8]
  404d74:	07d6      	lsls	r6, r2, #31
  404d76:	f57f ad9d 	bpl.w	4048b4 <_vfiprintf_r+0x4d8>
  404d7a:	2b30      	cmp	r3, #48	; 0x30
  404d7c:	f43f ad9a 	beq.w	4048b4 <_vfiprintf_r+0x4d8>
  404d80:	3902      	subs	r1, #2
  404d82:	2330      	movs	r3, #48	; 0x30
  404d84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404d88:	eba9 0301 	sub.w	r3, r9, r1
  404d8c:	9305      	str	r3, [sp, #20]
  404d8e:	468b      	mov	fp, r1
  404d90:	e476      	b.n	404680 <_vfiprintf_r+0x2a4>
  404d92:	9b03      	ldr	r3, [sp, #12]
  404d94:	9a08      	ldr	r2, [sp, #32]
  404d96:	428a      	cmp	r2, r1
  404d98:	bfac      	ite	ge
  404d9a:	189b      	addge	r3, r3, r2
  404d9c:	185b      	addlt	r3, r3, r1
  404d9e:	9303      	str	r3, [sp, #12]
  404da0:	e798      	b.n	404cd4 <_vfiprintf_r+0x8f8>
  404da2:	2202      	movs	r2, #2
  404da4:	e44d      	b.n	404642 <_vfiprintf_r+0x266>
  404da6:	2f00      	cmp	r7, #0
  404da8:	bf08      	it	eq
  404daa:	2e0a      	cmpeq	r6, #10
  404dac:	d352      	bcc.n	404e54 <_vfiprintf_r+0xa78>
  404dae:	46cb      	mov	fp, r9
  404db0:	4630      	mov	r0, r6
  404db2:	4639      	mov	r1, r7
  404db4:	220a      	movs	r2, #10
  404db6:	2300      	movs	r3, #0
  404db8:	f001 fbc6 	bl	406548 <__aeabi_uldivmod>
  404dbc:	3230      	adds	r2, #48	; 0x30
  404dbe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404dc2:	4630      	mov	r0, r6
  404dc4:	4639      	mov	r1, r7
  404dc6:	2300      	movs	r3, #0
  404dc8:	220a      	movs	r2, #10
  404dca:	f001 fbbd 	bl	406548 <__aeabi_uldivmod>
  404dce:	4606      	mov	r6, r0
  404dd0:	460f      	mov	r7, r1
  404dd2:	ea56 0307 	orrs.w	r3, r6, r7
  404dd6:	d1eb      	bne.n	404db0 <_vfiprintf_r+0x9d4>
  404dd8:	e56c      	b.n	4048b4 <_vfiprintf_r+0x4d8>
  404dda:	9405      	str	r4, [sp, #20]
  404ddc:	46cb      	mov	fp, r9
  404dde:	e44f      	b.n	404680 <_vfiprintf_r+0x2a4>
  404de0:	aa0f      	add	r2, sp, #60	; 0x3c
  404de2:	9904      	ldr	r1, [sp, #16]
  404de4:	9806      	ldr	r0, [sp, #24]
  404de6:	f7ff fab9 	bl	40435c <__sprint_r.part.0>
  404dea:	2800      	cmp	r0, #0
  404dec:	d1a8      	bne.n	404d40 <_vfiprintf_r+0x964>
  404dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404df0:	46ca      	mov	sl, r9
  404df2:	e75e      	b.n	404cb2 <_vfiprintf_r+0x8d6>
  404df4:	aa0f      	add	r2, sp, #60	; 0x3c
  404df6:	9904      	ldr	r1, [sp, #16]
  404df8:	9806      	ldr	r0, [sp, #24]
  404dfa:	f7ff faaf 	bl	40435c <__sprint_r.part.0>
  404dfe:	2800      	cmp	r0, #0
  404e00:	d19e      	bne.n	404d40 <_vfiprintf_r+0x964>
  404e02:	46ca      	mov	sl, r9
  404e04:	f7ff bbc0 	b.w	404588 <_vfiprintf_r+0x1ac>
  404e08:	0040691c 	.word	0x0040691c
  404e0c:	0040690c 	.word	0x0040690c
  404e10:	3104      	adds	r1, #4
  404e12:	6816      	ldr	r6, [r2, #0]
  404e14:	9107      	str	r1, [sp, #28]
  404e16:	2201      	movs	r2, #1
  404e18:	2700      	movs	r7, #0
  404e1a:	e412      	b.n	404642 <_vfiprintf_r+0x266>
  404e1c:	9807      	ldr	r0, [sp, #28]
  404e1e:	4601      	mov	r1, r0
  404e20:	3104      	adds	r1, #4
  404e22:	6806      	ldr	r6, [r0, #0]
  404e24:	9107      	str	r1, [sp, #28]
  404e26:	2700      	movs	r7, #0
  404e28:	e40b      	b.n	404642 <_vfiprintf_r+0x266>
  404e2a:	680e      	ldr	r6, [r1, #0]
  404e2c:	3104      	adds	r1, #4
  404e2e:	9107      	str	r1, [sp, #28]
  404e30:	2700      	movs	r7, #0
  404e32:	e591      	b.n	404958 <_vfiprintf_r+0x57c>
  404e34:	9907      	ldr	r1, [sp, #28]
  404e36:	680e      	ldr	r6, [r1, #0]
  404e38:	460a      	mov	r2, r1
  404e3a:	17f7      	asrs	r7, r6, #31
  404e3c:	3204      	adds	r2, #4
  404e3e:	9207      	str	r2, [sp, #28]
  404e40:	4630      	mov	r0, r6
  404e42:	4639      	mov	r1, r7
  404e44:	e50f      	b.n	404866 <_vfiprintf_r+0x48a>
  404e46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e4a:	f000 fe7f 	bl	405b4c <__retarget_lock_release_recursive>
  404e4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e52:	e71a      	b.n	404c8a <_vfiprintf_r+0x8ae>
  404e54:	9b02      	ldr	r3, [sp, #8]
  404e56:	9302      	str	r3, [sp, #8]
  404e58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e5c:	3630      	adds	r6, #48	; 0x30
  404e5e:	2301      	movs	r3, #1
  404e60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404e64:	9305      	str	r3, [sp, #20]
  404e66:	e40b      	b.n	404680 <_vfiprintf_r+0x2a4>
  404e68:	aa0f      	add	r2, sp, #60	; 0x3c
  404e6a:	9904      	ldr	r1, [sp, #16]
  404e6c:	9806      	ldr	r0, [sp, #24]
  404e6e:	f7ff fa75 	bl	40435c <__sprint_r.part.0>
  404e72:	2800      	cmp	r0, #0
  404e74:	f47f af64 	bne.w	404d40 <_vfiprintf_r+0x964>
  404e78:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e7c:	1c48      	adds	r0, r1, #1
  404e7e:	46ca      	mov	sl, r9
  404e80:	e651      	b.n	404b26 <_vfiprintf_r+0x74a>
  404e82:	aa0f      	add	r2, sp, #60	; 0x3c
  404e84:	9904      	ldr	r1, [sp, #16]
  404e86:	9806      	ldr	r0, [sp, #24]
  404e88:	f7ff fa68 	bl	40435c <__sprint_r.part.0>
  404e8c:	2800      	cmp	r0, #0
  404e8e:	f47f af57 	bne.w	404d40 <_vfiprintf_r+0x964>
  404e92:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e96:	1c48      	adds	r0, r1, #1
  404e98:	46ca      	mov	sl, r9
  404e9a:	e448      	b.n	40472e <_vfiprintf_r+0x352>
  404e9c:	2a00      	cmp	r2, #0
  404e9e:	f040 8091 	bne.w	404fc4 <_vfiprintf_r+0xbe8>
  404ea2:	2001      	movs	r0, #1
  404ea4:	4611      	mov	r1, r2
  404ea6:	46ca      	mov	sl, r9
  404ea8:	e641      	b.n	404b2e <_vfiprintf_r+0x752>
  404eaa:	aa0f      	add	r2, sp, #60	; 0x3c
  404eac:	9904      	ldr	r1, [sp, #16]
  404eae:	9806      	ldr	r0, [sp, #24]
  404eb0:	f7ff fa54 	bl	40435c <__sprint_r.part.0>
  404eb4:	2800      	cmp	r0, #0
  404eb6:	f47f af43 	bne.w	404d40 <_vfiprintf_r+0x964>
  404eba:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ebe:	3001      	adds	r0, #1
  404ec0:	46ca      	mov	sl, r9
  404ec2:	e667      	b.n	404b94 <_vfiprintf_r+0x7b8>
  404ec4:	46d3      	mov	fp, sl
  404ec6:	e6d6      	b.n	404c76 <_vfiprintf_r+0x89a>
  404ec8:	9e07      	ldr	r6, [sp, #28]
  404eca:	3607      	adds	r6, #7
  404ecc:	f026 0207 	bic.w	r2, r6, #7
  404ed0:	f102 0108 	add.w	r1, r2, #8
  404ed4:	e9d2 6700 	ldrd	r6, r7, [r2]
  404ed8:	9107      	str	r1, [sp, #28]
  404eda:	2201      	movs	r2, #1
  404edc:	f7ff bbb1 	b.w	404642 <_vfiprintf_r+0x266>
  404ee0:	9e07      	ldr	r6, [sp, #28]
  404ee2:	3607      	adds	r6, #7
  404ee4:	f026 0607 	bic.w	r6, r6, #7
  404ee8:	e9d6 0100 	ldrd	r0, r1, [r6]
  404eec:	f106 0208 	add.w	r2, r6, #8
  404ef0:	9207      	str	r2, [sp, #28]
  404ef2:	4606      	mov	r6, r0
  404ef4:	460f      	mov	r7, r1
  404ef6:	e4b6      	b.n	404866 <_vfiprintf_r+0x48a>
  404ef8:	9e07      	ldr	r6, [sp, #28]
  404efa:	3607      	adds	r6, #7
  404efc:	f026 0207 	bic.w	r2, r6, #7
  404f00:	f102 0108 	add.w	r1, r2, #8
  404f04:	e9d2 6700 	ldrd	r6, r7, [r2]
  404f08:	9107      	str	r1, [sp, #28]
  404f0a:	2200      	movs	r2, #0
  404f0c:	f7ff bb99 	b.w	404642 <_vfiprintf_r+0x266>
  404f10:	9e07      	ldr	r6, [sp, #28]
  404f12:	3607      	adds	r6, #7
  404f14:	f026 0107 	bic.w	r1, r6, #7
  404f18:	f101 0008 	add.w	r0, r1, #8
  404f1c:	9007      	str	r0, [sp, #28]
  404f1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404f22:	e519      	b.n	404958 <_vfiprintf_r+0x57c>
  404f24:	46cb      	mov	fp, r9
  404f26:	f7ff bbab 	b.w	404680 <_vfiprintf_r+0x2a4>
  404f2a:	252d      	movs	r5, #45	; 0x2d
  404f2c:	4276      	negs	r6, r6
  404f2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404f32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f36:	2201      	movs	r2, #1
  404f38:	f7ff bb88 	b.w	40464c <_vfiprintf_r+0x270>
  404f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f3e:	b9b3      	cbnz	r3, 404f6e <_vfiprintf_r+0xb92>
  404f40:	4611      	mov	r1, r2
  404f42:	2001      	movs	r0, #1
  404f44:	46ca      	mov	sl, r9
  404f46:	e5f2      	b.n	404b2e <_vfiprintf_r+0x752>
  404f48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f4c:	f000 fdfe 	bl	405b4c <__retarget_lock_release_recursive>
  404f50:	f04f 33ff 	mov.w	r3, #4294967295
  404f54:	9303      	str	r3, [sp, #12]
  404f56:	f7ff bb50 	b.w	4045fa <_vfiprintf_r+0x21e>
  404f5a:	aa0f      	add	r2, sp, #60	; 0x3c
  404f5c:	9904      	ldr	r1, [sp, #16]
  404f5e:	9806      	ldr	r0, [sp, #24]
  404f60:	f7ff f9fc 	bl	40435c <__sprint_r.part.0>
  404f64:	2800      	cmp	r0, #0
  404f66:	f47f aeeb 	bne.w	404d40 <_vfiprintf_r+0x964>
  404f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f6c:	e6a9      	b.n	404cc2 <_vfiprintf_r+0x8e6>
  404f6e:	ab0e      	add	r3, sp, #56	; 0x38
  404f70:	2202      	movs	r2, #2
  404f72:	931c      	str	r3, [sp, #112]	; 0x70
  404f74:	921d      	str	r2, [sp, #116]	; 0x74
  404f76:	2001      	movs	r0, #1
  404f78:	46ca      	mov	sl, r9
  404f7a:	e5d0      	b.n	404b1e <_vfiprintf_r+0x742>
  404f7c:	aa0f      	add	r2, sp, #60	; 0x3c
  404f7e:	9904      	ldr	r1, [sp, #16]
  404f80:	9806      	ldr	r0, [sp, #24]
  404f82:	f7ff f9eb 	bl	40435c <__sprint_r.part.0>
  404f86:	2800      	cmp	r0, #0
  404f88:	f47f aeda 	bne.w	404d40 <_vfiprintf_r+0x964>
  404f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f90:	1c48      	adds	r0, r1, #1
  404f92:	46ca      	mov	sl, r9
  404f94:	e5a4      	b.n	404ae0 <_vfiprintf_r+0x704>
  404f96:	9a07      	ldr	r2, [sp, #28]
  404f98:	9903      	ldr	r1, [sp, #12]
  404f9a:	6813      	ldr	r3, [r2, #0]
  404f9c:	17cd      	asrs	r5, r1, #31
  404f9e:	4608      	mov	r0, r1
  404fa0:	3204      	adds	r2, #4
  404fa2:	4629      	mov	r1, r5
  404fa4:	9207      	str	r2, [sp, #28]
  404fa6:	e9c3 0100 	strd	r0, r1, [r3]
  404faa:	f7ff ba54 	b.w	404456 <_vfiprintf_r+0x7a>
  404fae:	4658      	mov	r0, fp
  404fb0:	9607      	str	r6, [sp, #28]
  404fb2:	9302      	str	r3, [sp, #8]
  404fb4:	f7ff f964 	bl	404280 <strlen>
  404fb8:	2400      	movs	r4, #0
  404fba:	9005      	str	r0, [sp, #20]
  404fbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404fc0:	f7ff bb5e 	b.w	404680 <_vfiprintf_r+0x2a4>
  404fc4:	aa0f      	add	r2, sp, #60	; 0x3c
  404fc6:	9904      	ldr	r1, [sp, #16]
  404fc8:	9806      	ldr	r0, [sp, #24]
  404fca:	f7ff f9c7 	bl	40435c <__sprint_r.part.0>
  404fce:	2800      	cmp	r0, #0
  404fd0:	f47f aeb6 	bne.w	404d40 <_vfiprintf_r+0x964>
  404fd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  404fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fd8:	1c48      	adds	r0, r1, #1
  404fda:	46ca      	mov	sl, r9
  404fdc:	e5a7      	b.n	404b2e <_vfiprintf_r+0x752>
  404fde:	9910      	ldr	r1, [sp, #64]	; 0x40
  404fe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fe2:	4e20      	ldr	r6, [pc, #128]	; (405064 <_vfiprintf_r+0xc88>)
  404fe4:	3101      	adds	r1, #1
  404fe6:	f7ff bb90 	b.w	40470a <_vfiprintf_r+0x32e>
  404fea:	2c06      	cmp	r4, #6
  404fec:	bf28      	it	cs
  404fee:	2406      	movcs	r4, #6
  404ff0:	9405      	str	r4, [sp, #20]
  404ff2:	9607      	str	r6, [sp, #28]
  404ff4:	9401      	str	r4, [sp, #4]
  404ff6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405068 <_vfiprintf_r+0xc8c>
  404ffa:	e4d5      	b.n	4049a8 <_vfiprintf_r+0x5cc>
  404ffc:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ffe:	4e19      	ldr	r6, [pc, #100]	; (405064 <_vfiprintf_r+0xc88>)
  405000:	3001      	adds	r0, #1
  405002:	e603      	b.n	404c0c <_vfiprintf_r+0x830>
  405004:	9405      	str	r4, [sp, #20]
  405006:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40500a:	9607      	str	r6, [sp, #28]
  40500c:	9302      	str	r3, [sp, #8]
  40500e:	4604      	mov	r4, r0
  405010:	f7ff bb36 	b.w	404680 <_vfiprintf_r+0x2a4>
  405014:	4686      	mov	lr, r0
  405016:	f7ff bbce 	b.w	4047b6 <_vfiprintf_r+0x3da>
  40501a:	9806      	ldr	r0, [sp, #24]
  40501c:	aa0f      	add	r2, sp, #60	; 0x3c
  40501e:	4659      	mov	r1, fp
  405020:	f7ff f99c 	bl	40435c <__sprint_r.part.0>
  405024:	2800      	cmp	r0, #0
  405026:	f43f ae24 	beq.w	404c72 <_vfiprintf_r+0x896>
  40502a:	e624      	b.n	404c76 <_vfiprintf_r+0x89a>
  40502c:	9907      	ldr	r1, [sp, #28]
  40502e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405032:	680c      	ldr	r4, [r1, #0]
  405034:	3104      	adds	r1, #4
  405036:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40503a:	46b8      	mov	r8, r7
  40503c:	9107      	str	r1, [sp, #28]
  40503e:	f7ff ba3f 	b.w	4044c0 <_vfiprintf_r+0xe4>
  405042:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405046:	e43c      	b.n	4048c2 <_vfiprintf_r+0x4e6>
  405048:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40504c:	e521      	b.n	404a92 <_vfiprintf_r+0x6b6>
  40504e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405052:	f7ff bbf4 	b.w	40483e <_vfiprintf_r+0x462>
  405056:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40505a:	e491      	b.n	404980 <_vfiprintf_r+0x5a4>
  40505c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405060:	e469      	b.n	404936 <_vfiprintf_r+0x55a>
  405062:	bf00      	nop
  405064:	0040690c 	.word	0x0040690c
  405068:	00406904 	.word	0x00406904

0040506c <__sbprintf>:
  40506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405070:	460c      	mov	r4, r1
  405072:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405076:	8989      	ldrh	r1, [r1, #12]
  405078:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40507a:	89e5      	ldrh	r5, [r4, #14]
  40507c:	9619      	str	r6, [sp, #100]	; 0x64
  40507e:	f021 0102 	bic.w	r1, r1, #2
  405082:	4606      	mov	r6, r0
  405084:	69e0      	ldr	r0, [r4, #28]
  405086:	f8ad 100c 	strh.w	r1, [sp, #12]
  40508a:	4617      	mov	r7, r2
  40508c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405090:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405092:	f8ad 500e 	strh.w	r5, [sp, #14]
  405096:	4698      	mov	r8, r3
  405098:	ad1a      	add	r5, sp, #104	; 0x68
  40509a:	2300      	movs	r3, #0
  40509c:	9007      	str	r0, [sp, #28]
  40509e:	a816      	add	r0, sp, #88	; 0x58
  4050a0:	9209      	str	r2, [sp, #36]	; 0x24
  4050a2:	9306      	str	r3, [sp, #24]
  4050a4:	9500      	str	r5, [sp, #0]
  4050a6:	9504      	str	r5, [sp, #16]
  4050a8:	9102      	str	r1, [sp, #8]
  4050aa:	9105      	str	r1, [sp, #20]
  4050ac:	f000 fd48 	bl	405b40 <__retarget_lock_init_recursive>
  4050b0:	4643      	mov	r3, r8
  4050b2:	463a      	mov	r2, r7
  4050b4:	4669      	mov	r1, sp
  4050b6:	4630      	mov	r0, r6
  4050b8:	f7ff f990 	bl	4043dc <_vfiprintf_r>
  4050bc:	1e05      	subs	r5, r0, #0
  4050be:	db07      	blt.n	4050d0 <__sbprintf+0x64>
  4050c0:	4630      	mov	r0, r6
  4050c2:	4669      	mov	r1, sp
  4050c4:	f000 f928 	bl	405318 <_fflush_r>
  4050c8:	2800      	cmp	r0, #0
  4050ca:	bf18      	it	ne
  4050cc:	f04f 35ff 	movne.w	r5, #4294967295
  4050d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4050d4:	065b      	lsls	r3, r3, #25
  4050d6:	d503      	bpl.n	4050e0 <__sbprintf+0x74>
  4050d8:	89a3      	ldrh	r3, [r4, #12]
  4050da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4050de:	81a3      	strh	r3, [r4, #12]
  4050e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4050e2:	f000 fd2f 	bl	405b44 <__retarget_lock_close_recursive>
  4050e6:	4628      	mov	r0, r5
  4050e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004050f0 <__swsetup_r>:
  4050f0:	b538      	push	{r3, r4, r5, lr}
  4050f2:	4b30      	ldr	r3, [pc, #192]	; (4051b4 <__swsetup_r+0xc4>)
  4050f4:	681b      	ldr	r3, [r3, #0]
  4050f6:	4605      	mov	r5, r0
  4050f8:	460c      	mov	r4, r1
  4050fa:	b113      	cbz	r3, 405102 <__swsetup_r+0x12>
  4050fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4050fe:	2a00      	cmp	r2, #0
  405100:	d038      	beq.n	405174 <__swsetup_r+0x84>
  405102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405106:	b293      	uxth	r3, r2
  405108:	0718      	lsls	r0, r3, #28
  40510a:	d50c      	bpl.n	405126 <__swsetup_r+0x36>
  40510c:	6920      	ldr	r0, [r4, #16]
  40510e:	b1a8      	cbz	r0, 40513c <__swsetup_r+0x4c>
  405110:	f013 0201 	ands.w	r2, r3, #1
  405114:	d01e      	beq.n	405154 <__swsetup_r+0x64>
  405116:	6963      	ldr	r3, [r4, #20]
  405118:	2200      	movs	r2, #0
  40511a:	425b      	negs	r3, r3
  40511c:	61a3      	str	r3, [r4, #24]
  40511e:	60a2      	str	r2, [r4, #8]
  405120:	b1f0      	cbz	r0, 405160 <__swsetup_r+0x70>
  405122:	2000      	movs	r0, #0
  405124:	bd38      	pop	{r3, r4, r5, pc}
  405126:	06d9      	lsls	r1, r3, #27
  405128:	d53c      	bpl.n	4051a4 <__swsetup_r+0xb4>
  40512a:	0758      	lsls	r0, r3, #29
  40512c:	d426      	bmi.n	40517c <__swsetup_r+0x8c>
  40512e:	6920      	ldr	r0, [r4, #16]
  405130:	f042 0308 	orr.w	r3, r2, #8
  405134:	81a3      	strh	r3, [r4, #12]
  405136:	b29b      	uxth	r3, r3
  405138:	2800      	cmp	r0, #0
  40513a:	d1e9      	bne.n	405110 <__swsetup_r+0x20>
  40513c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405140:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405144:	d0e4      	beq.n	405110 <__swsetup_r+0x20>
  405146:	4628      	mov	r0, r5
  405148:	4621      	mov	r1, r4
  40514a:	f000 fd2f 	bl	405bac <__smakebuf_r>
  40514e:	89a3      	ldrh	r3, [r4, #12]
  405150:	6920      	ldr	r0, [r4, #16]
  405152:	e7dd      	b.n	405110 <__swsetup_r+0x20>
  405154:	0799      	lsls	r1, r3, #30
  405156:	bf58      	it	pl
  405158:	6962      	ldrpl	r2, [r4, #20]
  40515a:	60a2      	str	r2, [r4, #8]
  40515c:	2800      	cmp	r0, #0
  40515e:	d1e0      	bne.n	405122 <__swsetup_r+0x32>
  405160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405164:	061a      	lsls	r2, r3, #24
  405166:	d5dd      	bpl.n	405124 <__swsetup_r+0x34>
  405168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40516c:	81a3      	strh	r3, [r4, #12]
  40516e:	f04f 30ff 	mov.w	r0, #4294967295
  405172:	bd38      	pop	{r3, r4, r5, pc}
  405174:	4618      	mov	r0, r3
  405176:	f000 f927 	bl	4053c8 <__sinit>
  40517a:	e7c2      	b.n	405102 <__swsetup_r+0x12>
  40517c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40517e:	b151      	cbz	r1, 405196 <__swsetup_r+0xa6>
  405180:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405184:	4299      	cmp	r1, r3
  405186:	d004      	beq.n	405192 <__swsetup_r+0xa2>
  405188:	4628      	mov	r0, r5
  40518a:	f000 fa43 	bl	405614 <_free_r>
  40518e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405192:	2300      	movs	r3, #0
  405194:	6323      	str	r3, [r4, #48]	; 0x30
  405196:	2300      	movs	r3, #0
  405198:	6920      	ldr	r0, [r4, #16]
  40519a:	6063      	str	r3, [r4, #4]
  40519c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4051a0:	6020      	str	r0, [r4, #0]
  4051a2:	e7c5      	b.n	405130 <__swsetup_r+0x40>
  4051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4051a8:	2309      	movs	r3, #9
  4051aa:	602b      	str	r3, [r5, #0]
  4051ac:	f04f 30ff 	mov.w	r0, #4294967295
  4051b0:	81a2      	strh	r2, [r4, #12]
  4051b2:	bd38      	pop	{r3, r4, r5, pc}
  4051b4:	20400018 	.word	0x20400018

004051b8 <register_fini>:
  4051b8:	4b02      	ldr	r3, [pc, #8]	; (4051c4 <register_fini+0xc>)
  4051ba:	b113      	cbz	r3, 4051c2 <register_fini+0xa>
  4051bc:	4802      	ldr	r0, [pc, #8]	; (4051c8 <register_fini+0x10>)
  4051be:	f000 b805 	b.w	4051cc <atexit>
  4051c2:	4770      	bx	lr
  4051c4:	00000000 	.word	0x00000000
  4051c8:	00405439 	.word	0x00405439

004051cc <atexit>:
  4051cc:	2300      	movs	r3, #0
  4051ce:	4601      	mov	r1, r0
  4051d0:	461a      	mov	r2, r3
  4051d2:	4618      	mov	r0, r3
  4051d4:	f001 b890 	b.w	4062f8 <__register_exitproc>

004051d8 <__sflush_r>:
  4051d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4051dc:	b29a      	uxth	r2, r3
  4051de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051e2:	460d      	mov	r5, r1
  4051e4:	0711      	lsls	r1, r2, #28
  4051e6:	4680      	mov	r8, r0
  4051e8:	d43a      	bmi.n	405260 <__sflush_r+0x88>
  4051ea:	686a      	ldr	r2, [r5, #4]
  4051ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4051f0:	2a00      	cmp	r2, #0
  4051f2:	81ab      	strh	r3, [r5, #12]
  4051f4:	dd6f      	ble.n	4052d6 <__sflush_r+0xfe>
  4051f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4051f8:	2c00      	cmp	r4, #0
  4051fa:	d049      	beq.n	405290 <__sflush_r+0xb8>
  4051fc:	2200      	movs	r2, #0
  4051fe:	b29b      	uxth	r3, r3
  405200:	f8d8 6000 	ldr.w	r6, [r8]
  405204:	f8c8 2000 	str.w	r2, [r8]
  405208:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40520c:	d067      	beq.n	4052de <__sflush_r+0x106>
  40520e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405210:	075f      	lsls	r7, r3, #29
  405212:	d505      	bpl.n	405220 <__sflush_r+0x48>
  405214:	6869      	ldr	r1, [r5, #4]
  405216:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405218:	1a52      	subs	r2, r2, r1
  40521a:	b10b      	cbz	r3, 405220 <__sflush_r+0x48>
  40521c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40521e:	1ad2      	subs	r2, r2, r3
  405220:	2300      	movs	r3, #0
  405222:	69e9      	ldr	r1, [r5, #28]
  405224:	4640      	mov	r0, r8
  405226:	47a0      	blx	r4
  405228:	1c44      	adds	r4, r0, #1
  40522a:	d03c      	beq.n	4052a6 <__sflush_r+0xce>
  40522c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405230:	692a      	ldr	r2, [r5, #16]
  405232:	602a      	str	r2, [r5, #0]
  405234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405238:	2200      	movs	r2, #0
  40523a:	81ab      	strh	r3, [r5, #12]
  40523c:	04db      	lsls	r3, r3, #19
  40523e:	606a      	str	r2, [r5, #4]
  405240:	d447      	bmi.n	4052d2 <__sflush_r+0xfa>
  405242:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405244:	f8c8 6000 	str.w	r6, [r8]
  405248:	b311      	cbz	r1, 405290 <__sflush_r+0xb8>
  40524a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40524e:	4299      	cmp	r1, r3
  405250:	d002      	beq.n	405258 <__sflush_r+0x80>
  405252:	4640      	mov	r0, r8
  405254:	f000 f9de 	bl	405614 <_free_r>
  405258:	2000      	movs	r0, #0
  40525a:	6328      	str	r0, [r5, #48]	; 0x30
  40525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405260:	692e      	ldr	r6, [r5, #16]
  405262:	b1ae      	cbz	r6, 405290 <__sflush_r+0xb8>
  405264:	682c      	ldr	r4, [r5, #0]
  405266:	602e      	str	r6, [r5, #0]
  405268:	0791      	lsls	r1, r2, #30
  40526a:	bf0c      	ite	eq
  40526c:	696b      	ldreq	r3, [r5, #20]
  40526e:	2300      	movne	r3, #0
  405270:	1ba4      	subs	r4, r4, r6
  405272:	60ab      	str	r3, [r5, #8]
  405274:	e00a      	b.n	40528c <__sflush_r+0xb4>
  405276:	4623      	mov	r3, r4
  405278:	4632      	mov	r2, r6
  40527a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40527c:	69e9      	ldr	r1, [r5, #28]
  40527e:	4640      	mov	r0, r8
  405280:	47b8      	blx	r7
  405282:	2800      	cmp	r0, #0
  405284:	eba4 0400 	sub.w	r4, r4, r0
  405288:	4406      	add	r6, r0
  40528a:	dd04      	ble.n	405296 <__sflush_r+0xbe>
  40528c:	2c00      	cmp	r4, #0
  40528e:	dcf2      	bgt.n	405276 <__sflush_r+0x9e>
  405290:	2000      	movs	r0, #0
  405292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405296:	89ab      	ldrh	r3, [r5, #12]
  405298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40529c:	81ab      	strh	r3, [r5, #12]
  40529e:	f04f 30ff 	mov.w	r0, #4294967295
  4052a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052a6:	f8d8 4000 	ldr.w	r4, [r8]
  4052aa:	2c1d      	cmp	r4, #29
  4052ac:	d8f3      	bhi.n	405296 <__sflush_r+0xbe>
  4052ae:	4b19      	ldr	r3, [pc, #100]	; (405314 <__sflush_r+0x13c>)
  4052b0:	40e3      	lsrs	r3, r4
  4052b2:	43db      	mvns	r3, r3
  4052b4:	f013 0301 	ands.w	r3, r3, #1
  4052b8:	d1ed      	bne.n	405296 <__sflush_r+0xbe>
  4052ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4052be:	606b      	str	r3, [r5, #4]
  4052c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4052c4:	6929      	ldr	r1, [r5, #16]
  4052c6:	81ab      	strh	r3, [r5, #12]
  4052c8:	04da      	lsls	r2, r3, #19
  4052ca:	6029      	str	r1, [r5, #0]
  4052cc:	d5b9      	bpl.n	405242 <__sflush_r+0x6a>
  4052ce:	2c00      	cmp	r4, #0
  4052d0:	d1b7      	bne.n	405242 <__sflush_r+0x6a>
  4052d2:	6528      	str	r0, [r5, #80]	; 0x50
  4052d4:	e7b5      	b.n	405242 <__sflush_r+0x6a>
  4052d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4052d8:	2a00      	cmp	r2, #0
  4052da:	dc8c      	bgt.n	4051f6 <__sflush_r+0x1e>
  4052dc:	e7d8      	b.n	405290 <__sflush_r+0xb8>
  4052de:	2301      	movs	r3, #1
  4052e0:	69e9      	ldr	r1, [r5, #28]
  4052e2:	4640      	mov	r0, r8
  4052e4:	47a0      	blx	r4
  4052e6:	1c43      	adds	r3, r0, #1
  4052e8:	4602      	mov	r2, r0
  4052ea:	d002      	beq.n	4052f2 <__sflush_r+0x11a>
  4052ec:	89ab      	ldrh	r3, [r5, #12]
  4052ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4052f0:	e78e      	b.n	405210 <__sflush_r+0x38>
  4052f2:	f8d8 3000 	ldr.w	r3, [r8]
  4052f6:	2b00      	cmp	r3, #0
  4052f8:	d0f8      	beq.n	4052ec <__sflush_r+0x114>
  4052fa:	2b1d      	cmp	r3, #29
  4052fc:	d001      	beq.n	405302 <__sflush_r+0x12a>
  4052fe:	2b16      	cmp	r3, #22
  405300:	d102      	bne.n	405308 <__sflush_r+0x130>
  405302:	f8c8 6000 	str.w	r6, [r8]
  405306:	e7c3      	b.n	405290 <__sflush_r+0xb8>
  405308:	89ab      	ldrh	r3, [r5, #12]
  40530a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40530e:	81ab      	strh	r3, [r5, #12]
  405310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405314:	20400001 	.word	0x20400001

00405318 <_fflush_r>:
  405318:	b538      	push	{r3, r4, r5, lr}
  40531a:	460d      	mov	r5, r1
  40531c:	4604      	mov	r4, r0
  40531e:	b108      	cbz	r0, 405324 <_fflush_r+0xc>
  405320:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405322:	b1bb      	cbz	r3, 405354 <_fflush_r+0x3c>
  405324:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405328:	b188      	cbz	r0, 40534e <_fflush_r+0x36>
  40532a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40532c:	07db      	lsls	r3, r3, #31
  40532e:	d401      	bmi.n	405334 <_fflush_r+0x1c>
  405330:	0581      	lsls	r1, r0, #22
  405332:	d517      	bpl.n	405364 <_fflush_r+0x4c>
  405334:	4620      	mov	r0, r4
  405336:	4629      	mov	r1, r5
  405338:	f7ff ff4e 	bl	4051d8 <__sflush_r>
  40533c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40533e:	07da      	lsls	r2, r3, #31
  405340:	4604      	mov	r4, r0
  405342:	d402      	bmi.n	40534a <_fflush_r+0x32>
  405344:	89ab      	ldrh	r3, [r5, #12]
  405346:	059b      	lsls	r3, r3, #22
  405348:	d507      	bpl.n	40535a <_fflush_r+0x42>
  40534a:	4620      	mov	r0, r4
  40534c:	bd38      	pop	{r3, r4, r5, pc}
  40534e:	4604      	mov	r4, r0
  405350:	4620      	mov	r0, r4
  405352:	bd38      	pop	{r3, r4, r5, pc}
  405354:	f000 f838 	bl	4053c8 <__sinit>
  405358:	e7e4      	b.n	405324 <_fflush_r+0xc>
  40535a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40535c:	f000 fbf6 	bl	405b4c <__retarget_lock_release_recursive>
  405360:	4620      	mov	r0, r4
  405362:	bd38      	pop	{r3, r4, r5, pc}
  405364:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405366:	f000 fbef 	bl	405b48 <__retarget_lock_acquire_recursive>
  40536a:	e7e3      	b.n	405334 <_fflush_r+0x1c>

0040536c <_cleanup_r>:
  40536c:	4901      	ldr	r1, [pc, #4]	; (405374 <_cleanup_r+0x8>)
  40536e:	f000 bbaf 	b.w	405ad0 <_fwalk_reent>
  405372:	bf00      	nop
  405374:	004063e1 	.word	0x004063e1

00405378 <std.isra.0>:
  405378:	b510      	push	{r4, lr}
  40537a:	2300      	movs	r3, #0
  40537c:	4604      	mov	r4, r0
  40537e:	8181      	strh	r1, [r0, #12]
  405380:	81c2      	strh	r2, [r0, #14]
  405382:	6003      	str	r3, [r0, #0]
  405384:	6043      	str	r3, [r0, #4]
  405386:	6083      	str	r3, [r0, #8]
  405388:	6643      	str	r3, [r0, #100]	; 0x64
  40538a:	6103      	str	r3, [r0, #16]
  40538c:	6143      	str	r3, [r0, #20]
  40538e:	6183      	str	r3, [r0, #24]
  405390:	4619      	mov	r1, r3
  405392:	2208      	movs	r2, #8
  405394:	305c      	adds	r0, #92	; 0x5c
  405396:	f7fe fe1d 	bl	403fd4 <memset>
  40539a:	4807      	ldr	r0, [pc, #28]	; (4053b8 <std.isra.0+0x40>)
  40539c:	4907      	ldr	r1, [pc, #28]	; (4053bc <std.isra.0+0x44>)
  40539e:	4a08      	ldr	r2, [pc, #32]	; (4053c0 <std.isra.0+0x48>)
  4053a0:	4b08      	ldr	r3, [pc, #32]	; (4053c4 <std.isra.0+0x4c>)
  4053a2:	6220      	str	r0, [r4, #32]
  4053a4:	61e4      	str	r4, [r4, #28]
  4053a6:	6261      	str	r1, [r4, #36]	; 0x24
  4053a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4053aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4053ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4053b4:	f000 bbc4 	b.w	405b40 <__retarget_lock_init_recursive>
  4053b8:	00406125 	.word	0x00406125
  4053bc:	00406149 	.word	0x00406149
  4053c0:	00406185 	.word	0x00406185
  4053c4:	004061a5 	.word	0x004061a5

004053c8 <__sinit>:
  4053c8:	b510      	push	{r4, lr}
  4053ca:	4604      	mov	r4, r0
  4053cc:	4812      	ldr	r0, [pc, #72]	; (405418 <__sinit+0x50>)
  4053ce:	f000 fbbb 	bl	405b48 <__retarget_lock_acquire_recursive>
  4053d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4053d4:	b9d2      	cbnz	r2, 40540c <__sinit+0x44>
  4053d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4053da:	4810      	ldr	r0, [pc, #64]	; (40541c <__sinit+0x54>)
  4053dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4053e0:	2103      	movs	r1, #3
  4053e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4053e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4053e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4053ec:	6860      	ldr	r0, [r4, #4]
  4053ee:	2104      	movs	r1, #4
  4053f0:	f7ff ffc2 	bl	405378 <std.isra.0>
  4053f4:	2201      	movs	r2, #1
  4053f6:	2109      	movs	r1, #9
  4053f8:	68a0      	ldr	r0, [r4, #8]
  4053fa:	f7ff ffbd 	bl	405378 <std.isra.0>
  4053fe:	2202      	movs	r2, #2
  405400:	2112      	movs	r1, #18
  405402:	68e0      	ldr	r0, [r4, #12]
  405404:	f7ff ffb8 	bl	405378 <std.isra.0>
  405408:	2301      	movs	r3, #1
  40540a:	63a3      	str	r3, [r4, #56]	; 0x38
  40540c:	4802      	ldr	r0, [pc, #8]	; (405418 <__sinit+0x50>)
  40540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405412:	f000 bb9b 	b.w	405b4c <__retarget_lock_release_recursive>
  405416:	bf00      	nop
  405418:	20400cc0 	.word	0x20400cc0
  40541c:	0040536d 	.word	0x0040536d

00405420 <__sfp_lock_acquire>:
  405420:	4801      	ldr	r0, [pc, #4]	; (405428 <__sfp_lock_acquire+0x8>)
  405422:	f000 bb91 	b.w	405b48 <__retarget_lock_acquire_recursive>
  405426:	bf00      	nop
  405428:	20400cd4 	.word	0x20400cd4

0040542c <__sfp_lock_release>:
  40542c:	4801      	ldr	r0, [pc, #4]	; (405434 <__sfp_lock_release+0x8>)
  40542e:	f000 bb8d 	b.w	405b4c <__retarget_lock_release_recursive>
  405432:	bf00      	nop
  405434:	20400cd4 	.word	0x20400cd4

00405438 <__libc_fini_array>:
  405438:	b538      	push	{r3, r4, r5, lr}
  40543a:	4c0a      	ldr	r4, [pc, #40]	; (405464 <__libc_fini_array+0x2c>)
  40543c:	4d0a      	ldr	r5, [pc, #40]	; (405468 <__libc_fini_array+0x30>)
  40543e:	1b64      	subs	r4, r4, r5
  405440:	10a4      	asrs	r4, r4, #2
  405442:	d00a      	beq.n	40545a <__libc_fini_array+0x22>
  405444:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405448:	3b01      	subs	r3, #1
  40544a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40544e:	3c01      	subs	r4, #1
  405450:	f855 3904 	ldr.w	r3, [r5], #-4
  405454:	4798      	blx	r3
  405456:	2c00      	cmp	r4, #0
  405458:	d1f9      	bne.n	40544e <__libc_fini_array+0x16>
  40545a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40545e:	f001 baf9 	b.w	406a54 <_fini>
  405462:	bf00      	nop
  405464:	00406a64 	.word	0x00406a64
  405468:	00406a60 	.word	0x00406a60

0040546c <__fputwc>:
  40546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405470:	b082      	sub	sp, #8
  405472:	4680      	mov	r8, r0
  405474:	4689      	mov	r9, r1
  405476:	4614      	mov	r4, r2
  405478:	f000 fb54 	bl	405b24 <__locale_mb_cur_max>
  40547c:	2801      	cmp	r0, #1
  40547e:	d036      	beq.n	4054ee <__fputwc+0x82>
  405480:	464a      	mov	r2, r9
  405482:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405486:	a901      	add	r1, sp, #4
  405488:	4640      	mov	r0, r8
  40548a:	f000 fee7 	bl	40625c <_wcrtomb_r>
  40548e:	1c42      	adds	r2, r0, #1
  405490:	4606      	mov	r6, r0
  405492:	d025      	beq.n	4054e0 <__fputwc+0x74>
  405494:	b3a8      	cbz	r0, 405502 <__fputwc+0x96>
  405496:	f89d e004 	ldrb.w	lr, [sp, #4]
  40549a:	2500      	movs	r5, #0
  40549c:	f10d 0a04 	add.w	sl, sp, #4
  4054a0:	e009      	b.n	4054b6 <__fputwc+0x4a>
  4054a2:	6823      	ldr	r3, [r4, #0]
  4054a4:	1c5a      	adds	r2, r3, #1
  4054a6:	6022      	str	r2, [r4, #0]
  4054a8:	f883 e000 	strb.w	lr, [r3]
  4054ac:	3501      	adds	r5, #1
  4054ae:	42b5      	cmp	r5, r6
  4054b0:	d227      	bcs.n	405502 <__fputwc+0x96>
  4054b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4054b6:	68a3      	ldr	r3, [r4, #8]
  4054b8:	3b01      	subs	r3, #1
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	60a3      	str	r3, [r4, #8]
  4054be:	daf0      	bge.n	4054a2 <__fputwc+0x36>
  4054c0:	69a7      	ldr	r7, [r4, #24]
  4054c2:	42bb      	cmp	r3, r7
  4054c4:	4671      	mov	r1, lr
  4054c6:	4622      	mov	r2, r4
  4054c8:	4640      	mov	r0, r8
  4054ca:	db02      	blt.n	4054d2 <__fputwc+0x66>
  4054cc:	f1be 0f0a 	cmp.w	lr, #10
  4054d0:	d1e7      	bne.n	4054a2 <__fputwc+0x36>
  4054d2:	f000 fe6b 	bl	4061ac <__swbuf_r>
  4054d6:	1c43      	adds	r3, r0, #1
  4054d8:	d1e8      	bne.n	4054ac <__fputwc+0x40>
  4054da:	b002      	add	sp, #8
  4054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054e0:	89a3      	ldrh	r3, [r4, #12]
  4054e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4054e6:	81a3      	strh	r3, [r4, #12]
  4054e8:	b002      	add	sp, #8
  4054ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4054f2:	2bfe      	cmp	r3, #254	; 0xfe
  4054f4:	d8c4      	bhi.n	405480 <__fputwc+0x14>
  4054f6:	fa5f fe89 	uxtb.w	lr, r9
  4054fa:	4606      	mov	r6, r0
  4054fc:	f88d e004 	strb.w	lr, [sp, #4]
  405500:	e7cb      	b.n	40549a <__fputwc+0x2e>
  405502:	4648      	mov	r0, r9
  405504:	b002      	add	sp, #8
  405506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40550a:	bf00      	nop

0040550c <_fputwc_r>:
  40550c:	b530      	push	{r4, r5, lr}
  40550e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405510:	f013 0f01 	tst.w	r3, #1
  405514:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405518:	4614      	mov	r4, r2
  40551a:	b083      	sub	sp, #12
  40551c:	4605      	mov	r5, r0
  40551e:	b29a      	uxth	r2, r3
  405520:	d101      	bne.n	405526 <_fputwc_r+0x1a>
  405522:	0590      	lsls	r0, r2, #22
  405524:	d51c      	bpl.n	405560 <_fputwc_r+0x54>
  405526:	0490      	lsls	r0, r2, #18
  405528:	d406      	bmi.n	405538 <_fputwc_r+0x2c>
  40552a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40552c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405534:	81a3      	strh	r3, [r4, #12]
  405536:	6662      	str	r2, [r4, #100]	; 0x64
  405538:	4628      	mov	r0, r5
  40553a:	4622      	mov	r2, r4
  40553c:	f7ff ff96 	bl	40546c <__fputwc>
  405540:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405542:	07da      	lsls	r2, r3, #31
  405544:	4605      	mov	r5, r0
  405546:	d402      	bmi.n	40554e <_fputwc_r+0x42>
  405548:	89a3      	ldrh	r3, [r4, #12]
  40554a:	059b      	lsls	r3, r3, #22
  40554c:	d502      	bpl.n	405554 <_fputwc_r+0x48>
  40554e:	4628      	mov	r0, r5
  405550:	b003      	add	sp, #12
  405552:	bd30      	pop	{r4, r5, pc}
  405554:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405556:	f000 faf9 	bl	405b4c <__retarget_lock_release_recursive>
  40555a:	4628      	mov	r0, r5
  40555c:	b003      	add	sp, #12
  40555e:	bd30      	pop	{r4, r5, pc}
  405560:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405562:	9101      	str	r1, [sp, #4]
  405564:	f000 faf0 	bl	405b48 <__retarget_lock_acquire_recursive>
  405568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40556c:	9901      	ldr	r1, [sp, #4]
  40556e:	b29a      	uxth	r2, r3
  405570:	e7d9      	b.n	405526 <_fputwc_r+0x1a>
  405572:	bf00      	nop

00405574 <_malloc_trim_r>:
  405574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405576:	4f24      	ldr	r7, [pc, #144]	; (405608 <_malloc_trim_r+0x94>)
  405578:	460c      	mov	r4, r1
  40557a:	4606      	mov	r6, r0
  40557c:	f7fe fd78 	bl	404070 <__malloc_lock>
  405580:	68bb      	ldr	r3, [r7, #8]
  405582:	685d      	ldr	r5, [r3, #4]
  405584:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405588:	310f      	adds	r1, #15
  40558a:	f025 0503 	bic.w	r5, r5, #3
  40558e:	4429      	add	r1, r5
  405590:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405594:	f021 010f 	bic.w	r1, r1, #15
  405598:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40559c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4055a0:	db07      	blt.n	4055b2 <_malloc_trim_r+0x3e>
  4055a2:	2100      	movs	r1, #0
  4055a4:	4630      	mov	r0, r6
  4055a6:	f7fe fd6f 	bl	404088 <_sbrk_r>
  4055aa:	68bb      	ldr	r3, [r7, #8]
  4055ac:	442b      	add	r3, r5
  4055ae:	4298      	cmp	r0, r3
  4055b0:	d004      	beq.n	4055bc <_malloc_trim_r+0x48>
  4055b2:	4630      	mov	r0, r6
  4055b4:	f7fe fd62 	bl	40407c <__malloc_unlock>
  4055b8:	2000      	movs	r0, #0
  4055ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4055bc:	4261      	negs	r1, r4
  4055be:	4630      	mov	r0, r6
  4055c0:	f7fe fd62 	bl	404088 <_sbrk_r>
  4055c4:	3001      	adds	r0, #1
  4055c6:	d00d      	beq.n	4055e4 <_malloc_trim_r+0x70>
  4055c8:	4b10      	ldr	r3, [pc, #64]	; (40560c <_malloc_trim_r+0x98>)
  4055ca:	68ba      	ldr	r2, [r7, #8]
  4055cc:	6819      	ldr	r1, [r3, #0]
  4055ce:	1b2d      	subs	r5, r5, r4
  4055d0:	f045 0501 	orr.w	r5, r5, #1
  4055d4:	4630      	mov	r0, r6
  4055d6:	1b09      	subs	r1, r1, r4
  4055d8:	6055      	str	r5, [r2, #4]
  4055da:	6019      	str	r1, [r3, #0]
  4055dc:	f7fe fd4e 	bl	40407c <__malloc_unlock>
  4055e0:	2001      	movs	r0, #1
  4055e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4055e4:	2100      	movs	r1, #0
  4055e6:	4630      	mov	r0, r6
  4055e8:	f7fe fd4e 	bl	404088 <_sbrk_r>
  4055ec:	68ba      	ldr	r2, [r7, #8]
  4055ee:	1a83      	subs	r3, r0, r2
  4055f0:	2b0f      	cmp	r3, #15
  4055f2:	ddde      	ble.n	4055b2 <_malloc_trim_r+0x3e>
  4055f4:	4c06      	ldr	r4, [pc, #24]	; (405610 <_malloc_trim_r+0x9c>)
  4055f6:	4905      	ldr	r1, [pc, #20]	; (40560c <_malloc_trim_r+0x98>)
  4055f8:	6824      	ldr	r4, [r4, #0]
  4055fa:	f043 0301 	orr.w	r3, r3, #1
  4055fe:	1b00      	subs	r0, r0, r4
  405600:	6053      	str	r3, [r2, #4]
  405602:	6008      	str	r0, [r1, #0]
  405604:	e7d5      	b.n	4055b2 <_malloc_trim_r+0x3e>
  405606:	bf00      	nop
  405608:	20400448 	.word	0x20400448
  40560c:	20400ba8 	.word	0x20400ba8
  405610:	20400850 	.word	0x20400850

00405614 <_free_r>:
  405614:	2900      	cmp	r1, #0
  405616:	d044      	beq.n	4056a2 <_free_r+0x8e>
  405618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40561c:	460d      	mov	r5, r1
  40561e:	4680      	mov	r8, r0
  405620:	f7fe fd26 	bl	404070 <__malloc_lock>
  405624:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405628:	4969      	ldr	r1, [pc, #420]	; (4057d0 <_free_r+0x1bc>)
  40562a:	f027 0301 	bic.w	r3, r7, #1
  40562e:	f1a5 0408 	sub.w	r4, r5, #8
  405632:	18e2      	adds	r2, r4, r3
  405634:	688e      	ldr	r6, [r1, #8]
  405636:	6850      	ldr	r0, [r2, #4]
  405638:	42b2      	cmp	r2, r6
  40563a:	f020 0003 	bic.w	r0, r0, #3
  40563e:	d05e      	beq.n	4056fe <_free_r+0xea>
  405640:	07fe      	lsls	r6, r7, #31
  405642:	6050      	str	r0, [r2, #4]
  405644:	d40b      	bmi.n	40565e <_free_r+0x4a>
  405646:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40564a:	1be4      	subs	r4, r4, r7
  40564c:	f101 0e08 	add.w	lr, r1, #8
  405650:	68a5      	ldr	r5, [r4, #8]
  405652:	4575      	cmp	r5, lr
  405654:	443b      	add	r3, r7
  405656:	d06d      	beq.n	405734 <_free_r+0x120>
  405658:	68e7      	ldr	r7, [r4, #12]
  40565a:	60ef      	str	r7, [r5, #12]
  40565c:	60bd      	str	r5, [r7, #8]
  40565e:	1815      	adds	r5, r2, r0
  405660:	686d      	ldr	r5, [r5, #4]
  405662:	07ed      	lsls	r5, r5, #31
  405664:	d53e      	bpl.n	4056e4 <_free_r+0xd0>
  405666:	f043 0201 	orr.w	r2, r3, #1
  40566a:	6062      	str	r2, [r4, #4]
  40566c:	50e3      	str	r3, [r4, r3]
  40566e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405672:	d217      	bcs.n	4056a4 <_free_r+0x90>
  405674:	08db      	lsrs	r3, r3, #3
  405676:	1c58      	adds	r0, r3, #1
  405678:	109a      	asrs	r2, r3, #2
  40567a:	684d      	ldr	r5, [r1, #4]
  40567c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405680:	60a7      	str	r7, [r4, #8]
  405682:	2301      	movs	r3, #1
  405684:	4093      	lsls	r3, r2
  405686:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40568a:	432b      	orrs	r3, r5
  40568c:	3a08      	subs	r2, #8
  40568e:	60e2      	str	r2, [r4, #12]
  405690:	604b      	str	r3, [r1, #4]
  405692:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405696:	60fc      	str	r4, [r7, #12]
  405698:	4640      	mov	r0, r8
  40569a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40569e:	f7fe bced 	b.w	40407c <__malloc_unlock>
  4056a2:	4770      	bx	lr
  4056a4:	0a5a      	lsrs	r2, r3, #9
  4056a6:	2a04      	cmp	r2, #4
  4056a8:	d852      	bhi.n	405750 <_free_r+0x13c>
  4056aa:	099a      	lsrs	r2, r3, #6
  4056ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4056b0:	00ff      	lsls	r7, r7, #3
  4056b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4056b6:	19c8      	adds	r0, r1, r7
  4056b8:	59ca      	ldr	r2, [r1, r7]
  4056ba:	3808      	subs	r0, #8
  4056bc:	4290      	cmp	r0, r2
  4056be:	d04f      	beq.n	405760 <_free_r+0x14c>
  4056c0:	6851      	ldr	r1, [r2, #4]
  4056c2:	f021 0103 	bic.w	r1, r1, #3
  4056c6:	428b      	cmp	r3, r1
  4056c8:	d232      	bcs.n	405730 <_free_r+0x11c>
  4056ca:	6892      	ldr	r2, [r2, #8]
  4056cc:	4290      	cmp	r0, r2
  4056ce:	d1f7      	bne.n	4056c0 <_free_r+0xac>
  4056d0:	68c3      	ldr	r3, [r0, #12]
  4056d2:	60a0      	str	r0, [r4, #8]
  4056d4:	60e3      	str	r3, [r4, #12]
  4056d6:	609c      	str	r4, [r3, #8]
  4056d8:	60c4      	str	r4, [r0, #12]
  4056da:	4640      	mov	r0, r8
  4056dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4056e0:	f7fe bccc 	b.w	40407c <__malloc_unlock>
  4056e4:	6895      	ldr	r5, [r2, #8]
  4056e6:	4f3b      	ldr	r7, [pc, #236]	; (4057d4 <_free_r+0x1c0>)
  4056e8:	42bd      	cmp	r5, r7
  4056ea:	4403      	add	r3, r0
  4056ec:	d040      	beq.n	405770 <_free_r+0x15c>
  4056ee:	68d0      	ldr	r0, [r2, #12]
  4056f0:	60e8      	str	r0, [r5, #12]
  4056f2:	f043 0201 	orr.w	r2, r3, #1
  4056f6:	6085      	str	r5, [r0, #8]
  4056f8:	6062      	str	r2, [r4, #4]
  4056fa:	50e3      	str	r3, [r4, r3]
  4056fc:	e7b7      	b.n	40566e <_free_r+0x5a>
  4056fe:	07ff      	lsls	r7, r7, #31
  405700:	4403      	add	r3, r0
  405702:	d407      	bmi.n	405714 <_free_r+0x100>
  405704:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405708:	1aa4      	subs	r4, r4, r2
  40570a:	4413      	add	r3, r2
  40570c:	68a0      	ldr	r0, [r4, #8]
  40570e:	68e2      	ldr	r2, [r4, #12]
  405710:	60c2      	str	r2, [r0, #12]
  405712:	6090      	str	r0, [r2, #8]
  405714:	4a30      	ldr	r2, [pc, #192]	; (4057d8 <_free_r+0x1c4>)
  405716:	6812      	ldr	r2, [r2, #0]
  405718:	f043 0001 	orr.w	r0, r3, #1
  40571c:	4293      	cmp	r3, r2
  40571e:	6060      	str	r0, [r4, #4]
  405720:	608c      	str	r4, [r1, #8]
  405722:	d3b9      	bcc.n	405698 <_free_r+0x84>
  405724:	4b2d      	ldr	r3, [pc, #180]	; (4057dc <_free_r+0x1c8>)
  405726:	4640      	mov	r0, r8
  405728:	6819      	ldr	r1, [r3, #0]
  40572a:	f7ff ff23 	bl	405574 <_malloc_trim_r>
  40572e:	e7b3      	b.n	405698 <_free_r+0x84>
  405730:	4610      	mov	r0, r2
  405732:	e7cd      	b.n	4056d0 <_free_r+0xbc>
  405734:	1811      	adds	r1, r2, r0
  405736:	6849      	ldr	r1, [r1, #4]
  405738:	07c9      	lsls	r1, r1, #31
  40573a:	d444      	bmi.n	4057c6 <_free_r+0x1b2>
  40573c:	6891      	ldr	r1, [r2, #8]
  40573e:	68d2      	ldr	r2, [r2, #12]
  405740:	60ca      	str	r2, [r1, #12]
  405742:	4403      	add	r3, r0
  405744:	f043 0001 	orr.w	r0, r3, #1
  405748:	6091      	str	r1, [r2, #8]
  40574a:	6060      	str	r0, [r4, #4]
  40574c:	50e3      	str	r3, [r4, r3]
  40574e:	e7a3      	b.n	405698 <_free_r+0x84>
  405750:	2a14      	cmp	r2, #20
  405752:	d816      	bhi.n	405782 <_free_r+0x16e>
  405754:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405758:	00ff      	lsls	r7, r7, #3
  40575a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40575e:	e7aa      	b.n	4056b6 <_free_r+0xa2>
  405760:	10aa      	asrs	r2, r5, #2
  405762:	2301      	movs	r3, #1
  405764:	684d      	ldr	r5, [r1, #4]
  405766:	4093      	lsls	r3, r2
  405768:	432b      	orrs	r3, r5
  40576a:	604b      	str	r3, [r1, #4]
  40576c:	4603      	mov	r3, r0
  40576e:	e7b0      	b.n	4056d2 <_free_r+0xbe>
  405770:	f043 0201 	orr.w	r2, r3, #1
  405774:	614c      	str	r4, [r1, #20]
  405776:	610c      	str	r4, [r1, #16]
  405778:	60e5      	str	r5, [r4, #12]
  40577a:	60a5      	str	r5, [r4, #8]
  40577c:	6062      	str	r2, [r4, #4]
  40577e:	50e3      	str	r3, [r4, r3]
  405780:	e78a      	b.n	405698 <_free_r+0x84>
  405782:	2a54      	cmp	r2, #84	; 0x54
  405784:	d806      	bhi.n	405794 <_free_r+0x180>
  405786:	0b1a      	lsrs	r2, r3, #12
  405788:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40578c:	00ff      	lsls	r7, r7, #3
  40578e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405792:	e790      	b.n	4056b6 <_free_r+0xa2>
  405794:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405798:	d806      	bhi.n	4057a8 <_free_r+0x194>
  40579a:	0bda      	lsrs	r2, r3, #15
  40579c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4057a0:	00ff      	lsls	r7, r7, #3
  4057a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4057a6:	e786      	b.n	4056b6 <_free_r+0xa2>
  4057a8:	f240 5054 	movw	r0, #1364	; 0x554
  4057ac:	4282      	cmp	r2, r0
  4057ae:	d806      	bhi.n	4057be <_free_r+0x1aa>
  4057b0:	0c9a      	lsrs	r2, r3, #18
  4057b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4057b6:	00ff      	lsls	r7, r7, #3
  4057b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4057bc:	e77b      	b.n	4056b6 <_free_r+0xa2>
  4057be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4057c2:	257e      	movs	r5, #126	; 0x7e
  4057c4:	e777      	b.n	4056b6 <_free_r+0xa2>
  4057c6:	f043 0101 	orr.w	r1, r3, #1
  4057ca:	6061      	str	r1, [r4, #4]
  4057cc:	6013      	str	r3, [r2, #0]
  4057ce:	e763      	b.n	405698 <_free_r+0x84>
  4057d0:	20400448 	.word	0x20400448
  4057d4:	20400450 	.word	0x20400450
  4057d8:	20400854 	.word	0x20400854
  4057dc:	20400bd8 	.word	0x20400bd8

004057e0 <__sfvwrite_r>:
  4057e0:	6893      	ldr	r3, [r2, #8]
  4057e2:	2b00      	cmp	r3, #0
  4057e4:	d073      	beq.n	4058ce <__sfvwrite_r+0xee>
  4057e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057ea:	898b      	ldrh	r3, [r1, #12]
  4057ec:	b083      	sub	sp, #12
  4057ee:	460c      	mov	r4, r1
  4057f0:	0719      	lsls	r1, r3, #28
  4057f2:	9000      	str	r0, [sp, #0]
  4057f4:	4616      	mov	r6, r2
  4057f6:	d526      	bpl.n	405846 <__sfvwrite_r+0x66>
  4057f8:	6922      	ldr	r2, [r4, #16]
  4057fa:	b322      	cbz	r2, 405846 <__sfvwrite_r+0x66>
  4057fc:	f013 0002 	ands.w	r0, r3, #2
  405800:	6835      	ldr	r5, [r6, #0]
  405802:	d02c      	beq.n	40585e <__sfvwrite_r+0x7e>
  405804:	f04f 0900 	mov.w	r9, #0
  405808:	4fb0      	ldr	r7, [pc, #704]	; (405acc <__sfvwrite_r+0x2ec>)
  40580a:	46c8      	mov	r8, r9
  40580c:	46b2      	mov	sl, r6
  40580e:	45b8      	cmp	r8, r7
  405810:	4643      	mov	r3, r8
  405812:	464a      	mov	r2, r9
  405814:	bf28      	it	cs
  405816:	463b      	movcs	r3, r7
  405818:	9800      	ldr	r0, [sp, #0]
  40581a:	f1b8 0f00 	cmp.w	r8, #0
  40581e:	d050      	beq.n	4058c2 <__sfvwrite_r+0xe2>
  405820:	69e1      	ldr	r1, [r4, #28]
  405822:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405824:	47b0      	blx	r6
  405826:	2800      	cmp	r0, #0
  405828:	dd58      	ble.n	4058dc <__sfvwrite_r+0xfc>
  40582a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40582e:	1a1b      	subs	r3, r3, r0
  405830:	4481      	add	r9, r0
  405832:	eba8 0800 	sub.w	r8, r8, r0
  405836:	f8ca 3008 	str.w	r3, [sl, #8]
  40583a:	2b00      	cmp	r3, #0
  40583c:	d1e7      	bne.n	40580e <__sfvwrite_r+0x2e>
  40583e:	2000      	movs	r0, #0
  405840:	b003      	add	sp, #12
  405842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405846:	4621      	mov	r1, r4
  405848:	9800      	ldr	r0, [sp, #0]
  40584a:	f7ff fc51 	bl	4050f0 <__swsetup_r>
  40584e:	2800      	cmp	r0, #0
  405850:	f040 8133 	bne.w	405aba <__sfvwrite_r+0x2da>
  405854:	89a3      	ldrh	r3, [r4, #12]
  405856:	6835      	ldr	r5, [r6, #0]
  405858:	f013 0002 	ands.w	r0, r3, #2
  40585c:	d1d2      	bne.n	405804 <__sfvwrite_r+0x24>
  40585e:	f013 0901 	ands.w	r9, r3, #1
  405862:	d145      	bne.n	4058f0 <__sfvwrite_r+0x110>
  405864:	464f      	mov	r7, r9
  405866:	9601      	str	r6, [sp, #4]
  405868:	b337      	cbz	r7, 4058b8 <__sfvwrite_r+0xd8>
  40586a:	059a      	lsls	r2, r3, #22
  40586c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405870:	f140 8083 	bpl.w	40597a <__sfvwrite_r+0x19a>
  405874:	4547      	cmp	r7, r8
  405876:	46c3      	mov	fp, r8
  405878:	f0c0 80ab 	bcc.w	4059d2 <__sfvwrite_r+0x1f2>
  40587c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405880:	f040 80ac 	bne.w	4059dc <__sfvwrite_r+0x1fc>
  405884:	6820      	ldr	r0, [r4, #0]
  405886:	46ba      	mov	sl, r7
  405888:	465a      	mov	r2, fp
  40588a:	4649      	mov	r1, r9
  40588c:	f000 fa40 	bl	405d10 <memmove>
  405890:	68a2      	ldr	r2, [r4, #8]
  405892:	6823      	ldr	r3, [r4, #0]
  405894:	eba2 0208 	sub.w	r2, r2, r8
  405898:	445b      	add	r3, fp
  40589a:	60a2      	str	r2, [r4, #8]
  40589c:	6023      	str	r3, [r4, #0]
  40589e:	9a01      	ldr	r2, [sp, #4]
  4058a0:	6893      	ldr	r3, [r2, #8]
  4058a2:	eba3 030a 	sub.w	r3, r3, sl
  4058a6:	44d1      	add	r9, sl
  4058a8:	eba7 070a 	sub.w	r7, r7, sl
  4058ac:	6093      	str	r3, [r2, #8]
  4058ae:	2b00      	cmp	r3, #0
  4058b0:	d0c5      	beq.n	40583e <__sfvwrite_r+0x5e>
  4058b2:	89a3      	ldrh	r3, [r4, #12]
  4058b4:	2f00      	cmp	r7, #0
  4058b6:	d1d8      	bne.n	40586a <__sfvwrite_r+0x8a>
  4058b8:	f8d5 9000 	ldr.w	r9, [r5]
  4058bc:	686f      	ldr	r7, [r5, #4]
  4058be:	3508      	adds	r5, #8
  4058c0:	e7d2      	b.n	405868 <__sfvwrite_r+0x88>
  4058c2:	f8d5 9000 	ldr.w	r9, [r5]
  4058c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4058ca:	3508      	adds	r5, #8
  4058cc:	e79f      	b.n	40580e <__sfvwrite_r+0x2e>
  4058ce:	2000      	movs	r0, #0
  4058d0:	4770      	bx	lr
  4058d2:	4621      	mov	r1, r4
  4058d4:	9800      	ldr	r0, [sp, #0]
  4058d6:	f7ff fd1f 	bl	405318 <_fflush_r>
  4058da:	b370      	cbz	r0, 40593a <__sfvwrite_r+0x15a>
  4058dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058e4:	f04f 30ff 	mov.w	r0, #4294967295
  4058e8:	81a3      	strh	r3, [r4, #12]
  4058ea:	b003      	add	sp, #12
  4058ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058f0:	4681      	mov	r9, r0
  4058f2:	4633      	mov	r3, r6
  4058f4:	464e      	mov	r6, r9
  4058f6:	46a8      	mov	r8, r5
  4058f8:	469a      	mov	sl, r3
  4058fa:	464d      	mov	r5, r9
  4058fc:	b34e      	cbz	r6, 405952 <__sfvwrite_r+0x172>
  4058fe:	b380      	cbz	r0, 405962 <__sfvwrite_r+0x182>
  405900:	6820      	ldr	r0, [r4, #0]
  405902:	6923      	ldr	r3, [r4, #16]
  405904:	6962      	ldr	r2, [r4, #20]
  405906:	45b1      	cmp	r9, r6
  405908:	46cb      	mov	fp, r9
  40590a:	bf28      	it	cs
  40590c:	46b3      	movcs	fp, r6
  40590e:	4298      	cmp	r0, r3
  405910:	465f      	mov	r7, fp
  405912:	d904      	bls.n	40591e <__sfvwrite_r+0x13e>
  405914:	68a3      	ldr	r3, [r4, #8]
  405916:	4413      	add	r3, r2
  405918:	459b      	cmp	fp, r3
  40591a:	f300 80a6 	bgt.w	405a6a <__sfvwrite_r+0x28a>
  40591e:	4593      	cmp	fp, r2
  405920:	db4b      	blt.n	4059ba <__sfvwrite_r+0x1da>
  405922:	4613      	mov	r3, r2
  405924:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405926:	69e1      	ldr	r1, [r4, #28]
  405928:	9800      	ldr	r0, [sp, #0]
  40592a:	462a      	mov	r2, r5
  40592c:	47b8      	blx	r7
  40592e:	1e07      	subs	r7, r0, #0
  405930:	ddd4      	ble.n	4058dc <__sfvwrite_r+0xfc>
  405932:	ebb9 0907 	subs.w	r9, r9, r7
  405936:	d0cc      	beq.n	4058d2 <__sfvwrite_r+0xf2>
  405938:	2001      	movs	r0, #1
  40593a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40593e:	1bdb      	subs	r3, r3, r7
  405940:	443d      	add	r5, r7
  405942:	1bf6      	subs	r6, r6, r7
  405944:	f8ca 3008 	str.w	r3, [sl, #8]
  405948:	2b00      	cmp	r3, #0
  40594a:	f43f af78 	beq.w	40583e <__sfvwrite_r+0x5e>
  40594e:	2e00      	cmp	r6, #0
  405950:	d1d5      	bne.n	4058fe <__sfvwrite_r+0x11e>
  405952:	f108 0308 	add.w	r3, r8, #8
  405956:	e913 0060 	ldmdb	r3, {r5, r6}
  40595a:	4698      	mov	r8, r3
  40595c:	3308      	adds	r3, #8
  40595e:	2e00      	cmp	r6, #0
  405960:	d0f9      	beq.n	405956 <__sfvwrite_r+0x176>
  405962:	4632      	mov	r2, r6
  405964:	210a      	movs	r1, #10
  405966:	4628      	mov	r0, r5
  405968:	f000 f982 	bl	405c70 <memchr>
  40596c:	2800      	cmp	r0, #0
  40596e:	f000 80a1 	beq.w	405ab4 <__sfvwrite_r+0x2d4>
  405972:	3001      	adds	r0, #1
  405974:	eba0 0905 	sub.w	r9, r0, r5
  405978:	e7c2      	b.n	405900 <__sfvwrite_r+0x120>
  40597a:	6820      	ldr	r0, [r4, #0]
  40597c:	6923      	ldr	r3, [r4, #16]
  40597e:	4298      	cmp	r0, r3
  405980:	d802      	bhi.n	405988 <__sfvwrite_r+0x1a8>
  405982:	6963      	ldr	r3, [r4, #20]
  405984:	429f      	cmp	r7, r3
  405986:	d25d      	bcs.n	405a44 <__sfvwrite_r+0x264>
  405988:	45b8      	cmp	r8, r7
  40598a:	bf28      	it	cs
  40598c:	46b8      	movcs	r8, r7
  40598e:	4642      	mov	r2, r8
  405990:	4649      	mov	r1, r9
  405992:	f000 f9bd 	bl	405d10 <memmove>
  405996:	68a3      	ldr	r3, [r4, #8]
  405998:	6822      	ldr	r2, [r4, #0]
  40599a:	eba3 0308 	sub.w	r3, r3, r8
  40599e:	4442      	add	r2, r8
  4059a0:	60a3      	str	r3, [r4, #8]
  4059a2:	6022      	str	r2, [r4, #0]
  4059a4:	b10b      	cbz	r3, 4059aa <__sfvwrite_r+0x1ca>
  4059a6:	46c2      	mov	sl, r8
  4059a8:	e779      	b.n	40589e <__sfvwrite_r+0xbe>
  4059aa:	4621      	mov	r1, r4
  4059ac:	9800      	ldr	r0, [sp, #0]
  4059ae:	f7ff fcb3 	bl	405318 <_fflush_r>
  4059b2:	2800      	cmp	r0, #0
  4059b4:	d192      	bne.n	4058dc <__sfvwrite_r+0xfc>
  4059b6:	46c2      	mov	sl, r8
  4059b8:	e771      	b.n	40589e <__sfvwrite_r+0xbe>
  4059ba:	465a      	mov	r2, fp
  4059bc:	4629      	mov	r1, r5
  4059be:	f000 f9a7 	bl	405d10 <memmove>
  4059c2:	68a2      	ldr	r2, [r4, #8]
  4059c4:	6823      	ldr	r3, [r4, #0]
  4059c6:	eba2 020b 	sub.w	r2, r2, fp
  4059ca:	445b      	add	r3, fp
  4059cc:	60a2      	str	r2, [r4, #8]
  4059ce:	6023      	str	r3, [r4, #0]
  4059d0:	e7af      	b.n	405932 <__sfvwrite_r+0x152>
  4059d2:	6820      	ldr	r0, [r4, #0]
  4059d4:	46b8      	mov	r8, r7
  4059d6:	46ba      	mov	sl, r7
  4059d8:	46bb      	mov	fp, r7
  4059da:	e755      	b.n	405888 <__sfvwrite_r+0xa8>
  4059dc:	6962      	ldr	r2, [r4, #20]
  4059de:	6820      	ldr	r0, [r4, #0]
  4059e0:	6921      	ldr	r1, [r4, #16]
  4059e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4059e6:	eba0 0a01 	sub.w	sl, r0, r1
  4059ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4059ee:	f10a 0001 	add.w	r0, sl, #1
  4059f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4059f6:	4438      	add	r0, r7
  4059f8:	4540      	cmp	r0, r8
  4059fa:	4642      	mov	r2, r8
  4059fc:	bf84      	itt	hi
  4059fe:	4680      	movhi	r8, r0
  405a00:	4642      	movhi	r2, r8
  405a02:	055b      	lsls	r3, r3, #21
  405a04:	d544      	bpl.n	405a90 <__sfvwrite_r+0x2b0>
  405a06:	4611      	mov	r1, r2
  405a08:	9800      	ldr	r0, [sp, #0]
  405a0a:	f7fd ff99 	bl	403940 <_malloc_r>
  405a0e:	4683      	mov	fp, r0
  405a10:	2800      	cmp	r0, #0
  405a12:	d055      	beq.n	405ac0 <__sfvwrite_r+0x2e0>
  405a14:	4652      	mov	r2, sl
  405a16:	6921      	ldr	r1, [r4, #16]
  405a18:	f7fe fa42 	bl	403ea0 <memcpy>
  405a1c:	89a3      	ldrh	r3, [r4, #12]
  405a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405a26:	81a3      	strh	r3, [r4, #12]
  405a28:	eb0b 000a 	add.w	r0, fp, sl
  405a2c:	eba8 030a 	sub.w	r3, r8, sl
  405a30:	f8c4 b010 	str.w	fp, [r4, #16]
  405a34:	f8c4 8014 	str.w	r8, [r4, #20]
  405a38:	6020      	str	r0, [r4, #0]
  405a3a:	60a3      	str	r3, [r4, #8]
  405a3c:	46b8      	mov	r8, r7
  405a3e:	46ba      	mov	sl, r7
  405a40:	46bb      	mov	fp, r7
  405a42:	e721      	b.n	405888 <__sfvwrite_r+0xa8>
  405a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405a48:	42b9      	cmp	r1, r7
  405a4a:	bf28      	it	cs
  405a4c:	4639      	movcs	r1, r7
  405a4e:	464a      	mov	r2, r9
  405a50:	fb91 f1f3 	sdiv	r1, r1, r3
  405a54:	9800      	ldr	r0, [sp, #0]
  405a56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405a58:	fb03 f301 	mul.w	r3, r3, r1
  405a5c:	69e1      	ldr	r1, [r4, #28]
  405a5e:	47b0      	blx	r6
  405a60:	f1b0 0a00 	subs.w	sl, r0, #0
  405a64:	f73f af1b 	bgt.w	40589e <__sfvwrite_r+0xbe>
  405a68:	e738      	b.n	4058dc <__sfvwrite_r+0xfc>
  405a6a:	461a      	mov	r2, r3
  405a6c:	4629      	mov	r1, r5
  405a6e:	9301      	str	r3, [sp, #4]
  405a70:	f000 f94e 	bl	405d10 <memmove>
  405a74:	6822      	ldr	r2, [r4, #0]
  405a76:	9b01      	ldr	r3, [sp, #4]
  405a78:	9800      	ldr	r0, [sp, #0]
  405a7a:	441a      	add	r2, r3
  405a7c:	6022      	str	r2, [r4, #0]
  405a7e:	4621      	mov	r1, r4
  405a80:	f7ff fc4a 	bl	405318 <_fflush_r>
  405a84:	9b01      	ldr	r3, [sp, #4]
  405a86:	2800      	cmp	r0, #0
  405a88:	f47f af28 	bne.w	4058dc <__sfvwrite_r+0xfc>
  405a8c:	461f      	mov	r7, r3
  405a8e:	e750      	b.n	405932 <__sfvwrite_r+0x152>
  405a90:	9800      	ldr	r0, [sp, #0]
  405a92:	f000 f9a1 	bl	405dd8 <_realloc_r>
  405a96:	4683      	mov	fp, r0
  405a98:	2800      	cmp	r0, #0
  405a9a:	d1c5      	bne.n	405a28 <__sfvwrite_r+0x248>
  405a9c:	9d00      	ldr	r5, [sp, #0]
  405a9e:	6921      	ldr	r1, [r4, #16]
  405aa0:	4628      	mov	r0, r5
  405aa2:	f7ff fdb7 	bl	405614 <_free_r>
  405aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aaa:	220c      	movs	r2, #12
  405aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405ab0:	602a      	str	r2, [r5, #0]
  405ab2:	e715      	b.n	4058e0 <__sfvwrite_r+0x100>
  405ab4:	f106 0901 	add.w	r9, r6, #1
  405ab8:	e722      	b.n	405900 <__sfvwrite_r+0x120>
  405aba:	f04f 30ff 	mov.w	r0, #4294967295
  405abe:	e6bf      	b.n	405840 <__sfvwrite_r+0x60>
  405ac0:	9a00      	ldr	r2, [sp, #0]
  405ac2:	230c      	movs	r3, #12
  405ac4:	6013      	str	r3, [r2, #0]
  405ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aca:	e709      	b.n	4058e0 <__sfvwrite_r+0x100>
  405acc:	7ffffc00 	.word	0x7ffffc00

00405ad0 <_fwalk_reent>:
  405ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405ad4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405ad8:	d01f      	beq.n	405b1a <_fwalk_reent+0x4a>
  405ada:	4688      	mov	r8, r1
  405adc:	4606      	mov	r6, r0
  405ade:	f04f 0900 	mov.w	r9, #0
  405ae2:	687d      	ldr	r5, [r7, #4]
  405ae4:	68bc      	ldr	r4, [r7, #8]
  405ae6:	3d01      	subs	r5, #1
  405ae8:	d411      	bmi.n	405b0e <_fwalk_reent+0x3e>
  405aea:	89a3      	ldrh	r3, [r4, #12]
  405aec:	2b01      	cmp	r3, #1
  405aee:	f105 35ff 	add.w	r5, r5, #4294967295
  405af2:	d908      	bls.n	405b06 <_fwalk_reent+0x36>
  405af4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405af8:	3301      	adds	r3, #1
  405afa:	4621      	mov	r1, r4
  405afc:	4630      	mov	r0, r6
  405afe:	d002      	beq.n	405b06 <_fwalk_reent+0x36>
  405b00:	47c0      	blx	r8
  405b02:	ea49 0900 	orr.w	r9, r9, r0
  405b06:	1c6b      	adds	r3, r5, #1
  405b08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405b0c:	d1ed      	bne.n	405aea <_fwalk_reent+0x1a>
  405b0e:	683f      	ldr	r7, [r7, #0]
  405b10:	2f00      	cmp	r7, #0
  405b12:	d1e6      	bne.n	405ae2 <_fwalk_reent+0x12>
  405b14:	4648      	mov	r0, r9
  405b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405b1a:	46b9      	mov	r9, r7
  405b1c:	4648      	mov	r0, r9
  405b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405b22:	bf00      	nop

00405b24 <__locale_mb_cur_max>:
  405b24:	4b04      	ldr	r3, [pc, #16]	; (405b38 <__locale_mb_cur_max+0x14>)
  405b26:	4a05      	ldr	r2, [pc, #20]	; (405b3c <__locale_mb_cur_max+0x18>)
  405b28:	681b      	ldr	r3, [r3, #0]
  405b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405b2c:	2b00      	cmp	r3, #0
  405b2e:	bf08      	it	eq
  405b30:	4613      	moveq	r3, r2
  405b32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405b36:	4770      	bx	lr
  405b38:	20400018 	.word	0x20400018
  405b3c:	2040085c 	.word	0x2040085c

00405b40 <__retarget_lock_init_recursive>:
  405b40:	4770      	bx	lr
  405b42:	bf00      	nop

00405b44 <__retarget_lock_close_recursive>:
  405b44:	4770      	bx	lr
  405b46:	bf00      	nop

00405b48 <__retarget_lock_acquire_recursive>:
  405b48:	4770      	bx	lr
  405b4a:	bf00      	nop

00405b4c <__retarget_lock_release_recursive>:
  405b4c:	4770      	bx	lr
  405b4e:	bf00      	nop

00405b50 <__swhatbuf_r>:
  405b50:	b570      	push	{r4, r5, r6, lr}
  405b52:	460c      	mov	r4, r1
  405b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b58:	2900      	cmp	r1, #0
  405b5a:	b090      	sub	sp, #64	; 0x40
  405b5c:	4615      	mov	r5, r2
  405b5e:	461e      	mov	r6, r3
  405b60:	db14      	blt.n	405b8c <__swhatbuf_r+0x3c>
  405b62:	aa01      	add	r2, sp, #4
  405b64:	f000 fc9e 	bl	4064a4 <_fstat_r>
  405b68:	2800      	cmp	r0, #0
  405b6a:	db0f      	blt.n	405b8c <__swhatbuf_r+0x3c>
  405b6c:	9a02      	ldr	r2, [sp, #8]
  405b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405b72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405b76:	fab2 f282 	clz	r2, r2
  405b7a:	0952      	lsrs	r2, r2, #5
  405b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405b80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405b84:	6032      	str	r2, [r6, #0]
  405b86:	602b      	str	r3, [r5, #0]
  405b88:	b010      	add	sp, #64	; 0x40
  405b8a:	bd70      	pop	{r4, r5, r6, pc}
  405b8c:	89a2      	ldrh	r2, [r4, #12]
  405b8e:	2300      	movs	r3, #0
  405b90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405b94:	6033      	str	r3, [r6, #0]
  405b96:	d004      	beq.n	405ba2 <__swhatbuf_r+0x52>
  405b98:	2240      	movs	r2, #64	; 0x40
  405b9a:	4618      	mov	r0, r3
  405b9c:	602a      	str	r2, [r5, #0]
  405b9e:	b010      	add	sp, #64	; 0x40
  405ba0:	bd70      	pop	{r4, r5, r6, pc}
  405ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ba6:	602b      	str	r3, [r5, #0]
  405ba8:	b010      	add	sp, #64	; 0x40
  405baa:	bd70      	pop	{r4, r5, r6, pc}

00405bac <__smakebuf_r>:
  405bac:	898a      	ldrh	r2, [r1, #12]
  405bae:	0792      	lsls	r2, r2, #30
  405bb0:	460b      	mov	r3, r1
  405bb2:	d506      	bpl.n	405bc2 <__smakebuf_r+0x16>
  405bb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405bb8:	2101      	movs	r1, #1
  405bba:	601a      	str	r2, [r3, #0]
  405bbc:	611a      	str	r2, [r3, #16]
  405bbe:	6159      	str	r1, [r3, #20]
  405bc0:	4770      	bx	lr
  405bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405bc4:	b083      	sub	sp, #12
  405bc6:	ab01      	add	r3, sp, #4
  405bc8:	466a      	mov	r2, sp
  405bca:	460c      	mov	r4, r1
  405bcc:	4606      	mov	r6, r0
  405bce:	f7ff ffbf 	bl	405b50 <__swhatbuf_r>
  405bd2:	9900      	ldr	r1, [sp, #0]
  405bd4:	4605      	mov	r5, r0
  405bd6:	4630      	mov	r0, r6
  405bd8:	f7fd feb2 	bl	403940 <_malloc_r>
  405bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405be0:	b1d8      	cbz	r0, 405c1a <__smakebuf_r+0x6e>
  405be2:	9a01      	ldr	r2, [sp, #4]
  405be4:	4f15      	ldr	r7, [pc, #84]	; (405c3c <__smakebuf_r+0x90>)
  405be6:	9900      	ldr	r1, [sp, #0]
  405be8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405bee:	81a3      	strh	r3, [r4, #12]
  405bf0:	6020      	str	r0, [r4, #0]
  405bf2:	6120      	str	r0, [r4, #16]
  405bf4:	6161      	str	r1, [r4, #20]
  405bf6:	b91a      	cbnz	r2, 405c00 <__smakebuf_r+0x54>
  405bf8:	432b      	orrs	r3, r5
  405bfa:	81a3      	strh	r3, [r4, #12]
  405bfc:	b003      	add	sp, #12
  405bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c00:	4630      	mov	r0, r6
  405c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405c06:	f000 fc61 	bl	4064cc <_isatty_r>
  405c0a:	b1a0      	cbz	r0, 405c36 <__smakebuf_r+0x8a>
  405c0c:	89a3      	ldrh	r3, [r4, #12]
  405c0e:	f023 0303 	bic.w	r3, r3, #3
  405c12:	f043 0301 	orr.w	r3, r3, #1
  405c16:	b21b      	sxth	r3, r3
  405c18:	e7ee      	b.n	405bf8 <__smakebuf_r+0x4c>
  405c1a:	059a      	lsls	r2, r3, #22
  405c1c:	d4ee      	bmi.n	405bfc <__smakebuf_r+0x50>
  405c1e:	f023 0303 	bic.w	r3, r3, #3
  405c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405c26:	f043 0302 	orr.w	r3, r3, #2
  405c2a:	2101      	movs	r1, #1
  405c2c:	81a3      	strh	r3, [r4, #12]
  405c2e:	6022      	str	r2, [r4, #0]
  405c30:	6122      	str	r2, [r4, #16]
  405c32:	6161      	str	r1, [r4, #20]
  405c34:	e7e2      	b.n	405bfc <__smakebuf_r+0x50>
  405c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c3a:	e7dd      	b.n	405bf8 <__smakebuf_r+0x4c>
  405c3c:	0040536d 	.word	0x0040536d

00405c40 <__ascii_mbtowc>:
  405c40:	b082      	sub	sp, #8
  405c42:	b149      	cbz	r1, 405c58 <__ascii_mbtowc+0x18>
  405c44:	b15a      	cbz	r2, 405c5e <__ascii_mbtowc+0x1e>
  405c46:	b16b      	cbz	r3, 405c64 <__ascii_mbtowc+0x24>
  405c48:	7813      	ldrb	r3, [r2, #0]
  405c4a:	600b      	str	r3, [r1, #0]
  405c4c:	7812      	ldrb	r2, [r2, #0]
  405c4e:	1c10      	adds	r0, r2, #0
  405c50:	bf18      	it	ne
  405c52:	2001      	movne	r0, #1
  405c54:	b002      	add	sp, #8
  405c56:	4770      	bx	lr
  405c58:	a901      	add	r1, sp, #4
  405c5a:	2a00      	cmp	r2, #0
  405c5c:	d1f3      	bne.n	405c46 <__ascii_mbtowc+0x6>
  405c5e:	4610      	mov	r0, r2
  405c60:	b002      	add	sp, #8
  405c62:	4770      	bx	lr
  405c64:	f06f 0001 	mvn.w	r0, #1
  405c68:	e7f4      	b.n	405c54 <__ascii_mbtowc+0x14>
  405c6a:	bf00      	nop
  405c6c:	0000      	movs	r0, r0
	...

00405c70 <memchr>:
  405c70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405c74:	2a10      	cmp	r2, #16
  405c76:	db2b      	blt.n	405cd0 <memchr+0x60>
  405c78:	f010 0f07 	tst.w	r0, #7
  405c7c:	d008      	beq.n	405c90 <memchr+0x20>
  405c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405c82:	3a01      	subs	r2, #1
  405c84:	428b      	cmp	r3, r1
  405c86:	d02d      	beq.n	405ce4 <memchr+0x74>
  405c88:	f010 0f07 	tst.w	r0, #7
  405c8c:	b342      	cbz	r2, 405ce0 <memchr+0x70>
  405c8e:	d1f6      	bne.n	405c7e <memchr+0xe>
  405c90:	b4f0      	push	{r4, r5, r6, r7}
  405c92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405c96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405c9a:	f022 0407 	bic.w	r4, r2, #7
  405c9e:	f07f 0700 	mvns.w	r7, #0
  405ca2:	2300      	movs	r3, #0
  405ca4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ca8:	3c08      	subs	r4, #8
  405caa:	ea85 0501 	eor.w	r5, r5, r1
  405cae:	ea86 0601 	eor.w	r6, r6, r1
  405cb2:	fa85 f547 	uadd8	r5, r5, r7
  405cb6:	faa3 f587 	sel	r5, r3, r7
  405cba:	fa86 f647 	uadd8	r6, r6, r7
  405cbe:	faa5 f687 	sel	r6, r5, r7
  405cc2:	b98e      	cbnz	r6, 405ce8 <memchr+0x78>
  405cc4:	d1ee      	bne.n	405ca4 <memchr+0x34>
  405cc6:	bcf0      	pop	{r4, r5, r6, r7}
  405cc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ccc:	f002 0207 	and.w	r2, r2, #7
  405cd0:	b132      	cbz	r2, 405ce0 <memchr+0x70>
  405cd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405cd6:	3a01      	subs	r2, #1
  405cd8:	ea83 0301 	eor.w	r3, r3, r1
  405cdc:	b113      	cbz	r3, 405ce4 <memchr+0x74>
  405cde:	d1f8      	bne.n	405cd2 <memchr+0x62>
  405ce0:	2000      	movs	r0, #0
  405ce2:	4770      	bx	lr
  405ce4:	3801      	subs	r0, #1
  405ce6:	4770      	bx	lr
  405ce8:	2d00      	cmp	r5, #0
  405cea:	bf06      	itte	eq
  405cec:	4635      	moveq	r5, r6
  405cee:	3803      	subeq	r0, #3
  405cf0:	3807      	subne	r0, #7
  405cf2:	f015 0f01 	tst.w	r5, #1
  405cf6:	d107      	bne.n	405d08 <memchr+0x98>
  405cf8:	3001      	adds	r0, #1
  405cfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  405cfe:	bf02      	ittt	eq
  405d00:	3001      	addeq	r0, #1
  405d02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405d06:	3001      	addeq	r0, #1
  405d08:	bcf0      	pop	{r4, r5, r6, r7}
  405d0a:	3801      	subs	r0, #1
  405d0c:	4770      	bx	lr
  405d0e:	bf00      	nop

00405d10 <memmove>:
  405d10:	4288      	cmp	r0, r1
  405d12:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d14:	d90d      	bls.n	405d32 <memmove+0x22>
  405d16:	188b      	adds	r3, r1, r2
  405d18:	4298      	cmp	r0, r3
  405d1a:	d20a      	bcs.n	405d32 <memmove+0x22>
  405d1c:	1884      	adds	r4, r0, r2
  405d1e:	2a00      	cmp	r2, #0
  405d20:	d051      	beq.n	405dc6 <memmove+0xb6>
  405d22:	4622      	mov	r2, r4
  405d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405d28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405d2c:	4299      	cmp	r1, r3
  405d2e:	d1f9      	bne.n	405d24 <memmove+0x14>
  405d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d32:	2a0f      	cmp	r2, #15
  405d34:	d948      	bls.n	405dc8 <memmove+0xb8>
  405d36:	ea41 0300 	orr.w	r3, r1, r0
  405d3a:	079b      	lsls	r3, r3, #30
  405d3c:	d146      	bne.n	405dcc <memmove+0xbc>
  405d3e:	f100 0410 	add.w	r4, r0, #16
  405d42:	f101 0310 	add.w	r3, r1, #16
  405d46:	4615      	mov	r5, r2
  405d48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405d4c:	f844 6c10 	str.w	r6, [r4, #-16]
  405d50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405d54:	f844 6c0c 	str.w	r6, [r4, #-12]
  405d58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405d5c:	f844 6c08 	str.w	r6, [r4, #-8]
  405d60:	3d10      	subs	r5, #16
  405d62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405d66:	f844 6c04 	str.w	r6, [r4, #-4]
  405d6a:	2d0f      	cmp	r5, #15
  405d6c:	f103 0310 	add.w	r3, r3, #16
  405d70:	f104 0410 	add.w	r4, r4, #16
  405d74:	d8e8      	bhi.n	405d48 <memmove+0x38>
  405d76:	f1a2 0310 	sub.w	r3, r2, #16
  405d7a:	f023 030f 	bic.w	r3, r3, #15
  405d7e:	f002 0e0f 	and.w	lr, r2, #15
  405d82:	3310      	adds	r3, #16
  405d84:	f1be 0f03 	cmp.w	lr, #3
  405d88:	4419      	add	r1, r3
  405d8a:	4403      	add	r3, r0
  405d8c:	d921      	bls.n	405dd2 <memmove+0xc2>
  405d8e:	1f1e      	subs	r6, r3, #4
  405d90:	460d      	mov	r5, r1
  405d92:	4674      	mov	r4, lr
  405d94:	3c04      	subs	r4, #4
  405d96:	f855 7b04 	ldr.w	r7, [r5], #4
  405d9a:	f846 7f04 	str.w	r7, [r6, #4]!
  405d9e:	2c03      	cmp	r4, #3
  405da0:	d8f8      	bhi.n	405d94 <memmove+0x84>
  405da2:	f1ae 0404 	sub.w	r4, lr, #4
  405da6:	f024 0403 	bic.w	r4, r4, #3
  405daa:	3404      	adds	r4, #4
  405dac:	4421      	add	r1, r4
  405dae:	4423      	add	r3, r4
  405db0:	f002 0203 	and.w	r2, r2, #3
  405db4:	b162      	cbz	r2, 405dd0 <memmove+0xc0>
  405db6:	3b01      	subs	r3, #1
  405db8:	440a      	add	r2, r1
  405dba:	f811 4b01 	ldrb.w	r4, [r1], #1
  405dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405dc2:	428a      	cmp	r2, r1
  405dc4:	d1f9      	bne.n	405dba <memmove+0xaa>
  405dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405dc8:	4603      	mov	r3, r0
  405dca:	e7f3      	b.n	405db4 <memmove+0xa4>
  405dcc:	4603      	mov	r3, r0
  405dce:	e7f2      	b.n	405db6 <memmove+0xa6>
  405dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405dd2:	4672      	mov	r2, lr
  405dd4:	e7ee      	b.n	405db4 <memmove+0xa4>
  405dd6:	bf00      	nop

00405dd8 <_realloc_r>:
  405dd8:	2900      	cmp	r1, #0
  405dda:	f000 8095 	beq.w	405f08 <_realloc_r+0x130>
  405dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405de2:	460d      	mov	r5, r1
  405de4:	4616      	mov	r6, r2
  405de6:	b083      	sub	sp, #12
  405de8:	4680      	mov	r8, r0
  405dea:	f106 070b 	add.w	r7, r6, #11
  405dee:	f7fe f93f 	bl	404070 <__malloc_lock>
  405df2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405df6:	2f16      	cmp	r7, #22
  405df8:	f02e 0403 	bic.w	r4, lr, #3
  405dfc:	f1a5 0908 	sub.w	r9, r5, #8
  405e00:	d83c      	bhi.n	405e7c <_realloc_r+0xa4>
  405e02:	2210      	movs	r2, #16
  405e04:	4617      	mov	r7, r2
  405e06:	42be      	cmp	r6, r7
  405e08:	d83d      	bhi.n	405e86 <_realloc_r+0xae>
  405e0a:	4294      	cmp	r4, r2
  405e0c:	da43      	bge.n	405e96 <_realloc_r+0xbe>
  405e0e:	4bc4      	ldr	r3, [pc, #784]	; (406120 <_realloc_r+0x348>)
  405e10:	6899      	ldr	r1, [r3, #8]
  405e12:	eb09 0004 	add.w	r0, r9, r4
  405e16:	4288      	cmp	r0, r1
  405e18:	f000 80b4 	beq.w	405f84 <_realloc_r+0x1ac>
  405e1c:	6843      	ldr	r3, [r0, #4]
  405e1e:	f023 0101 	bic.w	r1, r3, #1
  405e22:	4401      	add	r1, r0
  405e24:	6849      	ldr	r1, [r1, #4]
  405e26:	07c9      	lsls	r1, r1, #31
  405e28:	d54c      	bpl.n	405ec4 <_realloc_r+0xec>
  405e2a:	f01e 0f01 	tst.w	lr, #1
  405e2e:	f000 809b 	beq.w	405f68 <_realloc_r+0x190>
  405e32:	4631      	mov	r1, r6
  405e34:	4640      	mov	r0, r8
  405e36:	f7fd fd83 	bl	403940 <_malloc_r>
  405e3a:	4606      	mov	r6, r0
  405e3c:	2800      	cmp	r0, #0
  405e3e:	d03a      	beq.n	405eb6 <_realloc_r+0xde>
  405e40:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405e44:	f023 0301 	bic.w	r3, r3, #1
  405e48:	444b      	add	r3, r9
  405e4a:	f1a0 0208 	sub.w	r2, r0, #8
  405e4e:	429a      	cmp	r2, r3
  405e50:	f000 8121 	beq.w	406096 <_realloc_r+0x2be>
  405e54:	1f22      	subs	r2, r4, #4
  405e56:	2a24      	cmp	r2, #36	; 0x24
  405e58:	f200 8107 	bhi.w	40606a <_realloc_r+0x292>
  405e5c:	2a13      	cmp	r2, #19
  405e5e:	f200 80db 	bhi.w	406018 <_realloc_r+0x240>
  405e62:	4603      	mov	r3, r0
  405e64:	462a      	mov	r2, r5
  405e66:	6811      	ldr	r1, [r2, #0]
  405e68:	6019      	str	r1, [r3, #0]
  405e6a:	6851      	ldr	r1, [r2, #4]
  405e6c:	6059      	str	r1, [r3, #4]
  405e6e:	6892      	ldr	r2, [r2, #8]
  405e70:	609a      	str	r2, [r3, #8]
  405e72:	4629      	mov	r1, r5
  405e74:	4640      	mov	r0, r8
  405e76:	f7ff fbcd 	bl	405614 <_free_r>
  405e7a:	e01c      	b.n	405eb6 <_realloc_r+0xde>
  405e7c:	f027 0707 	bic.w	r7, r7, #7
  405e80:	2f00      	cmp	r7, #0
  405e82:	463a      	mov	r2, r7
  405e84:	dabf      	bge.n	405e06 <_realloc_r+0x2e>
  405e86:	2600      	movs	r6, #0
  405e88:	230c      	movs	r3, #12
  405e8a:	4630      	mov	r0, r6
  405e8c:	f8c8 3000 	str.w	r3, [r8]
  405e90:	b003      	add	sp, #12
  405e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e96:	462e      	mov	r6, r5
  405e98:	1be3      	subs	r3, r4, r7
  405e9a:	2b0f      	cmp	r3, #15
  405e9c:	d81e      	bhi.n	405edc <_realloc_r+0x104>
  405e9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405ea2:	f003 0301 	and.w	r3, r3, #1
  405ea6:	4323      	orrs	r3, r4
  405ea8:	444c      	add	r4, r9
  405eaa:	f8c9 3004 	str.w	r3, [r9, #4]
  405eae:	6863      	ldr	r3, [r4, #4]
  405eb0:	f043 0301 	orr.w	r3, r3, #1
  405eb4:	6063      	str	r3, [r4, #4]
  405eb6:	4640      	mov	r0, r8
  405eb8:	f7fe f8e0 	bl	40407c <__malloc_unlock>
  405ebc:	4630      	mov	r0, r6
  405ebe:	b003      	add	sp, #12
  405ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ec4:	f023 0303 	bic.w	r3, r3, #3
  405ec8:	18e1      	adds	r1, r4, r3
  405eca:	4291      	cmp	r1, r2
  405ecc:	db1f      	blt.n	405f0e <_realloc_r+0x136>
  405ece:	68c3      	ldr	r3, [r0, #12]
  405ed0:	6882      	ldr	r2, [r0, #8]
  405ed2:	462e      	mov	r6, r5
  405ed4:	60d3      	str	r3, [r2, #12]
  405ed6:	460c      	mov	r4, r1
  405ed8:	609a      	str	r2, [r3, #8]
  405eda:	e7dd      	b.n	405e98 <_realloc_r+0xc0>
  405edc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405ee0:	eb09 0107 	add.w	r1, r9, r7
  405ee4:	f002 0201 	and.w	r2, r2, #1
  405ee8:	444c      	add	r4, r9
  405eea:	f043 0301 	orr.w	r3, r3, #1
  405eee:	4317      	orrs	r7, r2
  405ef0:	f8c9 7004 	str.w	r7, [r9, #4]
  405ef4:	604b      	str	r3, [r1, #4]
  405ef6:	6863      	ldr	r3, [r4, #4]
  405ef8:	f043 0301 	orr.w	r3, r3, #1
  405efc:	3108      	adds	r1, #8
  405efe:	6063      	str	r3, [r4, #4]
  405f00:	4640      	mov	r0, r8
  405f02:	f7ff fb87 	bl	405614 <_free_r>
  405f06:	e7d6      	b.n	405eb6 <_realloc_r+0xde>
  405f08:	4611      	mov	r1, r2
  405f0a:	f7fd bd19 	b.w	403940 <_malloc_r>
  405f0e:	f01e 0f01 	tst.w	lr, #1
  405f12:	d18e      	bne.n	405e32 <_realloc_r+0x5a>
  405f14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405f18:	eba9 0a01 	sub.w	sl, r9, r1
  405f1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f20:	f021 0103 	bic.w	r1, r1, #3
  405f24:	440b      	add	r3, r1
  405f26:	4423      	add	r3, r4
  405f28:	4293      	cmp	r3, r2
  405f2a:	db25      	blt.n	405f78 <_realloc_r+0x1a0>
  405f2c:	68c2      	ldr	r2, [r0, #12]
  405f2e:	6881      	ldr	r1, [r0, #8]
  405f30:	4656      	mov	r6, sl
  405f32:	60ca      	str	r2, [r1, #12]
  405f34:	6091      	str	r1, [r2, #8]
  405f36:	f8da 100c 	ldr.w	r1, [sl, #12]
  405f3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405f3e:	1f22      	subs	r2, r4, #4
  405f40:	2a24      	cmp	r2, #36	; 0x24
  405f42:	60c1      	str	r1, [r0, #12]
  405f44:	6088      	str	r0, [r1, #8]
  405f46:	f200 8094 	bhi.w	406072 <_realloc_r+0x29a>
  405f4a:	2a13      	cmp	r2, #19
  405f4c:	d96f      	bls.n	40602e <_realloc_r+0x256>
  405f4e:	6829      	ldr	r1, [r5, #0]
  405f50:	f8ca 1008 	str.w	r1, [sl, #8]
  405f54:	6869      	ldr	r1, [r5, #4]
  405f56:	f8ca 100c 	str.w	r1, [sl, #12]
  405f5a:	2a1b      	cmp	r2, #27
  405f5c:	f200 80a2 	bhi.w	4060a4 <_realloc_r+0x2cc>
  405f60:	3508      	adds	r5, #8
  405f62:	f10a 0210 	add.w	r2, sl, #16
  405f66:	e063      	b.n	406030 <_realloc_r+0x258>
  405f68:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405f6c:	eba9 0a03 	sub.w	sl, r9, r3
  405f70:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f74:	f021 0103 	bic.w	r1, r1, #3
  405f78:	1863      	adds	r3, r4, r1
  405f7a:	4293      	cmp	r3, r2
  405f7c:	f6ff af59 	blt.w	405e32 <_realloc_r+0x5a>
  405f80:	4656      	mov	r6, sl
  405f82:	e7d8      	b.n	405f36 <_realloc_r+0x15e>
  405f84:	6841      	ldr	r1, [r0, #4]
  405f86:	f021 0b03 	bic.w	fp, r1, #3
  405f8a:	44a3      	add	fp, r4
  405f8c:	f107 0010 	add.w	r0, r7, #16
  405f90:	4583      	cmp	fp, r0
  405f92:	da56      	bge.n	406042 <_realloc_r+0x26a>
  405f94:	f01e 0f01 	tst.w	lr, #1
  405f98:	f47f af4b 	bne.w	405e32 <_realloc_r+0x5a>
  405f9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405fa0:	eba9 0a01 	sub.w	sl, r9, r1
  405fa4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405fa8:	f021 0103 	bic.w	r1, r1, #3
  405fac:	448b      	add	fp, r1
  405fae:	4558      	cmp	r0, fp
  405fb0:	dce2      	bgt.n	405f78 <_realloc_r+0x1a0>
  405fb2:	4656      	mov	r6, sl
  405fb4:	f8da 100c 	ldr.w	r1, [sl, #12]
  405fb8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405fbc:	1f22      	subs	r2, r4, #4
  405fbe:	2a24      	cmp	r2, #36	; 0x24
  405fc0:	60c1      	str	r1, [r0, #12]
  405fc2:	6088      	str	r0, [r1, #8]
  405fc4:	f200 808f 	bhi.w	4060e6 <_realloc_r+0x30e>
  405fc8:	2a13      	cmp	r2, #19
  405fca:	f240 808a 	bls.w	4060e2 <_realloc_r+0x30a>
  405fce:	6829      	ldr	r1, [r5, #0]
  405fd0:	f8ca 1008 	str.w	r1, [sl, #8]
  405fd4:	6869      	ldr	r1, [r5, #4]
  405fd6:	f8ca 100c 	str.w	r1, [sl, #12]
  405fda:	2a1b      	cmp	r2, #27
  405fdc:	f200 808a 	bhi.w	4060f4 <_realloc_r+0x31c>
  405fe0:	3508      	adds	r5, #8
  405fe2:	f10a 0210 	add.w	r2, sl, #16
  405fe6:	6829      	ldr	r1, [r5, #0]
  405fe8:	6011      	str	r1, [r2, #0]
  405fea:	6869      	ldr	r1, [r5, #4]
  405fec:	6051      	str	r1, [r2, #4]
  405fee:	68a9      	ldr	r1, [r5, #8]
  405ff0:	6091      	str	r1, [r2, #8]
  405ff2:	eb0a 0107 	add.w	r1, sl, r7
  405ff6:	ebab 0207 	sub.w	r2, fp, r7
  405ffa:	f042 0201 	orr.w	r2, r2, #1
  405ffe:	6099      	str	r1, [r3, #8]
  406000:	604a      	str	r2, [r1, #4]
  406002:	f8da 3004 	ldr.w	r3, [sl, #4]
  406006:	f003 0301 	and.w	r3, r3, #1
  40600a:	431f      	orrs	r7, r3
  40600c:	4640      	mov	r0, r8
  40600e:	f8ca 7004 	str.w	r7, [sl, #4]
  406012:	f7fe f833 	bl	40407c <__malloc_unlock>
  406016:	e751      	b.n	405ebc <_realloc_r+0xe4>
  406018:	682b      	ldr	r3, [r5, #0]
  40601a:	6003      	str	r3, [r0, #0]
  40601c:	686b      	ldr	r3, [r5, #4]
  40601e:	6043      	str	r3, [r0, #4]
  406020:	2a1b      	cmp	r2, #27
  406022:	d82d      	bhi.n	406080 <_realloc_r+0x2a8>
  406024:	f100 0308 	add.w	r3, r0, #8
  406028:	f105 0208 	add.w	r2, r5, #8
  40602c:	e71b      	b.n	405e66 <_realloc_r+0x8e>
  40602e:	4632      	mov	r2, r6
  406030:	6829      	ldr	r1, [r5, #0]
  406032:	6011      	str	r1, [r2, #0]
  406034:	6869      	ldr	r1, [r5, #4]
  406036:	6051      	str	r1, [r2, #4]
  406038:	68a9      	ldr	r1, [r5, #8]
  40603a:	6091      	str	r1, [r2, #8]
  40603c:	461c      	mov	r4, r3
  40603e:	46d1      	mov	r9, sl
  406040:	e72a      	b.n	405e98 <_realloc_r+0xc0>
  406042:	eb09 0107 	add.w	r1, r9, r7
  406046:	ebab 0b07 	sub.w	fp, fp, r7
  40604a:	f04b 0201 	orr.w	r2, fp, #1
  40604e:	6099      	str	r1, [r3, #8]
  406050:	604a      	str	r2, [r1, #4]
  406052:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406056:	f003 0301 	and.w	r3, r3, #1
  40605a:	431f      	orrs	r7, r3
  40605c:	4640      	mov	r0, r8
  40605e:	f845 7c04 	str.w	r7, [r5, #-4]
  406062:	f7fe f80b 	bl	40407c <__malloc_unlock>
  406066:	462e      	mov	r6, r5
  406068:	e728      	b.n	405ebc <_realloc_r+0xe4>
  40606a:	4629      	mov	r1, r5
  40606c:	f7ff fe50 	bl	405d10 <memmove>
  406070:	e6ff      	b.n	405e72 <_realloc_r+0x9a>
  406072:	4629      	mov	r1, r5
  406074:	4630      	mov	r0, r6
  406076:	461c      	mov	r4, r3
  406078:	46d1      	mov	r9, sl
  40607a:	f7ff fe49 	bl	405d10 <memmove>
  40607e:	e70b      	b.n	405e98 <_realloc_r+0xc0>
  406080:	68ab      	ldr	r3, [r5, #8]
  406082:	6083      	str	r3, [r0, #8]
  406084:	68eb      	ldr	r3, [r5, #12]
  406086:	60c3      	str	r3, [r0, #12]
  406088:	2a24      	cmp	r2, #36	; 0x24
  40608a:	d017      	beq.n	4060bc <_realloc_r+0x2e4>
  40608c:	f100 0310 	add.w	r3, r0, #16
  406090:	f105 0210 	add.w	r2, r5, #16
  406094:	e6e7      	b.n	405e66 <_realloc_r+0x8e>
  406096:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40609a:	f023 0303 	bic.w	r3, r3, #3
  40609e:	441c      	add	r4, r3
  4060a0:	462e      	mov	r6, r5
  4060a2:	e6f9      	b.n	405e98 <_realloc_r+0xc0>
  4060a4:	68a9      	ldr	r1, [r5, #8]
  4060a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4060aa:	68e9      	ldr	r1, [r5, #12]
  4060ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4060b0:	2a24      	cmp	r2, #36	; 0x24
  4060b2:	d00c      	beq.n	4060ce <_realloc_r+0x2f6>
  4060b4:	3510      	adds	r5, #16
  4060b6:	f10a 0218 	add.w	r2, sl, #24
  4060ba:	e7b9      	b.n	406030 <_realloc_r+0x258>
  4060bc:	692b      	ldr	r3, [r5, #16]
  4060be:	6103      	str	r3, [r0, #16]
  4060c0:	696b      	ldr	r3, [r5, #20]
  4060c2:	6143      	str	r3, [r0, #20]
  4060c4:	f105 0218 	add.w	r2, r5, #24
  4060c8:	f100 0318 	add.w	r3, r0, #24
  4060cc:	e6cb      	b.n	405e66 <_realloc_r+0x8e>
  4060ce:	692a      	ldr	r2, [r5, #16]
  4060d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4060d4:	696a      	ldr	r2, [r5, #20]
  4060d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4060da:	3518      	adds	r5, #24
  4060dc:	f10a 0220 	add.w	r2, sl, #32
  4060e0:	e7a6      	b.n	406030 <_realloc_r+0x258>
  4060e2:	4632      	mov	r2, r6
  4060e4:	e77f      	b.n	405fe6 <_realloc_r+0x20e>
  4060e6:	4629      	mov	r1, r5
  4060e8:	4630      	mov	r0, r6
  4060ea:	9301      	str	r3, [sp, #4]
  4060ec:	f7ff fe10 	bl	405d10 <memmove>
  4060f0:	9b01      	ldr	r3, [sp, #4]
  4060f2:	e77e      	b.n	405ff2 <_realloc_r+0x21a>
  4060f4:	68a9      	ldr	r1, [r5, #8]
  4060f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4060fa:	68e9      	ldr	r1, [r5, #12]
  4060fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406100:	2a24      	cmp	r2, #36	; 0x24
  406102:	d003      	beq.n	40610c <_realloc_r+0x334>
  406104:	3510      	adds	r5, #16
  406106:	f10a 0218 	add.w	r2, sl, #24
  40610a:	e76c      	b.n	405fe6 <_realloc_r+0x20e>
  40610c:	692a      	ldr	r2, [r5, #16]
  40610e:	f8ca 2018 	str.w	r2, [sl, #24]
  406112:	696a      	ldr	r2, [r5, #20]
  406114:	f8ca 201c 	str.w	r2, [sl, #28]
  406118:	3518      	adds	r5, #24
  40611a:	f10a 0220 	add.w	r2, sl, #32
  40611e:	e762      	b.n	405fe6 <_realloc_r+0x20e>
  406120:	20400448 	.word	0x20400448

00406124 <__sread>:
  406124:	b510      	push	{r4, lr}
  406126:	460c      	mov	r4, r1
  406128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40612c:	f000 f9f6 	bl	40651c <_read_r>
  406130:	2800      	cmp	r0, #0
  406132:	db03      	blt.n	40613c <__sread+0x18>
  406134:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406136:	4403      	add	r3, r0
  406138:	6523      	str	r3, [r4, #80]	; 0x50
  40613a:	bd10      	pop	{r4, pc}
  40613c:	89a3      	ldrh	r3, [r4, #12]
  40613e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406142:	81a3      	strh	r3, [r4, #12]
  406144:	bd10      	pop	{r4, pc}
  406146:	bf00      	nop

00406148 <__swrite>:
  406148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40614c:	4616      	mov	r6, r2
  40614e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406152:	461f      	mov	r7, r3
  406154:	05d3      	lsls	r3, r2, #23
  406156:	460c      	mov	r4, r1
  406158:	4605      	mov	r5, r0
  40615a:	d507      	bpl.n	40616c <__swrite+0x24>
  40615c:	2200      	movs	r2, #0
  40615e:	2302      	movs	r3, #2
  406160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406164:	f000 f9c4 	bl	4064f0 <_lseek_r>
  406168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40616c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406174:	81a2      	strh	r2, [r4, #12]
  406176:	463b      	mov	r3, r7
  406178:	4632      	mov	r2, r6
  40617a:	4628      	mov	r0, r5
  40617c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406180:	f000 b8a4 	b.w	4062cc <_write_r>

00406184 <__sseek>:
  406184:	b510      	push	{r4, lr}
  406186:	460c      	mov	r4, r1
  406188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40618c:	f000 f9b0 	bl	4064f0 <_lseek_r>
  406190:	89a3      	ldrh	r3, [r4, #12]
  406192:	1c42      	adds	r2, r0, #1
  406194:	bf0e      	itee	eq
  406196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40619a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40619e:	6520      	strne	r0, [r4, #80]	; 0x50
  4061a0:	81a3      	strh	r3, [r4, #12]
  4061a2:	bd10      	pop	{r4, pc}

004061a4 <__sclose>:
  4061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4061a8:	f000 b908 	b.w	4063bc <_close_r>

004061ac <__swbuf_r>:
  4061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4061ae:	460d      	mov	r5, r1
  4061b0:	4614      	mov	r4, r2
  4061b2:	4606      	mov	r6, r0
  4061b4:	b110      	cbz	r0, 4061bc <__swbuf_r+0x10>
  4061b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061b8:	2b00      	cmp	r3, #0
  4061ba:	d04b      	beq.n	406254 <__swbuf_r+0xa8>
  4061bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4061c0:	69a3      	ldr	r3, [r4, #24]
  4061c2:	60a3      	str	r3, [r4, #8]
  4061c4:	b291      	uxth	r1, r2
  4061c6:	0708      	lsls	r0, r1, #28
  4061c8:	d539      	bpl.n	40623e <__swbuf_r+0x92>
  4061ca:	6923      	ldr	r3, [r4, #16]
  4061cc:	2b00      	cmp	r3, #0
  4061ce:	d036      	beq.n	40623e <__swbuf_r+0x92>
  4061d0:	b2ed      	uxtb	r5, r5
  4061d2:	0489      	lsls	r1, r1, #18
  4061d4:	462f      	mov	r7, r5
  4061d6:	d515      	bpl.n	406204 <__swbuf_r+0x58>
  4061d8:	6822      	ldr	r2, [r4, #0]
  4061da:	6961      	ldr	r1, [r4, #20]
  4061dc:	1ad3      	subs	r3, r2, r3
  4061de:	428b      	cmp	r3, r1
  4061e0:	da1c      	bge.n	40621c <__swbuf_r+0x70>
  4061e2:	3301      	adds	r3, #1
  4061e4:	68a1      	ldr	r1, [r4, #8]
  4061e6:	1c50      	adds	r0, r2, #1
  4061e8:	3901      	subs	r1, #1
  4061ea:	60a1      	str	r1, [r4, #8]
  4061ec:	6020      	str	r0, [r4, #0]
  4061ee:	7015      	strb	r5, [r2, #0]
  4061f0:	6962      	ldr	r2, [r4, #20]
  4061f2:	429a      	cmp	r2, r3
  4061f4:	d01a      	beq.n	40622c <__swbuf_r+0x80>
  4061f6:	89a3      	ldrh	r3, [r4, #12]
  4061f8:	07db      	lsls	r3, r3, #31
  4061fa:	d501      	bpl.n	406200 <__swbuf_r+0x54>
  4061fc:	2d0a      	cmp	r5, #10
  4061fe:	d015      	beq.n	40622c <__swbuf_r+0x80>
  406200:	4638      	mov	r0, r7
  406202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406204:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40620a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40620e:	81a2      	strh	r2, [r4, #12]
  406210:	6822      	ldr	r2, [r4, #0]
  406212:	6661      	str	r1, [r4, #100]	; 0x64
  406214:	6961      	ldr	r1, [r4, #20]
  406216:	1ad3      	subs	r3, r2, r3
  406218:	428b      	cmp	r3, r1
  40621a:	dbe2      	blt.n	4061e2 <__swbuf_r+0x36>
  40621c:	4621      	mov	r1, r4
  40621e:	4630      	mov	r0, r6
  406220:	f7ff f87a 	bl	405318 <_fflush_r>
  406224:	b940      	cbnz	r0, 406238 <__swbuf_r+0x8c>
  406226:	6822      	ldr	r2, [r4, #0]
  406228:	2301      	movs	r3, #1
  40622a:	e7db      	b.n	4061e4 <__swbuf_r+0x38>
  40622c:	4621      	mov	r1, r4
  40622e:	4630      	mov	r0, r6
  406230:	f7ff f872 	bl	405318 <_fflush_r>
  406234:	2800      	cmp	r0, #0
  406236:	d0e3      	beq.n	406200 <__swbuf_r+0x54>
  406238:	f04f 37ff 	mov.w	r7, #4294967295
  40623c:	e7e0      	b.n	406200 <__swbuf_r+0x54>
  40623e:	4621      	mov	r1, r4
  406240:	4630      	mov	r0, r6
  406242:	f7fe ff55 	bl	4050f0 <__swsetup_r>
  406246:	2800      	cmp	r0, #0
  406248:	d1f6      	bne.n	406238 <__swbuf_r+0x8c>
  40624a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40624e:	6923      	ldr	r3, [r4, #16]
  406250:	b291      	uxth	r1, r2
  406252:	e7bd      	b.n	4061d0 <__swbuf_r+0x24>
  406254:	f7ff f8b8 	bl	4053c8 <__sinit>
  406258:	e7b0      	b.n	4061bc <__swbuf_r+0x10>
  40625a:	bf00      	nop

0040625c <_wcrtomb_r>:
  40625c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40625e:	4606      	mov	r6, r0
  406260:	b085      	sub	sp, #20
  406262:	461f      	mov	r7, r3
  406264:	b189      	cbz	r1, 40628a <_wcrtomb_r+0x2e>
  406266:	4c10      	ldr	r4, [pc, #64]	; (4062a8 <_wcrtomb_r+0x4c>)
  406268:	4d10      	ldr	r5, [pc, #64]	; (4062ac <_wcrtomb_r+0x50>)
  40626a:	6824      	ldr	r4, [r4, #0]
  40626c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40626e:	2c00      	cmp	r4, #0
  406270:	bf08      	it	eq
  406272:	462c      	moveq	r4, r5
  406274:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406278:	47a0      	blx	r4
  40627a:	1c43      	adds	r3, r0, #1
  40627c:	d103      	bne.n	406286 <_wcrtomb_r+0x2a>
  40627e:	2200      	movs	r2, #0
  406280:	238a      	movs	r3, #138	; 0x8a
  406282:	603a      	str	r2, [r7, #0]
  406284:	6033      	str	r3, [r6, #0]
  406286:	b005      	add	sp, #20
  406288:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40628a:	460c      	mov	r4, r1
  40628c:	4906      	ldr	r1, [pc, #24]	; (4062a8 <_wcrtomb_r+0x4c>)
  40628e:	4a07      	ldr	r2, [pc, #28]	; (4062ac <_wcrtomb_r+0x50>)
  406290:	6809      	ldr	r1, [r1, #0]
  406292:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406294:	2900      	cmp	r1, #0
  406296:	bf08      	it	eq
  406298:	4611      	moveq	r1, r2
  40629a:	4622      	mov	r2, r4
  40629c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4062a0:	a901      	add	r1, sp, #4
  4062a2:	47a0      	blx	r4
  4062a4:	e7e9      	b.n	40627a <_wcrtomb_r+0x1e>
  4062a6:	bf00      	nop
  4062a8:	20400018 	.word	0x20400018
  4062ac:	2040085c 	.word	0x2040085c

004062b0 <__ascii_wctomb>:
  4062b0:	b121      	cbz	r1, 4062bc <__ascii_wctomb+0xc>
  4062b2:	2aff      	cmp	r2, #255	; 0xff
  4062b4:	d804      	bhi.n	4062c0 <__ascii_wctomb+0x10>
  4062b6:	700a      	strb	r2, [r1, #0]
  4062b8:	2001      	movs	r0, #1
  4062ba:	4770      	bx	lr
  4062bc:	4608      	mov	r0, r1
  4062be:	4770      	bx	lr
  4062c0:	238a      	movs	r3, #138	; 0x8a
  4062c2:	6003      	str	r3, [r0, #0]
  4062c4:	f04f 30ff 	mov.w	r0, #4294967295
  4062c8:	4770      	bx	lr
  4062ca:	bf00      	nop

004062cc <_write_r>:
  4062cc:	b570      	push	{r4, r5, r6, lr}
  4062ce:	460d      	mov	r5, r1
  4062d0:	4c08      	ldr	r4, [pc, #32]	; (4062f4 <_write_r+0x28>)
  4062d2:	4611      	mov	r1, r2
  4062d4:	4606      	mov	r6, r0
  4062d6:	461a      	mov	r2, r3
  4062d8:	4628      	mov	r0, r5
  4062da:	2300      	movs	r3, #0
  4062dc:	6023      	str	r3, [r4, #0]
  4062de:	f7fa fa5f 	bl	4007a0 <_write>
  4062e2:	1c43      	adds	r3, r0, #1
  4062e4:	d000      	beq.n	4062e8 <_write_r+0x1c>
  4062e6:	bd70      	pop	{r4, r5, r6, pc}
  4062e8:	6823      	ldr	r3, [r4, #0]
  4062ea:	2b00      	cmp	r3, #0
  4062ec:	d0fb      	beq.n	4062e6 <_write_r+0x1a>
  4062ee:	6033      	str	r3, [r6, #0]
  4062f0:	bd70      	pop	{r4, r5, r6, pc}
  4062f2:	bf00      	nop
  4062f4:	20400cd8 	.word	0x20400cd8

004062f8 <__register_exitproc>:
  4062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062fc:	4d2c      	ldr	r5, [pc, #176]	; (4063b0 <__register_exitproc+0xb8>)
  4062fe:	4606      	mov	r6, r0
  406300:	6828      	ldr	r0, [r5, #0]
  406302:	4698      	mov	r8, r3
  406304:	460f      	mov	r7, r1
  406306:	4691      	mov	r9, r2
  406308:	f7ff fc1e 	bl	405b48 <__retarget_lock_acquire_recursive>
  40630c:	4b29      	ldr	r3, [pc, #164]	; (4063b4 <__register_exitproc+0xbc>)
  40630e:	681c      	ldr	r4, [r3, #0]
  406310:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406314:	2b00      	cmp	r3, #0
  406316:	d03e      	beq.n	406396 <__register_exitproc+0x9e>
  406318:	685a      	ldr	r2, [r3, #4]
  40631a:	2a1f      	cmp	r2, #31
  40631c:	dc1c      	bgt.n	406358 <__register_exitproc+0x60>
  40631e:	f102 0e01 	add.w	lr, r2, #1
  406322:	b176      	cbz	r6, 406342 <__register_exitproc+0x4a>
  406324:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406328:	2401      	movs	r4, #1
  40632a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40632e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406332:	4094      	lsls	r4, r2
  406334:	4320      	orrs	r0, r4
  406336:	2e02      	cmp	r6, #2
  406338:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40633c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406340:	d023      	beq.n	40638a <__register_exitproc+0x92>
  406342:	3202      	adds	r2, #2
  406344:	f8c3 e004 	str.w	lr, [r3, #4]
  406348:	6828      	ldr	r0, [r5, #0]
  40634a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40634e:	f7ff fbfd 	bl	405b4c <__retarget_lock_release_recursive>
  406352:	2000      	movs	r0, #0
  406354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406358:	4b17      	ldr	r3, [pc, #92]	; (4063b8 <__register_exitproc+0xc0>)
  40635a:	b30b      	cbz	r3, 4063a0 <__register_exitproc+0xa8>
  40635c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406360:	f7fd fade 	bl	403920 <malloc>
  406364:	4603      	mov	r3, r0
  406366:	b1d8      	cbz	r0, 4063a0 <__register_exitproc+0xa8>
  406368:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40636c:	6002      	str	r2, [r0, #0]
  40636e:	2100      	movs	r1, #0
  406370:	6041      	str	r1, [r0, #4]
  406372:	460a      	mov	r2, r1
  406374:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406378:	f04f 0e01 	mov.w	lr, #1
  40637c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406380:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406384:	2e00      	cmp	r6, #0
  406386:	d0dc      	beq.n	406342 <__register_exitproc+0x4a>
  406388:	e7cc      	b.n	406324 <__register_exitproc+0x2c>
  40638a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40638e:	430c      	orrs	r4, r1
  406390:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406394:	e7d5      	b.n	406342 <__register_exitproc+0x4a>
  406396:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40639a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40639e:	e7bb      	b.n	406318 <__register_exitproc+0x20>
  4063a0:	6828      	ldr	r0, [r5, #0]
  4063a2:	f7ff fbd3 	bl	405b4c <__retarget_lock_release_recursive>
  4063a6:	f04f 30ff 	mov.w	r0, #4294967295
  4063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4063ae:	bf00      	nop
  4063b0:	20400858 	.word	0x20400858
  4063b4:	004068d8 	.word	0x004068d8
  4063b8:	00403921 	.word	0x00403921

004063bc <_close_r>:
  4063bc:	b538      	push	{r3, r4, r5, lr}
  4063be:	4c07      	ldr	r4, [pc, #28]	; (4063dc <_close_r+0x20>)
  4063c0:	2300      	movs	r3, #0
  4063c2:	4605      	mov	r5, r0
  4063c4:	4608      	mov	r0, r1
  4063c6:	6023      	str	r3, [r4, #0]
  4063c8:	f7fb f832 	bl	401430 <_close>
  4063cc:	1c43      	adds	r3, r0, #1
  4063ce:	d000      	beq.n	4063d2 <_close_r+0x16>
  4063d0:	bd38      	pop	{r3, r4, r5, pc}
  4063d2:	6823      	ldr	r3, [r4, #0]
  4063d4:	2b00      	cmp	r3, #0
  4063d6:	d0fb      	beq.n	4063d0 <_close_r+0x14>
  4063d8:	602b      	str	r3, [r5, #0]
  4063da:	bd38      	pop	{r3, r4, r5, pc}
  4063dc:	20400cd8 	.word	0x20400cd8

004063e0 <_fclose_r>:
  4063e0:	b570      	push	{r4, r5, r6, lr}
  4063e2:	b159      	cbz	r1, 4063fc <_fclose_r+0x1c>
  4063e4:	4605      	mov	r5, r0
  4063e6:	460c      	mov	r4, r1
  4063e8:	b110      	cbz	r0, 4063f0 <_fclose_r+0x10>
  4063ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063ec:	2b00      	cmp	r3, #0
  4063ee:	d03c      	beq.n	40646a <_fclose_r+0x8a>
  4063f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4063f2:	07d8      	lsls	r0, r3, #31
  4063f4:	d505      	bpl.n	406402 <_fclose_r+0x22>
  4063f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063fa:	b92b      	cbnz	r3, 406408 <_fclose_r+0x28>
  4063fc:	2600      	movs	r6, #0
  4063fe:	4630      	mov	r0, r6
  406400:	bd70      	pop	{r4, r5, r6, pc}
  406402:	89a3      	ldrh	r3, [r4, #12]
  406404:	0599      	lsls	r1, r3, #22
  406406:	d53c      	bpl.n	406482 <_fclose_r+0xa2>
  406408:	4621      	mov	r1, r4
  40640a:	4628      	mov	r0, r5
  40640c:	f7fe fee4 	bl	4051d8 <__sflush_r>
  406410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406412:	4606      	mov	r6, r0
  406414:	b133      	cbz	r3, 406424 <_fclose_r+0x44>
  406416:	69e1      	ldr	r1, [r4, #28]
  406418:	4628      	mov	r0, r5
  40641a:	4798      	blx	r3
  40641c:	2800      	cmp	r0, #0
  40641e:	bfb8      	it	lt
  406420:	f04f 36ff 	movlt.w	r6, #4294967295
  406424:	89a3      	ldrh	r3, [r4, #12]
  406426:	061a      	lsls	r2, r3, #24
  406428:	d422      	bmi.n	406470 <_fclose_r+0x90>
  40642a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40642c:	b141      	cbz	r1, 406440 <_fclose_r+0x60>
  40642e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406432:	4299      	cmp	r1, r3
  406434:	d002      	beq.n	40643c <_fclose_r+0x5c>
  406436:	4628      	mov	r0, r5
  406438:	f7ff f8ec 	bl	405614 <_free_r>
  40643c:	2300      	movs	r3, #0
  40643e:	6323      	str	r3, [r4, #48]	; 0x30
  406440:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406442:	b121      	cbz	r1, 40644e <_fclose_r+0x6e>
  406444:	4628      	mov	r0, r5
  406446:	f7ff f8e5 	bl	405614 <_free_r>
  40644a:	2300      	movs	r3, #0
  40644c:	6463      	str	r3, [r4, #68]	; 0x44
  40644e:	f7fe ffe7 	bl	405420 <__sfp_lock_acquire>
  406452:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406454:	2200      	movs	r2, #0
  406456:	07db      	lsls	r3, r3, #31
  406458:	81a2      	strh	r2, [r4, #12]
  40645a:	d50e      	bpl.n	40647a <_fclose_r+0x9a>
  40645c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40645e:	f7ff fb71 	bl	405b44 <__retarget_lock_close_recursive>
  406462:	f7fe ffe3 	bl	40542c <__sfp_lock_release>
  406466:	4630      	mov	r0, r6
  406468:	bd70      	pop	{r4, r5, r6, pc}
  40646a:	f7fe ffad 	bl	4053c8 <__sinit>
  40646e:	e7bf      	b.n	4063f0 <_fclose_r+0x10>
  406470:	6921      	ldr	r1, [r4, #16]
  406472:	4628      	mov	r0, r5
  406474:	f7ff f8ce 	bl	405614 <_free_r>
  406478:	e7d7      	b.n	40642a <_fclose_r+0x4a>
  40647a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40647c:	f7ff fb66 	bl	405b4c <__retarget_lock_release_recursive>
  406480:	e7ec      	b.n	40645c <_fclose_r+0x7c>
  406482:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406484:	f7ff fb60 	bl	405b48 <__retarget_lock_acquire_recursive>
  406488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40648c:	2b00      	cmp	r3, #0
  40648e:	d1bb      	bne.n	406408 <_fclose_r+0x28>
  406490:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406492:	f016 0601 	ands.w	r6, r6, #1
  406496:	d1b1      	bne.n	4063fc <_fclose_r+0x1c>
  406498:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40649a:	f7ff fb57 	bl	405b4c <__retarget_lock_release_recursive>
  40649e:	4630      	mov	r0, r6
  4064a0:	bd70      	pop	{r4, r5, r6, pc}
  4064a2:	bf00      	nop

004064a4 <_fstat_r>:
  4064a4:	b538      	push	{r3, r4, r5, lr}
  4064a6:	460b      	mov	r3, r1
  4064a8:	4c07      	ldr	r4, [pc, #28]	; (4064c8 <_fstat_r+0x24>)
  4064aa:	4605      	mov	r5, r0
  4064ac:	4611      	mov	r1, r2
  4064ae:	4618      	mov	r0, r3
  4064b0:	2300      	movs	r3, #0
  4064b2:	6023      	str	r3, [r4, #0]
  4064b4:	f7fa ffbf 	bl	401436 <_fstat>
  4064b8:	1c43      	adds	r3, r0, #1
  4064ba:	d000      	beq.n	4064be <_fstat_r+0x1a>
  4064bc:	bd38      	pop	{r3, r4, r5, pc}
  4064be:	6823      	ldr	r3, [r4, #0]
  4064c0:	2b00      	cmp	r3, #0
  4064c2:	d0fb      	beq.n	4064bc <_fstat_r+0x18>
  4064c4:	602b      	str	r3, [r5, #0]
  4064c6:	bd38      	pop	{r3, r4, r5, pc}
  4064c8:	20400cd8 	.word	0x20400cd8

004064cc <_isatty_r>:
  4064cc:	b538      	push	{r3, r4, r5, lr}
  4064ce:	4c07      	ldr	r4, [pc, #28]	; (4064ec <_isatty_r+0x20>)
  4064d0:	2300      	movs	r3, #0
  4064d2:	4605      	mov	r5, r0
  4064d4:	4608      	mov	r0, r1
  4064d6:	6023      	str	r3, [r4, #0]
  4064d8:	f7fa ffb2 	bl	401440 <_isatty>
  4064dc:	1c43      	adds	r3, r0, #1
  4064de:	d000      	beq.n	4064e2 <_isatty_r+0x16>
  4064e0:	bd38      	pop	{r3, r4, r5, pc}
  4064e2:	6823      	ldr	r3, [r4, #0]
  4064e4:	2b00      	cmp	r3, #0
  4064e6:	d0fb      	beq.n	4064e0 <_isatty_r+0x14>
  4064e8:	602b      	str	r3, [r5, #0]
  4064ea:	bd38      	pop	{r3, r4, r5, pc}
  4064ec:	20400cd8 	.word	0x20400cd8

004064f0 <_lseek_r>:
  4064f0:	b570      	push	{r4, r5, r6, lr}
  4064f2:	460d      	mov	r5, r1
  4064f4:	4c08      	ldr	r4, [pc, #32]	; (406518 <_lseek_r+0x28>)
  4064f6:	4611      	mov	r1, r2
  4064f8:	4606      	mov	r6, r0
  4064fa:	461a      	mov	r2, r3
  4064fc:	4628      	mov	r0, r5
  4064fe:	2300      	movs	r3, #0
  406500:	6023      	str	r3, [r4, #0]
  406502:	f7fa ff9f 	bl	401444 <_lseek>
  406506:	1c43      	adds	r3, r0, #1
  406508:	d000      	beq.n	40650c <_lseek_r+0x1c>
  40650a:	bd70      	pop	{r4, r5, r6, pc}
  40650c:	6823      	ldr	r3, [r4, #0]
  40650e:	2b00      	cmp	r3, #0
  406510:	d0fb      	beq.n	40650a <_lseek_r+0x1a>
  406512:	6033      	str	r3, [r6, #0]
  406514:	bd70      	pop	{r4, r5, r6, pc}
  406516:	bf00      	nop
  406518:	20400cd8 	.word	0x20400cd8

0040651c <_read_r>:
  40651c:	b570      	push	{r4, r5, r6, lr}
  40651e:	460d      	mov	r5, r1
  406520:	4c08      	ldr	r4, [pc, #32]	; (406544 <_read_r+0x28>)
  406522:	4611      	mov	r1, r2
  406524:	4606      	mov	r6, r0
  406526:	461a      	mov	r2, r3
  406528:	4628      	mov	r0, r5
  40652a:	2300      	movs	r3, #0
  40652c:	6023      	str	r3, [r4, #0]
  40652e:	f7fa f919 	bl	400764 <_read>
  406532:	1c43      	adds	r3, r0, #1
  406534:	d000      	beq.n	406538 <_read_r+0x1c>
  406536:	bd70      	pop	{r4, r5, r6, pc}
  406538:	6823      	ldr	r3, [r4, #0]
  40653a:	2b00      	cmp	r3, #0
  40653c:	d0fb      	beq.n	406536 <_read_r+0x1a>
  40653e:	6033      	str	r3, [r6, #0]
  406540:	bd70      	pop	{r4, r5, r6, pc}
  406542:	bf00      	nop
  406544:	20400cd8 	.word	0x20400cd8

00406548 <__aeabi_uldivmod>:
  406548:	b953      	cbnz	r3, 406560 <__aeabi_uldivmod+0x18>
  40654a:	b94a      	cbnz	r2, 406560 <__aeabi_uldivmod+0x18>
  40654c:	2900      	cmp	r1, #0
  40654e:	bf08      	it	eq
  406550:	2800      	cmpeq	r0, #0
  406552:	bf1c      	itt	ne
  406554:	f04f 31ff 	movne.w	r1, #4294967295
  406558:	f04f 30ff 	movne.w	r0, #4294967295
  40655c:	f000 b97a 	b.w	406854 <__aeabi_idiv0>
  406560:	f1ad 0c08 	sub.w	ip, sp, #8
  406564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406568:	f000 f806 	bl	406578 <__udivmoddi4>
  40656c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406574:	b004      	add	sp, #16
  406576:	4770      	bx	lr

00406578 <__udivmoddi4>:
  406578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40657c:	468c      	mov	ip, r1
  40657e:	460d      	mov	r5, r1
  406580:	4604      	mov	r4, r0
  406582:	9e08      	ldr	r6, [sp, #32]
  406584:	2b00      	cmp	r3, #0
  406586:	d151      	bne.n	40662c <__udivmoddi4+0xb4>
  406588:	428a      	cmp	r2, r1
  40658a:	4617      	mov	r7, r2
  40658c:	d96d      	bls.n	40666a <__udivmoddi4+0xf2>
  40658e:	fab2 fe82 	clz	lr, r2
  406592:	f1be 0f00 	cmp.w	lr, #0
  406596:	d00b      	beq.n	4065b0 <__udivmoddi4+0x38>
  406598:	f1ce 0c20 	rsb	ip, lr, #32
  40659c:	fa01 f50e 	lsl.w	r5, r1, lr
  4065a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4065a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4065a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4065ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4065b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4065b4:	0c25      	lsrs	r5, r4, #16
  4065b6:	fbbc f8fa 	udiv	r8, ip, sl
  4065ba:	fa1f f987 	uxth.w	r9, r7
  4065be:	fb0a cc18 	mls	ip, sl, r8, ip
  4065c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4065c6:	fb08 f309 	mul.w	r3, r8, r9
  4065ca:	42ab      	cmp	r3, r5
  4065cc:	d90a      	bls.n	4065e4 <__udivmoddi4+0x6c>
  4065ce:	19ed      	adds	r5, r5, r7
  4065d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4065d4:	f080 8123 	bcs.w	40681e <__udivmoddi4+0x2a6>
  4065d8:	42ab      	cmp	r3, r5
  4065da:	f240 8120 	bls.w	40681e <__udivmoddi4+0x2a6>
  4065de:	f1a8 0802 	sub.w	r8, r8, #2
  4065e2:	443d      	add	r5, r7
  4065e4:	1aed      	subs	r5, r5, r3
  4065e6:	b2a4      	uxth	r4, r4
  4065e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4065ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4065f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4065f4:	fb00 f909 	mul.w	r9, r0, r9
  4065f8:	45a1      	cmp	r9, r4
  4065fa:	d909      	bls.n	406610 <__udivmoddi4+0x98>
  4065fc:	19e4      	adds	r4, r4, r7
  4065fe:	f100 33ff 	add.w	r3, r0, #4294967295
  406602:	f080 810a 	bcs.w	40681a <__udivmoddi4+0x2a2>
  406606:	45a1      	cmp	r9, r4
  406608:	f240 8107 	bls.w	40681a <__udivmoddi4+0x2a2>
  40660c:	3802      	subs	r0, #2
  40660e:	443c      	add	r4, r7
  406610:	eba4 0409 	sub.w	r4, r4, r9
  406614:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406618:	2100      	movs	r1, #0
  40661a:	2e00      	cmp	r6, #0
  40661c:	d061      	beq.n	4066e2 <__udivmoddi4+0x16a>
  40661e:	fa24 f40e 	lsr.w	r4, r4, lr
  406622:	2300      	movs	r3, #0
  406624:	6034      	str	r4, [r6, #0]
  406626:	6073      	str	r3, [r6, #4]
  406628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40662c:	428b      	cmp	r3, r1
  40662e:	d907      	bls.n	406640 <__udivmoddi4+0xc8>
  406630:	2e00      	cmp	r6, #0
  406632:	d054      	beq.n	4066de <__udivmoddi4+0x166>
  406634:	2100      	movs	r1, #0
  406636:	e886 0021 	stmia.w	r6, {r0, r5}
  40663a:	4608      	mov	r0, r1
  40663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406640:	fab3 f183 	clz	r1, r3
  406644:	2900      	cmp	r1, #0
  406646:	f040 808e 	bne.w	406766 <__udivmoddi4+0x1ee>
  40664a:	42ab      	cmp	r3, r5
  40664c:	d302      	bcc.n	406654 <__udivmoddi4+0xdc>
  40664e:	4282      	cmp	r2, r0
  406650:	f200 80fa 	bhi.w	406848 <__udivmoddi4+0x2d0>
  406654:	1a84      	subs	r4, r0, r2
  406656:	eb65 0503 	sbc.w	r5, r5, r3
  40665a:	2001      	movs	r0, #1
  40665c:	46ac      	mov	ip, r5
  40665e:	2e00      	cmp	r6, #0
  406660:	d03f      	beq.n	4066e2 <__udivmoddi4+0x16a>
  406662:	e886 1010 	stmia.w	r6, {r4, ip}
  406666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40666a:	b912      	cbnz	r2, 406672 <__udivmoddi4+0xfa>
  40666c:	2701      	movs	r7, #1
  40666e:	fbb7 f7f2 	udiv	r7, r7, r2
  406672:	fab7 fe87 	clz	lr, r7
  406676:	f1be 0f00 	cmp.w	lr, #0
  40667a:	d134      	bne.n	4066e6 <__udivmoddi4+0x16e>
  40667c:	1beb      	subs	r3, r5, r7
  40667e:	0c3a      	lsrs	r2, r7, #16
  406680:	fa1f fc87 	uxth.w	ip, r7
  406684:	2101      	movs	r1, #1
  406686:	fbb3 f8f2 	udiv	r8, r3, r2
  40668a:	0c25      	lsrs	r5, r4, #16
  40668c:	fb02 3318 	mls	r3, r2, r8, r3
  406690:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406694:	fb0c f308 	mul.w	r3, ip, r8
  406698:	42ab      	cmp	r3, r5
  40669a:	d907      	bls.n	4066ac <__udivmoddi4+0x134>
  40669c:	19ed      	adds	r5, r5, r7
  40669e:	f108 30ff 	add.w	r0, r8, #4294967295
  4066a2:	d202      	bcs.n	4066aa <__udivmoddi4+0x132>
  4066a4:	42ab      	cmp	r3, r5
  4066a6:	f200 80d1 	bhi.w	40684c <__udivmoddi4+0x2d4>
  4066aa:	4680      	mov	r8, r0
  4066ac:	1aed      	subs	r5, r5, r3
  4066ae:	b2a3      	uxth	r3, r4
  4066b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4066b4:	fb02 5510 	mls	r5, r2, r0, r5
  4066b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4066bc:	fb0c fc00 	mul.w	ip, ip, r0
  4066c0:	45a4      	cmp	ip, r4
  4066c2:	d907      	bls.n	4066d4 <__udivmoddi4+0x15c>
  4066c4:	19e4      	adds	r4, r4, r7
  4066c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4066ca:	d202      	bcs.n	4066d2 <__udivmoddi4+0x15a>
  4066cc:	45a4      	cmp	ip, r4
  4066ce:	f200 80b8 	bhi.w	406842 <__udivmoddi4+0x2ca>
  4066d2:	4618      	mov	r0, r3
  4066d4:	eba4 040c 	sub.w	r4, r4, ip
  4066d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4066dc:	e79d      	b.n	40661a <__udivmoddi4+0xa2>
  4066de:	4631      	mov	r1, r6
  4066e0:	4630      	mov	r0, r6
  4066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066e6:	f1ce 0420 	rsb	r4, lr, #32
  4066ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4066ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4066f2:	fa20 f804 	lsr.w	r8, r0, r4
  4066f6:	0c3a      	lsrs	r2, r7, #16
  4066f8:	fa25 f404 	lsr.w	r4, r5, r4
  4066fc:	ea48 0803 	orr.w	r8, r8, r3
  406700:	fbb4 f1f2 	udiv	r1, r4, r2
  406704:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406708:	fb02 4411 	mls	r4, r2, r1, r4
  40670c:	fa1f fc87 	uxth.w	ip, r7
  406710:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406714:	fb01 f30c 	mul.w	r3, r1, ip
  406718:	42ab      	cmp	r3, r5
  40671a:	fa00 f40e 	lsl.w	r4, r0, lr
  40671e:	d909      	bls.n	406734 <__udivmoddi4+0x1bc>
  406720:	19ed      	adds	r5, r5, r7
  406722:	f101 30ff 	add.w	r0, r1, #4294967295
  406726:	f080 808a 	bcs.w	40683e <__udivmoddi4+0x2c6>
  40672a:	42ab      	cmp	r3, r5
  40672c:	f240 8087 	bls.w	40683e <__udivmoddi4+0x2c6>
  406730:	3902      	subs	r1, #2
  406732:	443d      	add	r5, r7
  406734:	1aeb      	subs	r3, r5, r3
  406736:	fa1f f588 	uxth.w	r5, r8
  40673a:	fbb3 f0f2 	udiv	r0, r3, r2
  40673e:	fb02 3310 	mls	r3, r2, r0, r3
  406742:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406746:	fb00 f30c 	mul.w	r3, r0, ip
  40674a:	42ab      	cmp	r3, r5
  40674c:	d907      	bls.n	40675e <__udivmoddi4+0x1e6>
  40674e:	19ed      	adds	r5, r5, r7
  406750:	f100 38ff 	add.w	r8, r0, #4294967295
  406754:	d26f      	bcs.n	406836 <__udivmoddi4+0x2be>
  406756:	42ab      	cmp	r3, r5
  406758:	d96d      	bls.n	406836 <__udivmoddi4+0x2be>
  40675a:	3802      	subs	r0, #2
  40675c:	443d      	add	r5, r7
  40675e:	1aeb      	subs	r3, r5, r3
  406760:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406764:	e78f      	b.n	406686 <__udivmoddi4+0x10e>
  406766:	f1c1 0720 	rsb	r7, r1, #32
  40676a:	fa22 f807 	lsr.w	r8, r2, r7
  40676e:	408b      	lsls	r3, r1
  406770:	fa05 f401 	lsl.w	r4, r5, r1
  406774:	ea48 0303 	orr.w	r3, r8, r3
  406778:	fa20 fe07 	lsr.w	lr, r0, r7
  40677c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406780:	40fd      	lsrs	r5, r7
  406782:	ea4e 0e04 	orr.w	lr, lr, r4
  406786:	fbb5 f9fc 	udiv	r9, r5, ip
  40678a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40678e:	fb0c 5519 	mls	r5, ip, r9, r5
  406792:	fa1f f883 	uxth.w	r8, r3
  406796:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40679a:	fb09 f408 	mul.w	r4, r9, r8
  40679e:	42ac      	cmp	r4, r5
  4067a0:	fa02 f201 	lsl.w	r2, r2, r1
  4067a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4067a8:	d908      	bls.n	4067bc <__udivmoddi4+0x244>
  4067aa:	18ed      	adds	r5, r5, r3
  4067ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4067b0:	d243      	bcs.n	40683a <__udivmoddi4+0x2c2>
  4067b2:	42ac      	cmp	r4, r5
  4067b4:	d941      	bls.n	40683a <__udivmoddi4+0x2c2>
  4067b6:	f1a9 0902 	sub.w	r9, r9, #2
  4067ba:	441d      	add	r5, r3
  4067bc:	1b2d      	subs	r5, r5, r4
  4067be:	fa1f fe8e 	uxth.w	lr, lr
  4067c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4067c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4067ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4067ce:	fb00 f808 	mul.w	r8, r0, r8
  4067d2:	45a0      	cmp	r8, r4
  4067d4:	d907      	bls.n	4067e6 <__udivmoddi4+0x26e>
  4067d6:	18e4      	adds	r4, r4, r3
  4067d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4067dc:	d229      	bcs.n	406832 <__udivmoddi4+0x2ba>
  4067de:	45a0      	cmp	r8, r4
  4067e0:	d927      	bls.n	406832 <__udivmoddi4+0x2ba>
  4067e2:	3802      	subs	r0, #2
  4067e4:	441c      	add	r4, r3
  4067e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4067ea:	eba4 0408 	sub.w	r4, r4, r8
  4067ee:	fba0 8902 	umull	r8, r9, r0, r2
  4067f2:	454c      	cmp	r4, r9
  4067f4:	46c6      	mov	lr, r8
  4067f6:	464d      	mov	r5, r9
  4067f8:	d315      	bcc.n	406826 <__udivmoddi4+0x2ae>
  4067fa:	d012      	beq.n	406822 <__udivmoddi4+0x2aa>
  4067fc:	b156      	cbz	r6, 406814 <__udivmoddi4+0x29c>
  4067fe:	ebba 030e 	subs.w	r3, sl, lr
  406802:	eb64 0405 	sbc.w	r4, r4, r5
  406806:	fa04 f707 	lsl.w	r7, r4, r7
  40680a:	40cb      	lsrs	r3, r1
  40680c:	431f      	orrs	r7, r3
  40680e:	40cc      	lsrs	r4, r1
  406810:	6037      	str	r7, [r6, #0]
  406812:	6074      	str	r4, [r6, #4]
  406814:	2100      	movs	r1, #0
  406816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40681a:	4618      	mov	r0, r3
  40681c:	e6f8      	b.n	406610 <__udivmoddi4+0x98>
  40681e:	4690      	mov	r8, r2
  406820:	e6e0      	b.n	4065e4 <__udivmoddi4+0x6c>
  406822:	45c2      	cmp	sl, r8
  406824:	d2ea      	bcs.n	4067fc <__udivmoddi4+0x284>
  406826:	ebb8 0e02 	subs.w	lr, r8, r2
  40682a:	eb69 0503 	sbc.w	r5, r9, r3
  40682e:	3801      	subs	r0, #1
  406830:	e7e4      	b.n	4067fc <__udivmoddi4+0x284>
  406832:	4628      	mov	r0, r5
  406834:	e7d7      	b.n	4067e6 <__udivmoddi4+0x26e>
  406836:	4640      	mov	r0, r8
  406838:	e791      	b.n	40675e <__udivmoddi4+0x1e6>
  40683a:	4681      	mov	r9, r0
  40683c:	e7be      	b.n	4067bc <__udivmoddi4+0x244>
  40683e:	4601      	mov	r1, r0
  406840:	e778      	b.n	406734 <__udivmoddi4+0x1bc>
  406842:	3802      	subs	r0, #2
  406844:	443c      	add	r4, r7
  406846:	e745      	b.n	4066d4 <__udivmoddi4+0x15c>
  406848:	4608      	mov	r0, r1
  40684a:	e708      	b.n	40665e <__udivmoddi4+0xe6>
  40684c:	f1a8 0802 	sub.w	r8, r8, #2
  406850:	443d      	add	r5, r7
  406852:	e72b      	b.n	4066ac <__udivmoddi4+0x134>

00406854 <__aeabi_idiv0>:
  406854:	4770      	bx	lr
  406856:	bf00      	nop
  406858:	454c4449 	.word	0x454c4449
  40685c:	00000000 	.word	0x00000000
  406860:	51726d54 	.word	0x51726d54
  406864:	00000000 	.word	0x00000000
  406868:	20726d54 	.word	0x20726d54
  40686c:	00637653 	.word	0x00637653

00406870 <SDRAM_ISSI_IS42S16100E>:
  406870:	00000016 00000030 f955d5e0 6265445b     ....0.....U.[Deb
  406880:	205d6775 20304354 20515249 0000000a     ug] TC0 IRQ ....
  406890:	00636461 6c696146 74206465 7263206f     adc.Failed to cr
  4068a0:	65746165 73657420 64612074 61742063     eate test adc ta
  4068b0:	0a0d6b73 00000000 00000041 000a6425     sk......A...%d..
  4068c0:	63617473 766f206b 6c667265 2520776f     stack overflow %
  4068d0:	73252078 00000a0d                       x %s....

004068d8 <_global_impure_ptr>:
  4068d8:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  4068e8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4068f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406908:	0000296c                                l)..

0040690c <blanks.7217>:
  40690c:	20202020 20202020 20202020 20202020                     

0040691c <zeroes.7218>:
  40691c:	30303030 30303030 30303030 30303030     0000000000000000
  40692c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040693c <_ctype_>:
  40693c:	20202000 20202020 28282020 20282828     .         ((((( 
  40694c:	20202020 20202020 20202020 20202020                     
  40695c:	10108820 10101010 10101010 10101010      ...............
  40696c:	04040410 04040404 10040404 10101010     ................
  40697c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40698c:	01010101 01010101 01010101 10101010     ................
  40699c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4069ac:	02020202 02020202 02020202 10101010     ................
  4069bc:	00000020 00000000 00000000 00000000      ...............
	...

00406a40 <_init>:
  406a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a42:	bf00      	nop
  406a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a46:	bc08      	pop	{r3}
  406a48:	469e      	mov	lr, r3
  406a4a:	4770      	bx	lr

00406a4c <__init_array_start>:
  406a4c:	004051b9 	.word	0x004051b9

00406a50 <__frame_dummy_init_array_entry>:
  406a50:	00400165                                e.@.

00406a54 <_fini>:
  406a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a56:	bf00      	nop
  406a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a5a:	bc08      	pop	{r3}
  406a5c:	469e      	mov	lr, r3
  406a5e:	4770      	bx	lr

00406a60 <__fini_array_start>:
  406a60:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <g_sdram>:
20400014:	0000 7000                                   ...p

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	0cb4 2040                                   ..@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	62b1 0040 5c41 0040 0000 0000 693c 0040     .b@.A\@.....<i@.
2040094c:	6938 0040 68b4 0040 68b4 0040 68b4 0040     8i@..h@..h@..h@.
2040095c:	68b4 0040 68b4 0040 68b4 0040 68b4 0040     .h@..h@..h@..h@.
2040096c:	68b4 0040 68b4 0040 ffff ffff ffff ffff     .h@..h@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
